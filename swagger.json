{
	"security": [
		{
			"Basic Authentication": []
		}
	],
	"components": {
		"responses": {
			"400": {
				"description": "Bad Request",
				"content": {
					"text": {
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"401": {
				"description": "Unauthorized",
				"content": {
					"text": {
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"423": {
				"description": "Locked",
				"content": {
					"text": {
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"202UR": {
				"description": "Request was submitted, request id returned",
				"content": {
					"text": {
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"400RS": {
				"description": "Bad Request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/definitions/ReturnStatus"
						}
					}
				}
			},
			"404UR": {
				"description": "Job not found",
				"content": {
					"text": {
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"403": {
				"description": "Forbidden",
				"content": {
					"text": {
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"404": {
				"description": "Not Found",
				"content": {
					"text": {
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"409UR": {
				"description": "Another pending request exists for the job",
				"content": {
					"text": {
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"409": {
				"description": "Conflict",
				"content": {
					"text": {
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"securitySchemes": {
			"Basic Authentication": {
				"scheme": "basic",
				"type": "http"
			}
		},
		"parameters": {
			"Take": {
				"schema": {
					"default": 1000,
					"format": "int32",
					"type": "integer"
				},
				"in": "query",
				"name": "take",
				"description": "The number of matches to take.  Max value is 1000.",
				"required": false
			},
			"HazardID": {
				"schema": {
					"type": "string"
				},
				"in": "path",
				"name": "hid",
				"description": "The internal ID of the resource in the form of an ObjectId, eg 59a1bd89f304f0ef8232c76b",
				"required": true
			},
			"SkipPopulatedFields": {
				"schema": {
					"type": "boolean"
				},
				"in": "query",
				"name": "skipPopulatedFields",
				"description": "Do not edit populated fields",
				"required": false
			},
			"Address": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "address",
				"description": "Premise Address",
				"required": false
			},
			"Query": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "q",
				"description": "The string to query against",
				"required": true
			},
			"RefreshActive": {
				"schema": {
					"default": true,
					"type": "boolean"
				},
				"in": "query",
				"name": "active",
				"description": "Check for changes to active vs archive data.",
				"required": false
			},
			"RequestID": {
				"schema": {
					"type": "string"
				},
				"in": "path",
				"name": "rid",
				"description": "The internal ID of an outage analysis user request, typically returned from the Lock, Unlock, ForceUp, ForceDown, Verify, and Restore methods",
				"required": true
			},
			"isNetworkID": {
				"schema": {
					"default": false,
					"type": "boolean"
				},
				"in": "query",
				"name": "isNetworkID",
				"description": "Whether the provided ID is a network ID. If not specified, this will be defaulted to false",
				"required": false
			},
			"Name": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "name",
				"description": "Customer Name",
				"required": false
			},
			"AORs": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "aors",
				"description": "A list of Areas of Responsibility by external IDs",
				"required": false
			},
			"ExcludeDeprecated": {
				"schema": {
					"default": false,
					"type": "boolean"
				},
				"in": "query",
				"name": "excludeDeprecated",
				"description": "Whether to exclude deprecated objects in response",
				"required": false
			},
			"ServiceType": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "serviceType",
				"description": "Service type identifier for premises to include",
				"required": false
			},
			"DisplayIDs": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "displayIDs",
				"description": "A list of display ids, separated by the selected delimiter",
				"required": false
			},
			"ID": {
				"schema": {
					"type": "string"
				},
				"in": "path",
				"name": "id",
				"description": "The internal ID of the resource in the form of an ObjectId, eg 59a1bd89f304f0ef8232c76b",
				"required": true
			},
			"ExternalIDQuery": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "externalID",
				"description": "The external ID of the resource",
				"required": true
			},
			"JobTypes": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "jobTypes",
				"description": "A list of Job Types",
				"required": false
			},
			"InternalOrExternalIDsQuery": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "ids",
				"description": "A list of comma separated ids.  This can be either the internal ObjectIds or the external IDs",
				"required": true
			},
			"Stations": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "stations",
				"description": "A list of station IDs. The IDs can be either the internal IDs or external IDs but the entire list must be consistent.",
				"required": false
			},
			"Statuses": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "statuses",
				"description": "A list of Workflow Statuses (labels)",
				"required": false
			},
			"BeforeOptional": {
				"schema": {
					"format": "date-time",
					"type": "string"
				},
				"in": "query",
				"name": "before",
				"description": "In time-based queries, the exclusive date before which records are returned.",
				"required": false
			},
			"PriorityTypes": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "priorityTypes",
				"description": "A list of priority types to include in the query, comma separated.",
				"required": false
			},
			"Skip": {
				"schema": {
					"default": 0,
					"format": "int32",
					"type": "integer"
				},
				"in": "query",
				"name": "skip",
				"description": "The number of matches to skip",
				"required": false
			},
			"IDs": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "ids",
				"description": "A list of internal ids, separated by the selected delimiter",
				"required": false
			},
			"IgnoreHistorical": {
				"schema": {
					"default": false,
					"type": "boolean"
				},
				"in": "query",
				"name": "ignoreHistorical",
				"description": "Whether to only return unarchived data.  Defaults to false",
				"required": false
			},
			"IsInternalIDs": {
				"schema": {
					"default": true,
					"type": "boolean"
				},
				"in": "query",
				"name": "isInternalIDs",
				"description": "Whether the provided IDs are internal IDs.  If not specified, this will be defaulted to true",
				"required": false
			},
			"JoinDamageRecords": {
				"schema": {
					"default": false,
					"type": "boolean"
				},
				"in": "query",
				"name": "joinDamageRecords",
				"description": "Join damage records",
				"required": false
			},
			"ExcludeResolved": {
				"schema": {
					"default": false,
					"type": "boolean"
				},
				"in": "query",
				"name": "excludeResolved",
				"description": "Whether to filter out resources in resolved states",
				"required": false
			},
			"JobID": {
				"schema": {
					"type": "string"
				},
				"in": "path",
				"name": "jid",
				"description": "The internal ID of the Job in the form of an ObjectId, eg 59a1bd89f304f0ef8232c76b",
				"required": true
			},
			"Before": {
				"schema": {
					"format": "date-time",
					"type": "string"
				},
				"in": "query",
				"name": "before",
				"description": "In time-based queries, the exclusive date before which records are returned.",
				"required": true
			},
			"InternalOrDisplayID": {
				"schema": {
					"type": "string"
				},
				"in": "path",
				"name": "id",
				"description": "The internal ID of the resource in the form of an ObjectId, eg 59a1bd89f304f0ef8232c76b or the displayID of the resource. If the id is in the form of an ObjectId, internal is assumed. If multiple records for the displayID are found, the most recent is returned.",
				"required": true
			},
			"ExternalID": {
				"schema": {
					"type": "string"
				},
				"in": "path",
				"name": "id",
				"description": "The external ID of the resource",
				"required": true
			},
			"Time": {
				"schema": {
					"format": "int64",
					"type": "integer"
				},
				"in": "query",
				"name": "time",
				"description": "Time of verification/restoration in milliseconds past epoch. If not provided, the verification/restoration time will be the time OA processes the request",
				"required": false
			},
			"RefreshUpdated": {
				"schema": {
					"format": "int64",
					"type": "integer"
				},
				"in": "query",
				"name": "updated",
				"description": "Time in milliseconds since epoch of the last update.",
				"required": true
			},
			"ServiceTypeIdentifier": {
				"schema": {
					"type": "string"
				},
				"in": "path",
				"name": "sid",
				"description": "The Service Type Identifier of the resource(s), eg Electric",
				"required": true
			},
			"Names": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "names",
				"description": "A list of comma separated list of names. Required if ids not specified",
				"required": false
			},
			"ActiveOnly": {
				"schema": {
					"type": "boolean"
				},
				"in": "query",
				"name": "activeOnly",
				"description": "Include only active models",
				"required": false
			},
			"InternalOrExternalID": {
				"schema": {
					"type": "string"
				},
				"in": "path",
				"name": "id",
				"description": "The internal ID of the resource in the form of an ObjectId, eg 59a1bd89f304f0ef8232c76b or the externalID of the resource. If the id is in the form of an ObjectId, internal is assumed",
				"required": true
			},
			"Deprecated": {
				"schema": {
					"type": "boolean"
				},
				"in": "query",
				"name": "deprecated",
				"description": "Whether the hazard should be deprecated.",
				"required": true
			},
			"JoinOutageStepExternalPremiseIDs": {
				"schema": {
					"default": false,
					"type": "boolean"
				},
				"in": "query",
				"name": "joinOutageStepExternalPremiseIDs",
				"description": "Join external premise IDs to outage steps",
				"required": false
			},
			"SetToCrewLocation": {
				"schema": {
					"default": false,
					"type": "boolean"
				},
				"in": "query",
				"name": "setToCrewLoc",
				"description": "Whether to set the location of the resource to the crew's location.\r\n This will override the location and address value given in the request body, even if the crew has no set location.\r\n Default: false",
				"required": false
			},
			"JoinCallHazards": {
				"schema": {
					"default": false,
					"type": "boolean"
				},
				"in": "query",
				"name": "joinCallHazards",
				"description": "Join call hazards",
				"required": false
			},
			"JoinJobHazards": {
				"schema": {
					"default": false,
					"type": "boolean"
				},
				"in": "query",
				"name": "joinJobHazards",
				"description": "Join job hazards",
				"required": false
			},
			"InternalExternalOrNetworkID": {
				"schema": {
					"type": "string"
				},
				"in": "path",
				"name": "id",
				"description": "The internal ID of the resource in the form of an ObjectId, eg 59a1bd89f304f0ef8232c76b, the externalID or modelID of the resource. If the id is in the form of an ObjectId, internal is assumed. If isNetworkID is defined as true, networkID is assumed and only queried for.",
				"required": true
			},
			"Delimiter": {
				"schema": {
					"default": ",",
					"type": "string",
					"enum": [
						",",
						";",
						"&"
					]
				},
				"in": "query",
				"name": "delimiter",
				"description": "Delimiter to use to separate ids in the ids or displayIDs parameters",
				"required": false
			},
			"Join": {
				"schema": {
					"default": true,
					"type": "boolean"
				},
				"in": "query",
				"name": "join",
				"description": "Whether to include joined data in the response",
				"required": false
			},
			"ExcludeFields": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "excludeFields",
				"description": "A list of fields to exclude",
				"required": false
			},
			"ExternalCustomerId": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "externalCustomerId",
				"description": "Customer ID",
				"required": false
			},
			"TakeForSearch": {
				"schema": {
					"default": 100,
					"format": "int32",
					"type": "integer"
				},
				"in": "query",
				"name": "takeForSearch",
				"description": "The number of matches to take in the search. Max value is the System Configuration Search Max Results value.",
				"required": false
			},
			"After": {
				"schema": {
					"format": "date-time",
					"type": "string"
				},
				"in": "query",
				"name": "after",
				"description": "In time-based queries, the inclusive date after which records are returned.",
				"required": true
			},
			"AfterOptional": {
				"schema": {
					"format": "date-time",
					"type": "string"
				},
				"in": "query",
				"name": "after",
				"description": "In time-based queries, the inclusive date after which records are returned.",
				"required": false
			},
			"PhoneNumber": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "phoneNumber",
				"description": "Customer Phone Number",
				"required": false
			},
			"ExcludeInactive": {
				"schema": {
					"default": false,
					"type": "boolean"
				},
				"in": "query",
				"name": "excludeInactive",
				"description": "Whether to exclude inactive objects in response",
				"required": false
			},
			"IncludeFields": {
				"schema": {
					"type": "string"
				},
				"in": "query",
				"name": "includeFields",
				"description": "A list of fields to include",
				"required": false
			},
			"ForceTransition": {
				"schema": {
					"default": false,
					"type": "boolean"
				},
				"in": "query",
				"name": "forceTransition",
				"description": "Skips invalid linked job state transitions to force the transition of the specified job when set to true",
				"required": false
			},
			"Historical": {
				"schema": {
					"default": false,
					"type": "boolean"
				},
				"in": "query",
				"name": "historical",
				"description": "Query for historical records of the model. If true, historical records are returned. If false, active records are returned",
				"required": false
			}
		}
	},
	"servers": [
		{
			"url": "https://omspds1:8443/oms/external"
		},
		{
			"variables": {
				"scheme": {
					"default": "https"
				},
				"basePath": {
					"default": "oms/external"
				},
				"port": {
					"default": "443"
				},
				"host": {
					"default": "localhost"
				}
			},
			"url": "{scheme}://{host}:{port}/{basePath}"
		}
	],
	"basePath": "/oms/external",
	"openapi": "3.0.0",
	"paths": {
		"/api/v1/ServiceType/{sid}/Callback/{id}": {
			"patch": {
				"summary": "Update a callback",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CallbackUpdate"
							}
						}
					}
				},
				"description": "Update a callback",
				"operationId": "updateCallbackByIdV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Callback"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Callback"
				]
			},
			"get": {
				"summary": "Get a callback",
				"description": "Get a callback",
				"operationId": "getCallbackByIdV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Callback"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Callback"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/RestorePredicted": {
			"post": {
				"summary": "Restore a predicted job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Restore a predicted job",
				"operationId": "restorePredictedJobLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Time"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/Hazard": {
			"get": {
				"summary": "Get hazards associated with a job including hazards on calls associated to the job",
				"description": "Get hazards associated with a job including hazards on calls associated to the job",
				"operationId": "getHazardsForJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Hazard"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call/Bulk": {
			"post": {
				"summary": "Create new calls",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"description": "List of Calls to create",
								"type": "array",
								"items": {
									"$ref": "#/definitions/CallCreate"
								}
							}
						}
					}
				},
				"description": "Create new calls",
				"operationId": "createBulkCallsForServiceTypeV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/CloseHazards": {
			"post": {
				"summary": "Close hazards associated with a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobHazardClose"
							}
						}
					}
				},
				"description": "Close hazards associated with a job.\r\nIf no body defined, all hazards associated with the Job and related Calls will be closed.",
				"operationId": "closeHazardsForJobLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobHazardCloseReturnData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/Customer/updates": {
			"get": {
				"summary": "Get the list of customer edits",
				"description": "Get the list of customer edits",
				"operationId": "getCustomerUpdatesV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CustomerPremiseUpdate"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/Premise/service/{sid}/Outage": {
			"get": {
				"summary": "Get a list of Customer Premise Services currently out",
				"description": "Get a list of Customer Premise Services currently out",
				"operationId": "getCustomerPremiseServicesOutLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CustomerPremiseService"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/Archive": {
			"get": {
				"summary": "Get a list of Archived jobs for a Service Type",
				"description": "Get a list of Archived jobs for a Service Type",
				"operationId": "getArchivedJobsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/After"
					},
					{
						"$ref": "#/components/parameters/Before"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/OutagePlan/Activate": {
			"post": {
				"summary": "Activate or deactivate all outage plans on a job",
				"requestBody": {
					"required": false,
					"content": {}
				},
				"description": "Activate or deactivate all outage plans on a job",
				"operationId": "activateJobOutagePlans",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"schema": {
							"type": "boolean"
						},
						"in": "query",
						"name": "deactivate",
						"description": "Set to true to deactivate all outage plans, set false or leave it out to activate",
						"required": false
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Crew": {
			"post": {
				"summary": "Create a crew",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewCreate"
							}
						}
					}
				},
				"description": "Create a crew",
				"operationId": "createCrewV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Crew"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Crew"
				]
			},
			"get": {
				"summary": "Get crews for a  service type",
				"description": "Get crews for a  service type",
				"operationId": "getCrewsV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewData"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ExcludeDeprecated"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/ServiceType/{sid}/Hazard/{id}/Deprecate": {
			"post": {
				"summary": "Sets a hazard deprecated status",
				"description": "Sets a hazard deprecated status",
				"operationId": "deprecateHazardByIdLatest",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Deprecated"
					}
				],
				"tags": [
					"Hazard"
				]
			}
		},
		"/api/Customer/updates": {
			"get": {
				"summary": "Get the list of customer edits",
				"description": "Get the list of customer edits",
				"operationId": "getCustomerUpdatesLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CustomerPremiseUpdate"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/WorkRequestTemplate/{id}/Apply/": {
			"post": {
				"summary": "Applies a work request temaplte to a job",
				"description": "Applies a work request template to a job",
				"operationId": "applyWorkRequestTemplate",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"processedJobCount": {
											"description": "The number of jobs which this work request template was applied to.",
											"type": "integer",
											"example": "5"
										},
										"jobToChangeStatusList": {
											"type": "object",
											"properties": {
												"value": {
													"type": "object",
													"properties": {
														"id": {
															"description": "The internal ID of the work request template actions in the form of an ObjectId",
															"type": "string",
															"example": "59a1bd89f304f0efdeadbeef"
														},
														"status": {
															"$ref": "#/definitions/ReturnStatus"
														}
													}
												},
												"key": {
													"description": "The internal ID of the Job in the form of an ObjectId",
													"type": "string",
													"example": "59a1bd89f304f0ef8232c76b"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"schema": {
							"type": "string"
						},
						"in": "query",
						"name": "jobIDs",
						"description": "A list of job ids",
						"required": true
					}
				],
				"tags": [
					"Work Request Template"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/UnverifyDevice": {
			"post": {
				"summary": "Unverify a job's device",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Unverify a job's device",
				"operationId": "unverifyJobDeviceV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Call/{id}/Comment": {
			"post": {
				"summary": "Create a comment on a call",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CommentCreate"
							}
						}
					}
				},
				"description": "Create a comment on a call",
				"operationId": "createCommentForCallLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CallComment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			},
			"get": {
				"summary": "Get comments associated with a call",
				"description": "Get comments associated with a call",
				"operationId": "getCommentsForCallLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CallComment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/CrewAssignment/Resolved": {
			"get": {
				"summary": "Get Active resolved crew assignments for a service type",
				"description": "Get Active resolved crew assignments for a service type",
				"operationId": "getResolvedCrewAssignmentsLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/AfterOptional"
					},
					{
						"$ref": "#/components/parameters/BeforeOptional"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/Callback": {
			"get": {
				"summary": "Get callbacks associated with a job",
				"description": "Get callbacks associated with a job",
				"operationId": "getCallbacksForJobLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Asset/Delete": {
			"post": {
				"summary": "Delete asset(s) from a damage record by IDs",
				"requestBody": {
					"required": true,
					"content": {
						"text": {
							"schema": {
								"description": "IDs of assets to delete",
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Delete asset(s) from a damage record by IDs",
				"operationId": "deleteAssetV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Asset"
				]
			}
		},
		"/api/Premise/DeviceID/{id}": {
			"get": {
				"summary": "Get a list of premise service types connected to a device by device external ID.",
				"description": "Get a list of premise service types connected to a device by device external ID.",
				"operationId": "getPremiseByDeviceIDLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseServiceType"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/ExternalID"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/Comment": {
			"post": {
				"summary": "Create a comment on a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CommentCreate"
							}
						}
					}
				},
				"description": "Create a comment on a job",
				"operationId": "createCommentForJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobComment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get comments associated with a job",
				"description": "Get comments associated with a job",
				"operationId": "getCommentsForJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/JobComment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/ForceDown": {
			"post": {
				"summary": "Force down a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Force down a job",
				"operationId": "forceDownJobLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/Lock": {
			"post": {
				"summary": "Lock a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Lock a job",
				"operationId": "lockJobV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/Customer/jobStatus": {
			"post": {
				"summary": "Get a list of customer premise job status",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CustomerPremiseJobStatusRequest"
							}
						}
					}
				},
				"description": "Get the list of customer premise job status. This is largely similar to a Multispeak getOutageEventStatusByOutageLocation",
				"operationId": "getCustomerJobStatusV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CustomerPremiseJobStatus"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Customer",
					"Premise"
				]
			}
		},
		"/api/Premise/service/{sid}/{id}": {
			"patch": {
				"summary": "Updates a premise service",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/PremiseServiceTypeUpdate"
							}
						}
					}
				},
				"description": "Updates a premise service. This update is assumed to be the equivalent of an import, so existing overrides will be cleared.",
				"operationId": "updatePremiseServiceLatest",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/ForceUp": {
			"post": {
				"summary": "Force up a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Force up a job",
				"operationId": "forceUpJobV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Crew/{id}/Undelete": {
			"post": {
				"summary": "Undelete a crew by internal or external ID and service type",
				"requestBody": {
					"required": false
				},
				"description": "Undelete a crew by internal or external ID and service type",
				"operationId": "undeleteCrewV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/CloseHazards": {
			"post": {
				"summary": "Close hazards associated with a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobHazardClose"
							}
						}
					}
				},
				"description": "Close hazards associated with a job.\r\nIf no body defined, all hazards associated with the Job and related Calls will be closed.",
				"operationId": "closeHazardsForJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobHazardCloseReturnData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Customer/{id}/Job": {
			"get": {
				"summary": "Get Jobs for Customer",
				"description": "Get Jobs for Customer",
				"operationId": "getJobsForCustomerLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/ActiveOnly"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/Hazard/{id}": {
			"patch": {
				"summary": "Update a hazard",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HazardUpdate"
							}
						}
					}
				},
				"description": "Update a hazard",
				"operationId": "updateHazardByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Hazard"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Hazard"
				]
			},
			"get": {
				"summary": "Get hazard by ID",
				"description": "Get hazard by ID",
				"operationId": "getHazardByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Hazard"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Hazard"
				]
			}
		},
		"/api/AMINotification": {
			"get": {
				"summary": "Get all AMI notifications",
				"description": "Get a list of all AMI notifications by date range",
				"operationId": "getAmiNotificationLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/AMINotificationData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/After"
					},
					{
						"$ref": "#/components/parameters/Before"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"AMI Notification"
				]
			}
		},
		"/api/v1/Customer/{id}/Call": {
			"get": {
				"summary": "Get Calls for Customer",
				"description": "Get Calls for Customer",
				"operationId": "getCallsForCustomerV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/Region/{id}/Comment": {
			"post": {
				"summary": "Create a comment on a region",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CommentCreate"
							}
						}
					}
				},
				"description": "Create a comment on a region",
				"operationId": "createCommentForRegionLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/RegionComment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Region"
				]
			},
			"get": {
				"summary": "Get comments associated with a region",
				"description": "Get comments associated with a region",
				"operationId": "getCommentsForRegionLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/RegionComment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Region"
				]
			}
		},
		"/api/Settings": {
			"get": {
				"summary": "Gets the current system settings",
				"description": "Gets the current system settings",
				"operationId": "getSettingsLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"_comment": "Determine if this should be there then make correct update model.",
									"$ref": "#/definitions/JSONContent"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Settings"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/CrewAssignment/{id}/Hazard/{hid}": {
			"patch": {
				"summary": "Updates a hazard on a given crew assignment's job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HazardUpdate"
							}
						}
					}
				},
				"description": "Updates a hazard on a given crew assignment's job",
				"operationId": "updateHazardForCrewAssignmentV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Hazard"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/HazardID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/Query": {
			"post": {
				"summary": "Get jobs by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get jobs by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain display IDs",
				"operationId": "getJobByQueryPostLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Job"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get jobs by query parameters",
				"description": "Get jobs by query parameters",
				"operationId": "getJobByQueryLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					},
					{
						"$ref": "#/components/parameters/DisplayIDs"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Callback": {
			"get": {
				"summary": "Get a list of active callbacks",
				"description": "Get a list of active callbacks",
				"operationId": "getCallbacksLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CallbackData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Callback"
				]
			}
		},
		"/api/ServiceType/{sid}/SystemLevel/Comment": {
			"post": {
				"summary": "Create a comment on the system level of the hierarchy",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CommentCreate"
							}
						}
					}
				},
				"description": "Create a comment on the system level of the hierarchy",
				"operationId": "createCommentForSystemLevelLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/SystemLevelComment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"System Level"
				]
			},
			"get": {
				"summary": "Get comments associated with the system level of the hierarchy",
				"description": "Get comments associated with the system level of the hierarchy",
				"operationId": "getCommentsForSystemLevelLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/SystemLevelComment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"System Level"
				]
			}
		},
		"/api/v2/Customer/Callback/search": {
			"get": {
				"summary": "Get callbacks by customer search",
				"description": "Search customers across address, name, phone number and external customer id and return a list of callbacks for those customers",
				"operationId": "getCallbacksByCustomerSearchV2",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseCustomerCallbacks"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/PhoneNumber"
					},
					{
						"$ref": "#/components/parameters/ServiceType"
					},
					{
						"$ref": "#/components/parameters/Name"
					},
					{
						"$ref": "#/components/parameters/Address"
					},
					{
						"$ref": "#/components/parameters/ExternalCustomerId"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/TakeForSearch"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/Call": {
			"get": {
				"summary": "Get calls associated with a job",
				"description": "Get calls associated with a job",
				"operationId": "getCallsForJobLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/Comment": {
			"post": {
				"summary": "Create a comment on a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CommentCreate"
							}
						}
					}
				},
				"description": "Create a comment on a job",
				"operationId": "createCommentForJobLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobComment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get comments associated with a job",
				"description": "Get comments associated with a job",
				"operationId": "getCommentsForJobLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/JobComment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/Verify": {
			"post": {
				"summary": "Verify a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"deprecated": true,
				"description": "Verify a job",
				"operationId": "verifyJobV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/Form": {
			"post": {
				"summary": "Create an OpenGrid report on a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/FormCreate"
							}
						}
					}
				},
				"description": "Create an OpenGrid report on a job",
				"operationId": "createFormForJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Form"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get OpenGrid reports associated with a job",
				"description": "Get OpenGrid reports associated with a job",
				"operationId": "getFormForJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Form"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/CrewAssignment": {
			"post": {
				"summary": "Create a crew assignment",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewAssignmentCreate"
							}
						}
					}
				},
				"description": "Create a crew assignment",
				"operationId": "createCrewAssignmentV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"schema": {
							"type": "string"
						},
						"in": "query",
						"name": "jobIDs",
						"description": "A list of job ids",
						"required": true
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Get Active Unresolved crew assignments for a service type",
				"description": "Get Active Unresolved crew assignments for a service type",
				"operationId": "getCrewAssignmentsV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Device": {
			"post": {
				"summary": "Create a new device with the data passed into the body.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DeviceInfoCreate"
							}
						}
					}
				},
				"description": "Create a new device with the data passed into the body.",
				"operationId": "createDeviceV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceInfo"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400RS"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Device"
				]
			},
			"get": {
				"summary": "Get a list of Devices",
				"description": "Get a list of Devices",
				"operationId": "getDevicesV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceInfoData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/v1/Crew/User": {
			"get": {
				"summary": "Get user's crews grouped by service type id",
				"description": "Get user's crews grouped by service type id",
				"operationId": "getCrewUserV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Crew"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/ServiceType/{sid}/CrewAssignment/{id}/Comment": {
			"post": {
				"summary": "Posts a comment to a crew assignment's job.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CommentCreate"
							}
						}
					}
				},
				"description": "Posts a comment to a crew assignment's job.",
				"operationId": "createCommentForCrewAssignmentLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobComment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Get a crew assignment's job comments.",
				"description": "Get a crew assignment's job comments.",
				"operationId": "getCommentsForCrewAssignmentLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/JobComment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/RestorePremises": {
			"post": {
				"summary": "Restore a verified job's premises",
				"description": "Restore a verified job's premises",
				"operationId": "restoreJobPremisesLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Time"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Premise/Bulk": {
			"post": {
				"summary": "Get premises by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get premises by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain external IDs",
				"operationId": "getPremisesBulkPostLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Premise"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Premise"
				]
			},
			"get": {
				"summary": "Get premises by a list of IDs",
				"description": "Get premises by a list of IDs",
				"operationId": "getPremisesBulkLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Premise"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalIDsQuery"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/Restore": {
			"post": {
				"summary": "Restore a verified job",
				"deprecated": true,
				"description": "Restore a verified job",
				"operationId": "restoreJobLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Time"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Premise": {
			"post": {
				"summary": "Create a new premise.",
				"requestBody": {
					"description": "Prmeise to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/PremiseCreate"
							}
						}
					}
				},
				"description": "Create a new premise.",
				"operationId": "createPremiseLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Premise"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"parameters": [],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/Customer/{id}/Callback": {
			"get": {
				"summary": "Get Callbacks for a Customer",
				"description": "Get Callbacks for a Customer",
				"operationId": "getCallbacksForCustomerLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/Job": {
			"post": {
				"summary": "Create a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreate"
							}
						}
					}
				},
				"description": "Create a job",
				"operationId": "createJobsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Job"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400RS"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"description": "Link Conflict. The response is the conflict type"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get a list of active jobs for a service type",
				"description": "Get a list of active (non-QA) jobs for a service type",
				"operationId": "getJobsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/Customer/Job/search": {
			"get": {
				"summary": "Get jobs by customer search",
				"description": "Search customers across address, name, phone number and external customer id and return a list of jobs for those customers",
				"operationId": "getJobsByCustomerSearchV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Job"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/PhoneNumber"
					},
					{
						"$ref": "#/components/parameters/ServiceType"
					},
					{
						"$ref": "#/components/parameters/Name"
					},
					{
						"$ref": "#/components/parameters/Address"
					},
					{
						"$ref": "#/components/parameters/ExternalCustomerId"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/v1/Premise": {
			"post": {
				"summary": "Create a new premise.",
				"requestBody": {
					"description": "Premise to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/PremiseCreate"
							}
						}
					}
				},
				"description": "Create a new premise.",
				"operationId": "createPremiseV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Premise"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"parameters": [],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Device/Query": {
			"post": {
				"summary": "Get devices by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get devices by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain external ids, device names, or internal dms model ids (1,2,3,4)",
				"operationId": "getDevicesByQueryV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/DeviceInfo"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/ServiceType/{sid}/Crew/{id}/OffShift": {
			"patch": {
				"summary": "Mark a crew off shift",
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewShiftLogShiftOffTime"
							}
						}
					}
				},
				"description": "Mark a crew off shift",
				"operationId": "setCrewOffShiftLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewShiftLog"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/v1/AMINotification": {
			"get": {
				"summary": "Get all AMI notifications",
				"description": "Get a list of all AMI notifications by date range",
				"operationId": "getAmiNotificationV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/AMINotificationData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/After"
					},
					{
						"$ref": "#/components/parameters/Before"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"AMI Notification"
				]
			}
		},
		"/api/ServiceType/{sid}/Asset/Fix": {
			"post": {
				"summary": "Fix asset(s) on a damage record by IDs",
				"requestBody": {
					"required": true,
					"content": {
						"text": {
							"schema": {
								"description": "IDs of assets to mark as fixed",
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Fix asset(s) on a damage record by IDs",
				"operationId": "fixAssetLatest",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Asset"
				]
			}
		},
		"/api/v1/Customer/{id}": {
			"patch": {
				"summary": "Update a customer by internal or external id",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CustomerUpdate"
							}
						}
					}
				},
				"description": "Update a customer by internal or external id. This request is the equivalent of an update by the customer import process, so any overridden values will be cleared as a result of this patch",
				"operationId": "updateCustomerByIdV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Customer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Customer"
				]
			},
			"get": {
				"summary": "Get a customer by internal or external id",
				"description": "Get a customer by internal or external id",
				"operationId": "getCustomerByIdV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Customer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Customer"
				]
			},
			"delete": {
				"summary": "Delete a customer by internal or external id",
				"description": "Delete a customer by internal or external id. This also disassociates any premises associated with the customer being deleted",
				"operationId": "deleteCustomerByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/Device/Priority": {
			"get": {
				"summary": "Get priority devices",
				"description": "Get a list of priority device",
				"operationId": "getPriorityDevicesLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceInfo"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/PriorityTypes"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/Customer/Call/search": {
			"get": {
				"summary": "Get calls by customer search",
				"description": "Search customers across address, name, phone number and external customer id and return a list of calls for those customers",
				"operationId": "getCallsByCustomerSearchLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseCustomerCalls"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/PhoneNumber"
					},
					{
						"$ref": "#/components/parameters/ServiceType"
					},
					{
						"$ref": "#/components/parameters/Name"
					},
					{
						"$ref": "#/components/parameters/Address"
					},
					{
						"$ref": "#/components/parameters/ExternalCustomerId"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/TakeForSearch"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/v1/Premise/service/{sid}/misaligned": {
			"get": {
				"summary": "Get a list of Customer Premise Services which are flagged as potentially misaligned",
				"description": "Get a list of Customer Premise Services which are flagged as potentially misaligned",
				"operationId": "getCustomerPremiseServicesMisalignedLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseServiceType"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/ServiceType/{sid}/Region/{id}": {
			"patch": {
				"summary": "Update region",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HierarchyComponent"
							}
						}
					}
				},
				"description": "Update a region by internal or external ID",
				"operationId": "updateRegionByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalExternalOrNetworkID"
					},
					{
						"$ref": "#/components/parameters/isNetworkID"
					}
				],
				"tags": [
					"Region"
				]
			},
			"get": {
				"summary": "Get region",
				"description": "Get a region by internal or external ID",
				"operationId": "getRegionByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalExternalOrNetworkID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/isNetworkID"
					}
				],
				"tags": [
					"Region"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/Attachment": {
			"post": {
				"summary": "Post an attachment to a job",
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"fileName": {
										"format": "binary",
										"type": "string"
									}
								}
							}
						}
					}
				},
				"description": "Post an attachment to a job",
				"operationId": "createAttachmentForJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"multipart/form-data": {
								"schema": {
									"$ref": "#/definitions/OMSFile"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get attachment metadata by job",
				"description": "Get attachment metadata by job",
				"operationId": "getAttachmentsForJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/OMSFile"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Callback/Query": {
			"post": {
				"summary": "Get callbacks by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get callbacks by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain display IDs",
				"operationId": "getCallbacksByQueryPostV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Callback"
				]
			},
			"get": {
				"summary": "Query callbacks",
				"description": "Query callbacks",
				"operationId": "getCallbacksByQueryV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					},
					{
						"$ref": "#/components/parameters/DisplayIDs"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Callback"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call/Archive": {
			"get": {
				"summary": "Get a list of archived calls",
				"description": "Get a list of archived calls",
				"operationId": "getArchivedCallForServiceTypeV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CallData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/After"
					},
					{
						"$ref": "#/components/parameters/Before"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/Query/Params": {
			"get": {
				"summary": "Get jobs by query parameters",
				"description": "Get jobs by query parameters",
				"operationId": "getJobByQueryParamsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/JobTypes"
					},
					{
						"$ref": "#/components/parameters/AORs"
					},
					{
						"$ref": "#/components/parameters/Statuses"
					},
					{
						"$ref": "#/components/parameters/Stations"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					},
					{
						"$ref": "#/components/parameters/AfterOptional"
					},
					{
						"$ref": "#/components/parameters/BeforeOptional"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/Historical"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/CrewAssignment/{id}/Hazard": {
			"post": {
				"summary": "Create a hazard for a crew assignment's job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HazardCreateEmbedded"
							}
						}
					}
				},
				"description": "Create a hazard for a crew assignment's job",
				"operationId": "createHazardForCrewAssignmentLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Hazard"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/SetToCrewLocation"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Gets hazards for a crew assignment's job",
				"description": "Gets hazards for a crew assignment's job",
				"operationId": "getHazardsForCrewAssignmentLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Hazard"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/Callback": {
			"get": {
				"summary": "Get callbacks associated with a job",
				"description": "Get callbacks associated with a job",
				"operationId": "getCallbacksForJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Callback/{id}": {
			"patch": {
				"summary": "Update a callback",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CallbackUpdate"
							}
						}
					}
				},
				"description": "Update a callback",
				"operationId": "updateCallbackByIdLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Callback"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Callback"
				]
			},
			"get": {
				"summary": "Get a callback",
				"description": "Get a callback",
				"operationId": "getCallbackByIdLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Callback"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Callback"
				]
			}
		},
		"/api/Customer/jobStatus": {
			"post": {
				"summary": "Get a list of customer premise job status",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CustomerPremiseJobStatusRequest"
							}
						}
					}
				},
				"description": "Get the list of customer premise job status. This is largely similar to a Multispeak getOutageEventStatusByOutageLocation",
				"operationId": "getCustomerJobStatusLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CustomerPremiseJobStatus"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Customer",
					"Premise"
				]
			}
		},
		"/api/ServiceType/{sid}/Crew/{id}/CrewAssignment": {
			"get": {
				"summary": "Get crew assignments for a crew",
				"description": "Get crew assignments for a crew",
				"operationId": "getCrewAssignmentsForCrewLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeResolved"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/RequestStatus/{rid}": {
			"get": {
				"summary": "Gets a request status by job and request id",
				"description": "Gets a request status by job and request id",
				"operationId": "getJobRequestStatusV1",
				"responses": {
					"200": {
						"description": "Request status</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PENDING: Request is still pending</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SUCCESS: Request processed successfully</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FAILURE: Request processing failed</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INCONCLUSIVE: Request processing complete, result unknown"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"description": "Job or User Request not found"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/RequestID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Settings/LastConfigUpdate": {
			"get": {
				"summary": "Gets meta data about the last configuration update",
				"description": "Gets meta data about the last configuration udpate",
				"operationId": "getLastConfigUpdateLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/LastConfigUpdate"
								}
							}
						}
					}
				},
				"parameters": [],
				"tags": [
					"Settings"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Device/{id}": {
			"patch": {
				"summary": "Update device",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DeviceInfoUpdate"
							}
						}
					}
				},
				"description": "Update a device by internal or external id and service type id",
				"operationId": "updateDeviceByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceInfo"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Device"
				]
			},
			"get": {
				"summary": "Get device",
				"description": "Get a device by internal or external id",
				"operationId": "getDeviceByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceInfo"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/Verify": {
			"post": {
				"summary": "Verify a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"deprecated": true,
				"description": "Verify a job",
				"operationId": "verifyJobLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v2/Premise/DeviceID/{id}": {
			"get": {
				"summary": "Get a list of premise service types connected to a device by device external ID.",
				"description": "Get a list of premise service types connected to a device by device external ID.",
				"operationId": "getPremiseByDeviceIDV2",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseServiceType"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/ExternalID"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/Lock": {
			"post": {
				"summary": "Lock a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Lock a job",
				"operationId": "lockJobLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/UnverifyPremises": {
			"post": {
				"summary": "Unverify a job's premises",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Unverify a job's premises",
				"operationId": "unverifyJobPremisesV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Asset/{id}": {
			"patch": {
				"summary": "Update asset",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/AssetUpdate"
							}
						}
					}
				},
				"description": "Update an asset by internal ID and service type",
				"operationId": "updateAssetByIdLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Asset"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Asset"
				]
			},
			"get": {
				"summary": "Get Asset",
				"description": "Get an asset by internal ID and service type",
				"operationId": "getAssetByIdLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Asset"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Asset"
				]
			}
		},
		"/api/v1/Customer/PremiseAssociation": {
			"post": {
				"summary": "Associate a customer to a premise",
				"requestBody": {
					"description": "Customer/Premise association to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CustomerPremiseAssociate"
							}
						}
					}
				},
				"description": "Associate a customer to a premise",
				"operationId": "associateCustomerToPremiseV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Customer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Customer"
				]
			},
			"delete": {
				"summary": "Disassociate a customer from a premise",
				"requestBody": {
					"description": "Customer/Premise association to delete",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CustomerPremiseDisassociate"
							}
						}
					}
				},
				"description": "Disassociate a customer from a premise",
				"operationId": "disassociateCustomerToPremiseV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Customer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{jid}/Form/{id}": {
			"patch": {
				"summary": "Update an OpenGrid report on a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"_comment": "Determine if this should be there then make correct update model.",
								"$ref": "#/definitions/Form"
							}
						}
					}
				},
				"description": "Update an OpenGrid report on a job",
				"operationId": "updateFormForJobByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/JobID"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get an OpenGrid report on a job",
				"description": "Get an OpenGrid report on a job",
				"operationId": "getFormForJobByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Form"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/JobID"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Job"
				]
			},
			"delete": {
				"summary": "Delete an OpenGrid report on a job",
				"description": "Delete an OpenGrid report on a job",
				"operationId": "deleteFormForJobByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/JobID"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Retailer": {
			"get": {
				"summary": "Get all retailers",
				"description": "Get all retailers the user is authorized to view",
				"operationId": "getRetailersLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Retailer"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					}
				},
				"parameters": [],
				"tags": [
					"Retailer"
				]
			}
		},
		"/api/v2/ServiceType/{sid}/Job/{id}/RequestStatus/{rid}": {
			"get": {
				"summary": "Gets a request status by job and request id",
				"description": "Gets a request status by job and request id",
				"operationId": "getJobRequestStatusV2",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/UserRequest"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"description": "Job or User Request not found"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/RequestID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/CrewAssignment": {
			"get": {
				"summary": "Get crew assignments for a job",
				"description": "Get crew assignments for a job",
				"operationId": "getCrewAssignmentsForJobLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeResolved"
					},
					{
						"$ref": "#/components/parameters/Join"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Callback/{id}/Status": {
			"post": {
				"summary": "Update the status of a callback",
				"requestBody": {
					"required": true,
					"content": {
						"text": {
							"schema": {
								"format": "int32",
								"type": "integer"
							}
						}
					}
				},
				"description": "Update the status of a callback. Integer values for the body: 0=PENDING, 1=FULFILLED, 2=CANCELLED",
				"operationId": "updateCallbackStatusLatest",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Callback"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/DeviceFlags": {
			"post": {
				"summary": "Recalculate Device Priority.",
				"description": "Recalculate Device Priority.",
				"operationId": "recalculateDevicePrioritiesV1",
				"responses": {
					"202": {
						"description": "Accepted"
					},
					"400": {
						"$ref": "#/components/responses/400"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Device"
				]
			},
			"get": {
				"summary": "Get a list of Device flags indicating whether a job, call and/or crewassignment exists on the device",
				"description": "Get a list of Device flags",
				"operationId": "getDeviceFlagsV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceFlags"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/v1/Premise/Bulk": {
			"post": {
				"summary": "Get premises by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get premises by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain external IDs",
				"operationId": "getPremisesBulkPostV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Premise"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Premise"
				]
			},
			"get": {
				"summary": "Get premises by a list of IDs",
				"description": "Get premises by a list of IDs",
				"operationId": "getPremisesBulkV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Premise"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalIDsQuery"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/Restore": {
			"post": {
				"summary": "Restore a verified job",
				"deprecated": true,
				"description": "Restore a verified job",
				"operationId": "restoreJobV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Time"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Region": {
			"get": {
				"summary": "Get all regions",
				"description": "Get all regions",
				"operationId": "getRegionsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Region"
				]
			}
		},
		"/api/v1/Premise/DeviceID": {
			"get": {
				"summary": "Get a list of premise service types connected to a device by device external ID.",
				"description": "Get a list of premise service types connected to a device by device external ID.",
				"operationId": "getPremiseByDeviceIDV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseServiceType"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/ExternalIDQuery"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Asset/Fix": {
			"post": {
				"summary": "Fix asset(s) on a damage record by IDs",
				"requestBody": {
					"required": true,
					"content": {
						"text": {
							"schema": {
								"description": "IDs of assets to mark as fixed",
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Fix asset(s) on a damage record by IDs",
				"operationId": "fixAssetV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Asset"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Crew/{id}/OnShift": {
			"post": {
				"summary": "Mark a crew on shift",
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewShiftLogShiftOnTime"
							}
						}
					}
				},
				"description": "Mark a crew on shift",
				"operationId": "setCrewOnShiftV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewShiftLog"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/ServiceType/{sid}/Call": {
			"post": {
				"summary": "Create a new call",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CallCreate"
							}
						}
					}
				},
				"description": "Create a new call",
				"operationId": "createCallForServiceTypeLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Call"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Call"
				]
			},
			"get": {
				"summary": "Get a list of Active Unresolved calls",
				"description": "Get a list of Active Unresolved calls",
				"operationId": "getCallsForServiceTypeLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CallDataExtended"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call/Resolved": {
			"get": {
				"summary": "Get a list of Active Resolved calls",
				"description": "Get a list of Active Resolved calls",
				"operationId": "getResolvedCallsV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CallData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/AfterOptional"
					},
					{
						"$ref": "#/components/parameters/BeforeOptional"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/Call/Attachment/{id}": {
			"get": {
				"summary": "Download a call's attachment",
				"description": "Download a call's attachment",
				"operationId": "getAttachmentForCallByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"multipart/form-data": {
								"schema": {
									"format": "binary",
									"type": "string"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			},
			"delete": {
				"summary": "Delete a call attachment",
				"description": "Delete a call attachment",
				"operationId": "deleteAttachmentForCallByIdLatest",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/UnverifyPremises": {
			"post": {
				"summary": "Unverify a job's premises",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Unverify a job's premises",
				"operationId": "unverifyJobPremisesLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Customer/{id}": {
			"patch": {
				"summary": "Update a customer by internal or external id",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CustomerUpdate"
							}
						}
					}
				},
				"description": "Update a customer by internal or external id. This request is the equivalent of an update by the customer import process, so any overridden values will be cleared as a result of this patch",
				"operationId": "updateCustomerByIdLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Customer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Customer"
				]
			},
			"get": {
				"summary": "Get a customer by internal or external id",
				"description": "Get a customer by internal or external id",
				"operationId": "getCustomerByIdLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Customer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Customer"
				]
			},
			"delete": {
				"summary": "Delete a customer by internal or external id",
				"description": "Delete a customer by internal or external id. This also disassociates any premises associated with the customer being deleted",
				"operationId": "deleteCustomerByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Crew/{id}/CrewAssignment": {
			"get": {
				"summary": "Get crew assignments for a crew",
				"description": "Get crew assignments for a crew",
				"operationId": "getCrewAssignmentsForCrewV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeResolved"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/ServiceType/{sid}/Call/{id}": {
			"patch": {
				"summary": "Update a call",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CallUpdate"
							}
						}
					}
				},
				"description": "Update a call",
				"operationId": "updateCallByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Call"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			},
			"get": {
				"summary": "Get a call",
				"description": "Get a call",
				"operationId": "getCallByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Call"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/Unlock": {
			"post": {
				"summary": "Unlock a job",
				"description": "Unlock a job",
				"operationId": "unlockJobV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Premise/{id}/Job": {
			"get": {
				"summary": "Get jobs by premise internal or external id",
				"description": "Get jobs by premise internal or external id",
				"operationId": "getJobsForPremiseLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Job"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/ActiveOnly"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					},
					{
						"$ref": "#/components/parameters/Join"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Device/Bulk": {
			"patch": {
				"summary": "Patch a list of devices.  If the device does not exist, a Not Found will be returned and no devices updated.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/DeviceInfoBulkPatch"
								}
							}
						}
					}
				},
				"description": "Update a list of devices",
				"operationId": "bulkPatchDeviceV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Device"
				]
			},
			"post": {
				"summary": "Create a list of devices.  A bad request will be returned if: any of the devices already exist (by externalID), there are duplicates (by externalID), the externalID was not provided, the externalID is not a string, the or id was provided.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/DeviceInfoCreate"
								}
							}
						}
					}
				},
				"description": "Create a list of devices",
				"operationId": "bulkCreateDeviceV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/ServiceType/{sid}/Call/{id}/Attachment": {
			"post": {
				"summary": "Post an attachment to a call",
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"fileName": {
										"format": "binary",
										"type": "string"
									}
								}
							}
						}
					}
				},
				"description": "Post an attachment to a call",
				"operationId": "createAttachmentForCallLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"multipart/form-data": {
								"schema": {
									"$ref": "#/definitions/OMSFile"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			},
			"get": {
				"summary": "Get attachment metadata by call",
				"description": "Get attachment metadata by call",
				"operationId": "getAttachmentsForCallLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/OMSFile"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/RestorePredicted": {
			"post": {
				"summary": "Restore a predicted job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Restore a predicted job",
				"operationId": "restorePredictedJobV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Time"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Crew/Query": {
			"post": {
				"summary": "Get crews by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get crews by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain external ids or crew names",
				"operationId": "getCrewByQueryPostV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Crew"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Crew"
				]
			},
			"get": {
				"summary": "Query Crews",
				"description": "Query Crews",
				"operationId": "getCrewByQueryV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Crew"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					},
					{
						"$ref": "#/components/parameters/Names"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/RestoreDevice": {
			"post": {
				"summary": "Restore a verified job's device",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Restore a verified job's device",
				"operationId": "restoreJobDeviceLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Time"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/Premise/Service/Remove": {
			"delete": {
				"summary": "Remove a service type from a premise",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/PremiseServiceTypeDelete"
							}
						}
					}
				},
				"description": "Remove a service type from a premise",
				"operationId": "removeServiceFromPremiseV1",
				"responses": {
					"200": {
						"description": "The updated premise",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Premise"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/Call": {
			"get": {
				"summary": "Get calls associated with a job",
				"description": "Get calls associated with a job",
				"operationId": "getCallsForJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call/{id}/Hazard": {
			"get": {
				"summary": "Get hazards associated with a call",
				"description": "Get hazards associated with a call",
				"operationId": "getHazardsForCallV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Hazard"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job": {
			"post": {
				"summary": "Create a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreate"
							}
						}
					}
				},
				"description": "Create a job",
				"operationId": "createJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Job"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400RS"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"description": "Link Conflict. The response is the conflict type"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get a list of active jobs for a service type",
				"description": "Get a list of active (non-QA) jobs for a service type",
				"operationId": "getJobsV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/CrewAssignment/{id}/Hazard": {
			"post": {
				"summary": "Create a hazard for a crew assignment's job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HazardCreateEmbedded"
							}
						}
					}
				},
				"description": "Create a hazard for a crew assignment's job",
				"operationId": "createHazardForCrewAssignmentV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Hazard"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Gets hazards for a crew assignment's job",
				"description": "Gets hazards for a crew assignment's job",
				"operationId": "getHazardsForCrewAssignmentV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Hazard"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/VerifyPremises": {
			"post": {
				"summary": "Verify a job's premises",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Verify a job's premises",
				"operationId": "verifyJobPremisesLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Time"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call/Query": {
			"post": {
				"summary": "Get calls by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get calls by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain display IDs",
				"operationId": "getCallsByQueryPostV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Call"
				]
			},
			"get": {
				"summary": "Get calls by query parameters",
				"description": "Get calls by query parameters",
				"operationId": "getCallsByQueryV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"description": "List of Calls",
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					},
					{
						"$ref": "#/components/parameters/DisplayIDs"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Crew/External/{id}": {
			"patch": {
				"summary": "DEPRECATED: Update a crew by external id",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewUpdate"
							}
						}
					}
				},
				"deprecated": true,
				"description": "Update a crew by external id\r\nDEPRECATED...this has been replaced by /api/ServiceType/{sid}/Crew/{id} which accepts both internal and external IDs",
				"operationId": "updateCrewByExternalIdV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Crew"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ExternalID"
					}
				],
				"tags": [
					"Crew"
				]
			},
			"get": {
				"summary": "DEPRECATED: Get a crew by external id",
				"deprecated": true,
				"description": "Get a crew by external id\r\nDEPRECATED...this has been replaced by /api/ServiceType/{sid}/Crew/{id} which accepts both internal and external IDs",
				"operationId": "getCrewByExternalIdV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Crew"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Crew"
				]
			},
			"delete": {
				"summary": "DEPRECATED: Delete a crew by external id",
				"deprecated": true,
				"description": "Delete a crew by external id.\r\n1. The crew must not have active crew assignments.\r\n2. The Crew must not already be deprecated.\r\n3. If the crew is temporary, the user must have the temporary crew edit permission.\r\nDEPRECATED...this has been replaced by /api/ServiceType/{sid}/Crew/{id} which accepts both internal and external IDs",
				"operationId": "deleteCrewByExternalIdV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "Bad Request. Returned if:\r\n1. There are active crew assignments for this crew (the response will include the Crew Assignment IDs in the crews attribute)\r\n2. No ID was provided.\r\n3. The crew was already deprecated",
						"$ref": "#/definitions/ModelValidationFailureReasons"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"description": "Returned if the Crew does not exist.",
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ExternalID"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/Premise/Service/Add": {
			"post": {
				"summary": "Add a service type to a premise",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/PremiseServiceTypeCreate"
							}
						}
					}
				},
				"description": "Add a service type to a premise",
				"operationId": "createServiceForPremiseLatest",
				"responses": {
					"200": {
						"description": "The updated premise",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Premise"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/ServiceType/{sid}/Area/{id}": {
			"patch": {
				"summary": "Update area",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HierarchyComponent"
							}
						}
					}
				},
				"description": "Update an area by internal or external ID",
				"operationId": "updateAreaByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalExternalOrNetworkID"
					},
					{
						"$ref": "#/components/parameters/isNetworkID"
					}
				],
				"tags": [
					"Area"
				]
			},
			"get": {
				"summary": "Get area",
				"description": "Get an area by internal or external ID",
				"operationId": "getAreaByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalExternalOrNetworkID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/isNetworkID"
					}
				],
				"tags": [
					"Area"
				]
			}
		},
		"/api/v2/ServiceType/{sid}/CrewAssignment": {
			"post": {
				"summary": "Create a crew assignment",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewAssignmentCreate"
							}
						}
					}
				},
				"description": "Create a crew assignment",
				"operationId": "createCrewAssignmentLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentBulkChangeReturnStatusData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"schema": {
							"type": "string"
						},
						"in": "query",
						"name": "jobIDs",
						"description": "A list of job ids",
						"required": true
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Get Active Unresolved crew assignments for a service type",
				"description": "Get Active Unresolved crew assignments for a service type",
				"operationId": "getCrewAssignmentsLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/Join"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/Premise/service/{sid}/misaligned": {
			"get": {
				"summary": "Get a list of Customer Premise Services which are flagged as potentially misaligned",
				"description": "Get a list of Customer Premise Services which are flagged as potentially misaligned",
				"operationId": "getCustomerPremiseServicesMisalignedLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseServiceType"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/Premise/service/{sid}/device": {
			"post": {
				"summary": "Takes in a list of device IDs (any of the three kinds of IDs), and returns a list of all the active premise service types associated to the device network model IDs.",
				"requestBody": {
					"description": "The device IDs which will be used to find the associated premise service types",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DeviceIDs"
							}
						}
					}
				},
				"description": "Takes in a list of device network model IDs as the post body, and returns a list of all the active premise service types associated to the device network model IDs. Deprecated, disconnected, and inactive premise service types are filtered out of this response.",
				"operationId": "postPremiseServiceByDeviceNetworkModelIDV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseServiceType"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/Premise/service/{sid}/Outage": {
			"get": {
				"summary": "Get a list of Customer Premise Services currently out",
				"description": "Get a list of Customer Premise Services currently out",
				"operationId": "getCustomerPremiseServicesOutV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CustomerPremiseService"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/OperationEvent/{id}": {
			"patch": {
				"summary": "Update operation event",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/OperationEventUpdate"
							}
						}
					}
				},
				"description": "Update a operation event by internal ID and service type",
				"operationId": "updateOperationEventByIdLatestV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OperationEvent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Operation Event"
				]
			},
			"get": {
				"summary": "Get Operation Event",
				"description": "Get an operation event by internal or external ID and service type",
				"operationId": "getOperationEventByIdLatestV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OperationEvent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrDisplayID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Operation Event"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call/Refresh": {
			"get": {
				"summary": "Checks whether an update has occurred for calls.",
				"description": "Checks whether an update has occurred for calls. If a call has been updated after the updated parameter, true is returned. Otherwise false is returned",
				"operationId": "getCallRefreshStatusV1",
				"responses": {
					"200": {
						"description": "Refresh status",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/RefreshActive"
					},
					{
						"$ref": "#/components/parameters/RefreshUpdated"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/CrewAssignment/Comment/{id}": {
			"delete": {
				"summary": "Delete a crew assignment job comment",
				"description": "Delete a crew assignment job comment",
				"operationId": "deleteCommentForCrewAssignmentLatest",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v1/Retailer/{id}": {
			"get": {
				"summary": "Get retailer",
				"description": "Get a retailer by internal or external ID",
				"operationId": "getRetailerByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Retailer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Retailer"
				]
			}
		},
		"/api/v1/Customer": {
			"post": {
				"summary": "Create a new customer.",
				"requestBody": {
					"description": "Customer to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CustomerCreate"
							}
						}
					}
				},
				"description": "Create a new customer.",
				"operationId": "createCustomerV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Customer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"parameters": [],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/Area": {
			"get": {
				"summary": "Get all areas",
				"description": "Get all areas",
				"operationId": "getAreasLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Area"
				]
			}
		},
		"/api/ServiceType/{sid}/Callback/Query": {
			"post": {
				"summary": "Get callbacks by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get callbacks by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain display IDs",
				"operationId": "getCallbacksByQueryPostLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Callback"
				]
			},
			"get": {
				"summary": "Query callbacks",
				"description": "Query callbacks",
				"operationId": "getCallbacksByQueryLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					},
					{
						"$ref": "#/components/parameters/DisplayIDs"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Callback"
				]
			}
		},
		"/api/ServiceType/{sid}/Crew/{id}/OnShift": {
			"post": {
				"summary": "Mark a crew on shift",
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewShiftLogShiftOnTime"
							}
						}
					}
				},
				"description": "Mark a crew on shift",
				"operationId": "setCrewOnShiftLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewShiftLog"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/ServiceType/{sid}/Device": {
			"post": {
				"summary": "Create a new device with the data passed into the body.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DeviceInfoCreate"
							}
						}
					}
				},
				"description": "Create a new device with the data passed into the body.",
				"operationId": "createDeviceLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceInfo"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400RS"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Device"
				]
			},
			"get": {
				"summary": "Get a list of Devices",
				"description": "Get a list of Devices",
				"operationId": "getDevicesLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceInfoData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call/{id}/Callback": {
			"get": {
				"summary": "Get Callbacks for a Call",
				"description": "Get Callbacks for a Call",
				"operationId": "getCallbacksForCallV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/CrewAssignment/{id}": {
			"patch": {
				"summary": "Update a crew assignment",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewAssignmentUpdate"
							}
						}
					}
				},
				"description": "Update a crew assignment",
				"operationId": "updateCrewAssignmentByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Get a crew assignment",
				"description": "Get a crew assignment",
				"operationId": "getCrewAssignmentByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Join"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/RestoreDevice": {
			"post": {
				"summary": "Restore a verified job's device",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Restore a verified job's device",
				"operationId": "restoreJobDeviceV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Time"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Hazard/{id}/Deprecate": {
			"post": {
				"summary": "Sets a hazard deprecated status",
				"description": "Sets a hazard deprecated status",
				"operationId": "deprecateHazardByIdV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Deprecated"
					}
				],
				"tags": [
					"Hazard"
				]
			}
		},
		"/api/Customer/Callback/search": {
			"get": {
				"summary": "Get callbacks by customer search",
				"description": "Search customers across address, name, phone number and external customer id and return a list of callbacks for those customers",
				"operationId": "getCallbacksByCustomerSearchLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseCustomerCallbacks"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/PhoneNumber"
					},
					{
						"$ref": "#/components/parameters/ServiceType"
					},
					{
						"$ref": "#/components/parameters/Name"
					},
					{
						"$ref": "#/components/parameters/Address"
					},
					{
						"$ref": "#/components/parameters/ExternalCustomerId"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/TakeForSearch"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/Call/Resolved": {
			"get": {
				"summary": "Get a list of Active Resolved calls",
				"description": "Get a list of Active Resolved calls",
				"operationId": "getResolvedCallsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CallData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/AfterOptional"
					},
					{
						"$ref": "#/components/parameters/BeforeOptional"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}": {
			"patch": {
				"summary": "Update a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobUpdate"
							}
						}
					}
				},
				"description": "Update a job",
				"operationId": "updateJobByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Job"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get a job by id",
				"description": "Get a job by id",
				"operationId": "getJobByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Job"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrDisplayID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/JoinCallHazards"
					},
					{
						"$ref": "#/components/parameters/JoinJobHazards"
					},
					{
						"$ref": "#/components/parameters/JoinDamageRecords"
					},
					{
						"$ref": "#/components/parameters/JoinOutageStepExternalPremiseIDs"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Callback/Archive": {
			"get": {
				"summary": "Get a list of archived callbacks",
				"description": "Get a list of archived callbacks",
				"operationId": "getArchivedCallbacksLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CallbackData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/After"
					},
					{
						"$ref": "#/components/parameters/Before"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/Join"
					}
				],
				"tags": [
					"Callback"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/QA": {
			"get": {
				"summary": "Get a list of QA jobs for a Service Type",
				"description": "Get a list of QA jobs for a Service Type",
				"operationId": "getQaJobsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/AfterOptional"
					},
					{
						"$ref": "#/components/parameters/BeforeOptional"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/Bulk": {
			"patch": {
				"summary": "Bulk updates jobs",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobUpdate"
							}
						}
					}
				},
				"description": "Bulk updates jobs",
				"operationId": "updateJobBulkV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobBulkChangeReturnStatusData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/Cancel": {
			"post": {
				"summary": "Cancel an outage job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Cancel an outage job job",
				"operationId": "cancelJobV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/Form": {
			"post": {
				"summary": "Create an OpenGrid report on a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/FormCreate"
							}
						}
					}
				},
				"description": "Create an OpenGrid report on a job",
				"operationId": "createFormForJobLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Form"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get OpenGrid reports associated with a job",
				"description": "Get OpenGrid reports associated with a job",
				"operationId": "getFormForJobLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Form"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Customer/{id}/Call": {
			"get": {
				"summary": "Get Calls for Customer",
				"description": "Get Calls for Customer",
				"operationId": "getCallsForCustomerLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/ActiveOnly"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Crew/{id}/OffShift": {
			"patch": {
				"summary": "Mark a crew off shift",
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewShiftLogShiftOffTime"
							}
						}
					}
				},
				"description": "Mark a crew off shift",
				"operationId": "setCrewOffShiftV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewShiftLog"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/ServiceType/{sid}/CrewAssignment/{id}/Hazard/{hid}": {
			"patch": {
				"summary": "Updates a hazard on a given crew assignment's job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HazardUpdate"
							}
						}
					}
				},
				"description": "Updates a hazard on a given crew assignment's job",
				"operationId": "updateHazardForCrewAssignmentLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Hazard"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/HazardID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/Attachment/{id}": {
			"get": {
				"summary": "Download a job's attachment",
				"description": "Download a job's attachment",
				"operationId": "getAttachmentForJobByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"multipart/form-data": {
								"schema": {
									"format": "binary",
									"type": "string"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"delete": {
				"summary": "Delete a job attachment",
				"description": "Delete a job attachment",
				"operationId": "deleteAttachmentForJobByIdV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/DamageRecord": {
			"post": {
				"summary": "Create a damage record",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DamageRecordCreate"
							}
						}
					}
				},
				"description": "Create a damage record",
				"operationId": "createDamageRecordLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DamageRecord"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Damage Record"
				]
			},
			"get": {
				"summary": "Get non-deleted/deprecated damage records",
				"description": "Get non-deleted/deprecated damage records",
				"operationId": "getDamageRecordsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DamageRecordData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Damage Record"
				]
			}
		},
		"/api/ServiceType/{sid}/Hazard": {
			"post": {
				"summary": "Create a hazard",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HazardCreate"
							}
						}
					}
				},
				"description": "Create a hazard",
				"operationId": "createHazardLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Hazard"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Hazard"
				]
			},
			"get": {
				"summary": "Get non-deleted/deprecated hazards",
				"description": "Get non-deleted/deprecated hazards",
				"operationId": "getHazardsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HazardData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Hazard"
				]
			}
		},
		"/api/Crew/User": {
			"get": {
				"summary": "Get user's crews grouped by service type id",
				"description": "Get user's crews grouped by service type id",
				"operationId": "getCrewUserLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Crew"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/Archive": {
			"get": {
				"summary": "Get a list of Archived jobs for a Service Type",
				"description": "Get a list of Archived jobs for a Service Type",
				"operationId": "getArchivedJobsV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/After"
					},
					{
						"$ref": "#/components/parameters/Before"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v2/Customer/Call/search": {
			"get": {
				"summary": "Get calls by customer search",
				"description": "Search customers across address, name, phone number and external customer id and return a list of calls for those customers",
				"operationId": "getCallsByCustomerSearchV2",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseCustomerCalls"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/PhoneNumber"
					},
					{
						"$ref": "#/components/parameters/ServiceType"
					},
					{
						"$ref": "#/components/parameters/Name"
					},
					{
						"$ref": "#/components/parameters/Address"
					},
					{
						"$ref": "#/components/parameters/ExternalCustomerId"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/TakeForSearch"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Hazard/{id}": {
			"patch": {
				"summary": "Update a hazard",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HazardUpdate"
							}
						}
					}
				},
				"description": "Update a hazard",
				"operationId": "updateHazardByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Hazard"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Hazard"
				]
			},
			"get": {
				"summary": "Get hazard by ID",
				"description": "Get hazard by ID",
				"operationId": "getHazardByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Hazard"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Hazard"
				]
			}
		},
		"/api/v1/Settings/LastConfigUpdate": {
			"get": {
				"summary": "Gets meta data about the last configuration update",
				"description": "Gets meta data about the last configuration udpate",
				"operationId": "getLastConfigUpdateV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/LastConfigUpdate"
								}
							}
						}
					}
				},
				"parameters": [],
				"tags": [
					"Settings"
				]
			}
		},
		"/api/ServiceType/{sid}/CrewAssignment/{id}/Attachment": {
			"post": {
				"summary": "Post an attachment to a crew assignment's job",
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"fileName": {
										"format": "binary",
										"type": "string"
									}
								}
							}
						}
					}
				},
				"description": "Post an attachment to a crew assignment's job",
				"operationId": "createAttachmentForCrewAssignmentLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OMSFile"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Get crew assignment job attachment metadata.",
				"description": "Get crew assignment job attachment metadata. To download an attachment, use the job attachment download method",
				"operationId": "getAttachmentsForCrewAssignmentLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OMSFile"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/Customer": {
			"post": {
				"summary": "Create a new customer.",
				"requestBody": {
					"description": "Customer to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CustomerCreate"
							}
						}
					}
				},
				"description": "Create a new customer.",
				"operationId": "createCustomerLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Customer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"parameters": [],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/DamageRecord/{id}/AssociatedAssets": {
			"post": {
				"summary": "Create one or more assets and associate them to a damage record",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"description": "List of Assets",
								"type": "array",
								"items": {
									"$ref": "#/definitions/Asset"
								}
							}
						}
					}
				},
				"description": "Create one or more assets and associate them to a damage record",
				"operationId": "createDamageRecordAssociatedAssets",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DamageRecord"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Damage Record"
				]
			},
			"get": {
				"summary": "Get assets associated to a damage record",
				"description": "Get assets associated to a damage record",
				"operationId": "getDamageRecordAssociatedAssetsV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"description": "List of Assets",
									"type": "array",
									"items": {
										"$ref": "#/definitions/Asset"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Damage Record"
				]
			}
		},
		"/api/v1/Customer/Bulk": {
			"post": {
				"summary": "Get customers by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get customers by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain external IDs",
				"operationId": "getCustomersBulkPostV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Customer"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Customer"
				]
			},
			"get": {
				"summary": "Get customers by a list of IDs",
				"description": "Get customers by a list of IDs",
				"operationId": "getCustomerBulkV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Customer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalIDsQuery"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/VerifyDevice": {
			"post": {
				"summary": "Verify a job's device",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Verify a job's device",
				"operationId": "verifyJobDeviceV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Time"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call": {
			"post": {
				"summary": "Create a new call",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CallCreate"
							}
						}
					}
				},
				"description": "Create a new call",
				"operationId": "createCallForServiceTypeV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Call"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Call"
				]
			},
			"get": {
				"summary": "Get a list of Active Unresolved calls",
				"description": "Get a list of Active Unresolved calls",
				"operationId": "getCallsForServiceTypeV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CallDataExtended"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/Station/{id}": {
			"patch": {
				"summary": "Update station",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HierarchyComponent"
							}
						}
					}
				},
				"description": "Update a station by internal or external ID",
				"operationId": "updateStationByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalExternalOrNetworkID"
					},
					{
						"$ref": "#/components/parameters/isNetworkID"
					}
				],
				"tags": [
					"Station"
				]
			},
			"get": {
				"summary": "Get station",
				"description": "Get a station by internal or external ID",
				"operationId": "getStationByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalExternalOrNetworkID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/isNetworkID"
					}
				],
				"tags": [
					"Station"
				]
			}
		},
		"/api/v1/Customer/Call/search": {
			"get": {
				"summary": "Get calls by customer search",
				"description": "Search customers across address, name, phone number and external customer id and return a list of calls for those customers",
				"operationId": "getCallsByCustomerSearchV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/PhoneNumber"
					},
					{
						"$ref": "#/components/parameters/ServiceType"
					},
					{
						"$ref": "#/components/parameters/Name"
					},
					{
						"$ref": "#/components/parameters/Address"
					},
					{
						"$ref": "#/components/parameters/ExternalCustomerId"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Device/Priority": {
			"get": {
				"summary": "Get priority devices",
				"description": "Get a list of priority device",
				"operationId": "getPriorityDevicesV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceInfo"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/PriorityTypes"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/v2/ServiceType/{sid}/Device/{id}": {
			"get": {
				"summary": "Get device",
				"description": "Get a device by internal or external id. Does not include joined model info.",
				"operationId": "getDeviceByIdV2",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceInfoV2"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/v1/Customer/{id}/Job": {
			"get": {
				"summary": "Get Jobs for Customer",
				"description": "Get Jobs for Customer",
				"operationId": "getJobsForCustomerV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					},
					{
						"$ref": "#/components/parameters/ActiveOnly"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call/{id}/Status": {
			"post": {
				"summary": "Update the status of a call",
				"requestBody": {
					"required": true,
					"content": {
						"text": {
							"schema": {
								"format": "int32",
								"type": "integer",
								"enum": [
									0,
									1,
									2
								]
							}
						}
					}
				},
				"description": "Update the status of a call. For the body, use 0 for ACTIVE, 1 for RESOLVED, 2 for CANCELLED",
				"operationId": "updateStatusOfCallV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/WorkFlow": {
			"post": {
				"summary": "Update job status",
				"requestBody": {
					"required": true,
					"content": {
						"text": {
							"schema": {
								"format": "int32",
								"type": "integer"
							}
						}
					}
				},
				"description": "Update job status. Desired state ID should be in the post body",
				"operationId": "updateJobWorkflowLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Job"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400RS"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ForceTransition"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Gets available transition states for a job",
				"description": "Gets available transition states for a job. The response is a mapping of to state identifier to the transition definition for that state",
				"operationId": "getJobWorkflowLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobWorkFlowTransitionMap"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Premise/{id}": {
			"patch": {
				"summary": "Update a Premise by internal or external id",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/PremiseUpdate"
							}
						}
					}
				},
				"description": "Update a Premise by internal or external id",
				"operationId": "updatePremiseByIdLatest",
				"responses": {
					"200": {
						"description": "The updated premise",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Premise"
								}
							}
						}
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Premise"
				]
			},
			"get": {
				"summary": "Get a premise by internal or external id",
				"description": "Get a premise by internal or external id",
				"operationId": "getPremiseByIdLatest",
				"responses": {
					"200": {
						"description": "The premise",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Premise"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Premise"
				]
			},
			"delete": {
				"summary": "Delete a premise by internal or external id",
				"description": "Delete a premise by internal or external id. This also disassociates any customers associated with the premise being deleted",
				"operationId": "deletePremiseByIdLatest",
				"responses": {
					"200": {
						"description": "The premise was deleted successfully"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/Premise/{id}/Callback": {
			"get": {
				"summary": "Get callbacks by premise internal or external id",
				"description": "Get callbacks by premise internal or external id",
				"operationId": "getCallbacksForPremiseV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/ServiceType/{sid}/Station/{id}/Comment": {
			"post": {
				"summary": "Create a comment on a station",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CommentCreate"
							}
						}
					}
				},
				"description": "Create a comment on a station",
				"operationId": "createCommentForStationLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/StationComment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Station"
				]
			},
			"get": {
				"summary": "Get comments associated with a station",
				"description": "Get comments associated with a station",
				"operationId": "getCommentsForStationLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/StationComment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Station"
				]
			}
		},
		"/api/ServiceType/{sid}/Callback/Refresh": {
			"get": {
				"summary": "Checks whether callbacks have been updated",
				"description": "Checks whether callbacks have been updated",
				"operationId": "getCallbackRefreshLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/RefreshActive"
					},
					{
						"$ref": "#/components/parameters/RefreshUpdated"
					}
				],
				"tags": [
					"Callback"
				]
			}
		},
		"/api/ServiceType/{sid}/CrewAssignment": {
			"post": {
				"summary": "Create a crew assignment",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewAssignmentCreate"
							}
						}
					}
				},
				"description": "Create a crew assignment",
				"operationId": "createCrewAssignmentLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentBulkChangeReturnStatusData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"schema": {
							"type": "string"
						},
						"in": "query",
						"name": "jobIDs",
						"description": "A list of job ids",
						"required": true
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Get Active Unresolved crew assignments for a service type",
				"description": "Get Active Unresolved crew assignments for a service type",
				"operationId": "getCrewAssignmentsLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/Join"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v1/Premise/Service/Add": {
			"post": {
				"summary": "Add a service type to a premise",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/PremiseServiceTypeCreate"
							}
						}
					}
				},
				"description": "Add a service type to a premise",
				"operationId": "createServiceForPremiseV1",
				"responses": {
					"200": {
						"description": "The updated premise",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Premise"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/CrewAssignment/{id}/Details": {
			"patch": {
				"summary": "Updates a crew assignment and job details.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewAssignmentJobUpdate"
							}
						}
					}
				},
				"description": "Updates a crew assignment and job details.",
				"operationId": "updateCrewAssignmentDetailsByIdV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "Bad Request",
						"$ref": "#/definitions/ReturnStatusJobCrewAssignment"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Gets a crew assignment along with associated job details.",
				"description": "Gets a crew assignment along with associated job details.",
				"operationId": "getCrewAssignmentDetailsByIdV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentDetails"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v2/ServiceType/{sid}/DeviceFlags": {
			"post": {
				"summary": "Recalculate Device Priority.",
				"description": "Recalculate Device Priority.",
				"operationId": "recalculateDevicePrioritiesV2",
				"responses": {
					"202": {
						"description": "Accepted"
					},
					"400": {
						"$ref": "#/components/responses/400"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Device"
				]
			},
			"get": {
				"summary": "Get a list of Device flags indicating whether a job, call and/or crewassignment exists on the device",
				"description": "Get a list of Device flags",
				"operationId": "getDeviceFlagsV2",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceFlagsV2"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/ServiceType/{sid}/Feeder": {
			"get": {
				"summary": "Get feeders",
				"description": "Get all feeders",
				"operationId": "getFeederLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Feeder"
				]
			}
		},
		"/api/ServiceType/{sid}/Call/{id}/Status": {
			"post": {
				"summary": "Update the status of a call",
				"requestBody": {
					"required": true,
					"content": {
						"text": {
							"schema": {
								"format": "int32",
								"type": "integer",
								"enum": [
									0,
									1,
									2
								]
							}
						}
					}
				},
				"description": "Update the status of a call. For the body, use 0 for ACTIVE, 1 for RESOLVED, 2 for CANCELLED",
				"operationId": "updateStatusOfCallLatest",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/CrewAssignment/Query": {
			"post": {
				"summary": "Get crew assignments by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get crew assignments by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain display IDs",
				"operationId": "getCrewAssignmentsByQueryPostLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CrewAssignment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Query crew assignments",
				"description": "Query crew assignments. At least one of the id parameters must be specified",
				"operationId": "getCrewAssignmentsByQueryLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CrewAssignment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					},
					{
						"$ref": "#/components/parameters/DisplayIDs"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					},
					{
						"schema": {
							"type": "string"
						},
						"in": "query",
						"name": "crewIDs",
						"description": "A list of crew ids",
						"required": false
					},
					{
						"schema": {
							"type": "string"
						},
						"in": "query",
						"name": "jobIDs",
						"description": "A list of job ids",
						"required": false
					},
					{
						"schema": {
							"type": "string"
						},
						"in": "query",
						"name": "jobTypeIDs",
						"description": "A list of job type ids",
						"required": false
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/VerifyDevice": {
			"post": {
				"summary": "Verify a job's device",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Verify a job's device",
				"operationId": "verifyJobDeviceLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Time"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/system/v1/status": {
			"get": {
				"summary": "Retrieve process status",
				"description": "Retrieve process status",
				"operationId": "getSystemStatusV1",
				"responses": {
					"204": {
						"description": "The system is online"
					}
				},
				"parameters": [],
				"tags": [
					"System"
				]
			}
		},
		"/api/v1/Premise/{id}/Job": {
			"get": {
				"summary": "Get jobs by premise internal or external id",
				"description": "Get jobs by premise internal or external id",
				"operationId": "getJobsForPremiseV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Job"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					},
					{
						"$ref": "#/components/parameters/ActiveOnly"
					},
					{
						"$ref": "#/components/parameters/Join"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/CrewAssignment/Query": {
			"post": {
				"summary": "Get crew assignments by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get crew assignments by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain display IDs",
				"operationId": "getCrewAssignmentsByQueryPostV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CrewAssignment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Query crew assignments",
				"description": "Query crew assignments. At least one of the id parameters must be specified",
				"operationId": "getCrewAssignmentsByQueryV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CrewAssignment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					},
					{
						"$ref": "#/components/parameters/DisplayIDs"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					},
					{
						"schema": {
							"type": "string"
						},
						"in": "query",
						"name": "crewIDs",
						"description": "A list of crew ids",
						"required": false
					},
					{
						"schema": {
							"type": "string"
						},
						"in": "query",
						"name": "jobIDs",
						"description": "A list of job ids",
						"required": false
					},
					{
						"schema": {
							"type": "string"
						},
						"in": "query",
						"name": "jobTypeIDs",
						"description": "A list of job type ids",
						"required": false
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/AssociatedScadaAlarm": {
			"post": {
				"summary": "Post associated SCADA alarms to an existing job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/ScadaAlarmCreate"
								}
							}
						}
					}
				},
				"description": "Post associated SCADA alarms to an existing job",
				"operationId": "createAssociatedScadaAlarmForJob",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/Attachment": {
			"post": {
				"summary": "Post an attachment to a job",
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"fileName": {
										"format": "binary",
										"type": "string"
									}
								}
							}
						}
					}
				},
				"description": "Post an attachment to a job",
				"operationId": "createAttachmentForJobLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"multipart/form-data": {
								"schema": {
									"type": "object",
									"properties": {
										"fileName": {
											"format": "binary",
											"type": "string"
										}
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get attachment metadata by job",
				"description": "Get attachment metadata by job",
				"operationId": "getAttachmentsForJobLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/OMSFile"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v2/Customer/Job/search": {
			"get": {
				"summary": "Get jobs by customer search",
				"description": "Search customers across address, name, phone number and external customer id and return a list of jobs for those customers",
				"operationId": "getJobsByCustomerSearchV2",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseCustomerJobs"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/PhoneNumber"
					},
					{
						"$ref": "#/components/parameters/ServiceType"
					},
					{
						"$ref": "#/components/parameters/Name"
					},
					{
						"$ref": "#/components/parameters/Address"
					},
					{
						"$ref": "#/components/parameters/ExternalCustomerId"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/TakeForSearch"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/Crew/{id}": {
			"patch": {
				"summary": "Update crew",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewUpdate"
							}
						}
					}
				},
				"description": "Update a crew by internal or external ID and service type",
				"operationId": "updateCrewByIdLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Crew"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Crew"
				]
			},
			"get": {
				"summary": "Get crew",
				"description": "Get a crew by internal or external ID and service type",
				"operationId": "getCrewByIdLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Crew"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Crew"
				]
			},
			"delete": {
				"summary": "Delete crew",
				"description": "Delete a crew by internal or external ID and service type.\r\n1. The crew must not have active crew assignments.\r\n2. The Crew must not already be deprecated.\r\n3. If the crew is temporary, the user must have the temporary crew edit permission.",
				"operationId": "deleteCrewByIdLatest",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "Bad Request. If there are active crew assignments for this crew, the model will be returned.",
						"$ref": "#/definitions/CrewAssignmentData"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/QA": {
			"get": {
				"summary": "Get a list of QA jobs for a Service Type",
				"description": "Get a list of QA jobs for a Service Type",
				"operationId": "getQaJobsV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/AfterOptional"
					},
					{
						"$ref": "#/components/parameters/BeforeOptional"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Premise/{id}/Callback": {
			"get": {
				"summary": "Get callbacks by premise internal or external id",
				"description": "Get callbacks by premise internal or external id",
				"operationId": "getCallbacksForPremiseLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}": {
			"patch": {
				"summary": "Update a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobUpdate"
							}
						}
					}
				},
				"description": "Update a job",
				"operationId": "updateJobByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Job"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get a job by id",
				"description": "Get a job by id",
				"operationId": "getJobByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Job"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrDisplayID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/JoinCallHazards"
					},
					{
						"$ref": "#/components/parameters/JoinJobHazards"
					},
					{
						"$ref": "#/components/parameters/JoinDamageRecords"
					},
					{
						"$ref": "#/components/parameters/JoinOutageStepExternalPremiseIDs"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/VerifyPremises": {
			"post": {
				"summary": "Verify a job's premises",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Verify a job's premises",
				"operationId": "verifyJobPremisesV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Time"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/RequestStatus/{rid}": {
			"get": {
				"summary": "Gets a request status by job and request id",
				"description": "Gets a request status by job and request id",
				"operationId": "getJobRequestStatusLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/UserRequest"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"description": "Job or User Request not found"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/RequestID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Call/{id}/Callback": {
			"get": {
				"summary": "Get Callbacks for a Call",
				"description": "Get Callbacks for a Call",
				"operationId": "getCallbacksForCallLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/CrewAssignment/{id}/WorkFlow": {
			"post": {
				"summary": "Update a crew assignment's status",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewAssignmentUpdateWithStatus"
							}
						}
					}
				},
				"description": "Update a crew assignment's status",
				"operationId": "updateCrewAssignmentWorkflowV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Get the next workflow transition states",
				"description": "Get the next workflow transition states",
				"operationId": "getWorkflowStatesForCrewAssignmentV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CrewWorkFlowTransition"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Premise/{id}": {
			"get": {
				"summary": "Get Customer, Premise and Premise Service Type",
				"description": "Get customer, premise and premise service type details",
				"operationId": "getCustomerPremiseServiceTypeV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CustomerPremisePremiseServiceType"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call/Attachment/{id}": {
			"get": {
				"summary": "Download a call's attachment",
				"description": "Download a call's attachment",
				"operationId": "getAttachmentForCallByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"multipart/form-data": {
								"schema": {
									"format": "binary",
									"type": "string"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			},
			"delete": {
				"summary": "Delete a call attachment",
				"description": "Delete a call attachment",
				"operationId": "deleteAttachmentForCallByIdV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/CrewAssignment/Comment/{id}": {
			"delete": {
				"summary": "Delete a crew assignment job comment",
				"description": "Delete a crew assignment job comment",
				"operationId": "getArchviedCrewAssignmentsV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Callback/Refresh": {
			"get": {
				"summary": "Checks whether callbacks have been updated",
				"description": "Checks whether callbacks have been updated",
				"operationId": "getCallbackRefreshV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/RefreshActive"
					},
					{
						"$ref": "#/components/parameters/RefreshUpdated"
					}
				],
				"tags": [
					"Callback"
				]
			}
		},
		"/api/Premise/service/updates": {
			"get": {
				"summary": "Get the list of premise service edits",
				"description": "Get the list of premise service edits",
				"operationId": "getPremiseServiceUpdatesLatest",
				"responses": {
					"200": {
						"description": "List of premise service updates",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CustomerPremiseUpdate"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/ServiceType/{sid}/Call/Refresh": {
			"get": {
				"summary": "Checks whether an update has occurred for calls.",
				"description": "Checks whether an update has occurred for calls. If a call has been updated after the updated parameter, true is returned. Otherwise false is returned",
				"operationId": "getCallRefreshStatusLatest",
				"responses": {
					"200": {
						"description": "Refresh status",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/RefreshActive"
					},
					{
						"$ref": "#/components/parameters/RefreshUpdated"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{jid}/Form/{id}": {
			"patch": {
				"summary": "Update an OpenGrid report on a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"_comment": "Determine if this should be there then make correct update model.",
								"$ref": "#/definitions/Form"
							}
						}
					}
				},
				"description": "Update an OpenGrid report on a job",
				"operationId": "updateFormForJobByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Form"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/JobID"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get an OpenGrid report on a job",
				"description": "Get an OpenGrid report on a job",
				"operationId": "getFormForJobByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Form"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/JobID"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Job"
				]
			},
			"delete": {
				"summary": "Delete an OpenGrid report on a job",
				"description": "Delete an OpenGrid report on a job",
				"operationId": "deleteFormForJobByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/JobID"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/Settings": {
			"get": {
				"summary": "Gets the current system settings",
				"description": "Gets the current system settings",
				"operationId": "getSettingsV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"_comment": "Determine if this should be there then make correct update model.",
									"$ref": "#/definitions/JSONContent"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Settings"
				]
			}
		},
		"/api/v1/Retailer": {
			"get": {
				"summary": "Get all retailers",
				"description": "Get all retailers the user is authorized to view",
				"operationId": "getRetailersV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Retailer"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					}
				},
				"parameters": [],
				"tags": [
					"Retailer"
				]
			}
		},
		"/api/v1/Premise/{id}/Call": {
			"get": {
				"summary": "Get calls by premise internal or external id",
				"description": "Get calls by premise internal or external id",
				"operationId": "getCallsForPremiseV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/AssociatedLocation": {
			"post": {
				"summary": "Post associated location data to a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/AssociatedLocation"
								}
							}
						}
					}
				},
				"description": "Post associated location data to a job. Currently only supports removing associated locations.",
				"operationId": "createAssociatedLocationForJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/AssociatedLocation"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get associated locations by job",
				"description": "Get associated locations by job",
				"operationId": "getJobsAssociatedLocationsV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/AssociatedLocation"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Meter/{id}": {
			"get": {
				"summary": "Get premise, premise service type, and current customer details by meter ID",
				"description": "Get premise, premise service type, and current customer details by meter ID",
				"operationId": "getMeterIdV1",
				"responses": {
					"200": {
						"400": {
							"$ref": "#/components/responses/400"
						},
						"401": {
							"$ref": "#/components/responses/401"
						},
						"403": {
							"$ref": "#/components/responses/403"
						},
						"404": {
							"$ref": "#/components/responses/404"
						},
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CustomerPremiseService"
								}
							}
						}
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Meter"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/WorkFlow": {
			"post": {
				"summary": "Update job status",
				"requestBody": {
					"required": true,
					"content": {
						"text": {
							"schema": {
								"format": "int32",
								"type": "integer"
							}
						}
					}
				},
				"description": "Update job status. Desired state ID should be in the post body",
				"operationId": "updateJobWorkflowV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Job"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400RS"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Gets available transition states for a job",
				"description": "Gets available transition states for a job. The response is a mapping of to state identifier to the transition definition for that state",
				"operationId": "getJobWorkflowV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobWorkFlowTransitionMap"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Device/Bulk": {
			"patch": {
				"summary": "Patch a list of devices.  If the device does not exist, a Not Found will be returned and no devices updated.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/DeviceInfoBulkPatch"
								}
							}
						}
					}
				},
				"description": "Update a list of devices",
				"operationId": "bulkPatchDevice",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Device"
				]
			},
			"post": {
				"summary": "Create a list of devices.  A bad request will be returned if: any of the devices already exist (by externalID), there are duplicates (by externalID), the externalID was not provided, the externalID is not a string, the or id was provided.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/DeviceInfoCreate"
								}
							}
						}
					}
				},
				"description": "Create a list of devices",
				"operationId": "bulkCreateDevice",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"text": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/Premise/{id}/Call": {
			"get": {
				"summary": "Get calls by premise internal or external id",
				"description": "Get calls by premise internal or external id",
				"operationId": "getCallsForPremiseLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/ActiveOnly"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/Premise/updates": {
			"get": {
				"summary": "Get the list of premise edits",
				"description": "Get the list of premise edits",
				"operationId": "getPremiseUpdatesLatest",
				"responses": {
					"200": {
						"description": "List of updates",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CustomerPremiseUpdate"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/DamageRecord/{id}": {
			"patch": {
				"summary": "Update a damage record",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DamageRecordUpdate"
							}
						}
					}
				},
				"description": "Update a damage record",
				"operationId": "updateDamageRecordByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DamageRecord"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Damage Record"
				]
			},
			"get": {
				"summary": "Get damage record by ID",
				"description": "Get damage record by ID",
				"operationId": "getDamageRecordByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DamageRecord"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Damage Record"
				]
			}
		},
		"/api/ServiceType/{sid}/CrewAssignment/{id}/Details": {
			"patch": {
				"summary": "Updates a crew assignment and job details.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewAssignmentJobUpdate"
							}
						}
					}
				},
				"description": "Updates a crew assignment and job details.",
				"operationId": "updateCrewAssignmentDetailsByIdLatest",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/definitions/ReturnStatusJobCrewAssignment"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Gets a crew assignment along with associated job details.",
				"description": "Gets a crew assignment along with associated job details.",
				"operationId": "getCrewAssignmentDetailsByIdLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentDetails"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call/{id}": {
			"patch": {
				"summary": "Update a call",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CallUpdate"
							}
						}
					}
				},
				"description": "Update a call",
				"operationId": "updateCallByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Call"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			},
			"get": {
				"summary": "Get a call",
				"description": "Get a call",
				"operationId": "getCallByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Call"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/Call/Query": {
			"post": {
				"summary": "Get calls by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get calls by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain display IDs",
				"operationId": "getCallsByQueryPostLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Call"
				]
			},
			"get": {
				"summary": "Get calls by query parameters",
				"description": "Get calls by query parameters",
				"operationId": "getCallsByQueryLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"description": "List of Calls",
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					},
					{
						"$ref": "#/components/parameters/DisplayIDs"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/SystemLevel": {
			"patch": {
				"summary": "Update the system level",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HierarchyComponent"
							}
						}
					}
				},
				"description": "Update the system level",
				"operationId": "updateSystemLevelLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"System Level"
				]
			},
			"get": {
				"summary": "Get the system level",
				"description": "Get the system level",
				"operationId": "getSystemLevelLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"System Level"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Device/External/{id}": {
			"get": {
				"summary": "DEPRECATED: Get a device by external id",
				"deprecated": true,
				"description": "Get a device by external id.\r\nDEPRECATED by /api/ServiceType/{sid}/Device/{id} which accepts an internal or external ID",
				"operationId": "getDeviceByExternalIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceInfo"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Crew/{id}": {
			"patch": {
				"summary": "Update crew",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewUpdate"
							}
						}
					}
				},
				"description": "Update a crew by internal or external ID and service type",
				"operationId": "updateCrewByIdV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Crew"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Crew"
				]
			},
			"get": {
				"summary": "Get crew",
				"description": "Get a crew by internal or external ID and service type",
				"operationId": "getCrewByIdV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Crew"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Crew"
				]
			},
			"delete": {
				"summary": "Delete crew",
				"description": "Delete a crew by internal or external ID and service type.\r\n1. The crew must not have active crew assignments.\r\n2. The Crew must not already be deprecated.\r\n3. If the crew is temporary, the user must have the temporary crew edit permission.",
				"operationId": "deleteCrewByIdV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "Bad Request. Returned if:\r\n1. There are active crew assignments for this crew (the response will include the Crew Assignment IDs in the crews attribute)\r\n2. No ID was provided.\r\n3. The crew was already deprecated",
						"$ref": "#/definitions/ModelValidationFailureReasons"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"description": "Returned if the Crew does not exist.",
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/CrewAssignment/{id}/Attachment": {
			"post": {
				"summary": "Post an attachment to a crew assignment's job",
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"fileName": {
										"format": "binary",
										"type": "string"
									}
								}
							}
						}
					}
				},
				"description": "Post an attachment to a crew assignment's job",
				"operationId": "createAttachmentForCrewAssignmentV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"multipart/form-data": {
								"schema": {
									"$ref": "#/definitions/OMSFile"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Get crew assignment job attachment metadata.",
				"description": "Get crew assignment job attachment metadata. To download an attachment, use the job attachment download method",
				"operationId": "getAttachmentsForCrewAssignmentV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OMSFile"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/ServiceType/{sid}/Area/{id}/Comment": {
			"post": {
				"summary": "Create a comment on an area",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CommentCreate"
							}
						}
					}
				},
				"description": "Create a comment on an area",
				"operationId": "createCommentForAreaLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/AreaComment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Area"
				]
			},
			"get": {
				"summary": "Get comments associated with an area",
				"description": "Get comments associated with an area",
				"operationId": "getCommentsForAreaLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/AreaComment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Area"
				]
			}
		},
		"/api/ServiceType/{sid}/Crew/Query": {
			"post": {
				"summary": "Get crews by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get crews by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain external ids or crew names",
				"operationId": "getCrewByQueryPostLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Crew"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Crew"
				]
			},
			"get": {
				"summary": "Query Crews",
				"description": "Query Crews",
				"operationId": "getCrewByQueryLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Crew"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					},
					{
						"$ref": "#/components/parameters/Names"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/v1/Customer/{id}/Callback": {
			"get": {
				"summary": "Get Callbacks for a Customer",
				"description": "Get Callbacks for a Customer",
				"operationId": "getCallbacksForCustomerV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/Crew/{id}/Undelete": {
			"post": {
				"summary": "Undelete a crew by internal or external ID and service type",
				"description": "Undelete a crew by internal or external ID and service type",
				"operationId": "undeleteCrewLatest",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/ServiceType/{sid}/DeviceFlags": {
			"post": {
				"summary": "Recalculate Device Priority.",
				"description": "Recalculate Device Priority.",
				"operationId": "recalculateDevicePrioritiesLatest",
				"responses": {
					"202": {
						"description": "Accepted"
					},
					"400": {
						"$ref": "#/components/responses/400"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Device"
				]
			},
			"get": {
				"summary": "Get a list of Device flags indicating whether a job, call and/or crewassignment exists on the device",
				"description": "Get a list of Device flags",
				"operationId": "getDeviceFlagsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceFlagsV2"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/v1/Customer/Callback/search": {
			"get": {
				"summary": "Get callbacks by customer search",
				"description": "Search customers across address, name, phone number and external customer id and return a list of callbacks for those customers",
				"operationId": "getCallbacksByCustomerSearchV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Callback"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/PhoneNumber"
					},
					{
						"$ref": "#/components/parameters/ServiceType"
					},
					{
						"$ref": "#/components/parameters/Name"
					},
					{
						"$ref": "#/components/parameters/Address"
					},
					{
						"$ref": "#/components/parameters/ExternalCustomerId"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/Query": {
			"post": {
				"summary": "Get jobs by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get jobs by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain display IDs",
				"operationId": "getJobByQueryPostV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Job"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get jobs by query parameters",
				"description": "Get jobs by query parameters",
				"operationId": "getJobByQueryV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					},
					{
						"$ref": "#/components/parameters/DisplayIDs"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/AssociatedLocation": {
			"post": {
				"summary": "Post associated location data to a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/AssociatedLocation"
								}
							}
						}
					}
				},
				"description": "Post associated location data to a job. Currently only supports removing associated locations.",
				"operationId": "createAssociatedLocationForJobLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/AssociatedLocation"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"get": {
				"summary": "Get associated locations by job",
				"description": "Get associated locations by job",
				"operationId": "getJobsAssociatedLocationsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/AssociatedLocation"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/Bulk/Workflow": {
			"patch": {
				"summary": "Bulk workflow transition jobs",
				"requestBody": {
					"description": "Work Flow state identifier to transition to",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"format": "int32",
								"type": "integer"
							}
						}
					}
				},
				"description": "Bulk workflow transition jobs",
				"operationId": "updateJobWorkflowBulkLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobBulkChangeReturnStatusData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/LinkJobs": {
			"patch": {
				"summary": "Update job links",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobUpdateLinks"
							}
						}
					}
				},
				"description": "Add or remove one or more links to a job (either active or archived)",
				"operationId": "create",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Job"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/Bulk": {
			"patch": {
				"summary": "Bulk updates jobs",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobUpdate"
							}
						}
					}
				},
				"description": "Bulk updates jobs",
				"operationId": "updateJobBulkLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobBulkChangeReturnStatusData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					},
					{
						"$ref": "#/components/parameters/SkipPopulatedFields"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/DamageRecord": {
			"post": {
				"summary": "Create a damage record",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DamageRecordCreate"
							}
						}
					}
				},
				"description": "Create a damage record",
				"operationId": "createDamageRecordV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DamageRecord"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Damage Record"
				]
			},
			"get": {
				"summary": "Get non-deleted/deprecated damage records",
				"description": "Get non-deleted/deprecated damage records",
				"operationId": "getDamageRecordsV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DamageRecordData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Damage Record"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/Unlock": {
			"post": {
				"summary": "Unlock a job",
				"description": "Unlock a job",
				"operationId": "unlockJobLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/CrewAssignment/Resolved": {
			"get": {
				"summary": "Get Active resolved crew assignments for a service type",
				"description": "GGet Active resolved crew assignments for a service type",
				"operationId": "getResolvedCrewAssignmentsV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/AfterOptional"
					},
					{
						"$ref": "#/components/parameters/BeforeOptional"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/ForceDown": {
			"post": {
				"summary": "Force down a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Force down a job",
				"operationId": "forceDownJobV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Premise/service/{sid}/device": {
			"post": {
				"summary": "Takes in a list of device IDs (any of the three kinds of IDs), and returns a list of all the active premise service types associated to the device network model IDs.",
				"requestBody": {
					"description": "The device IDs which will be used to find the associated premise service types",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DeviceIDs"
							}
						}
					}
				},
				"description": "Takes in a list of device network model IDs as the post body, and returns a list of all the active premise service types associated to the device network model IDs. Deprecated, disconnected, and inactive premise service types are filtered out of this response.",
				"operationId": "postPremiseServiceByDeviceNetworkModelID",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseServiceType"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/Delimiter"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/Premise/Service/Remove": {
			"delete": {
				"summary": "Remove a service type from a premise",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/PremiseServiceTypeDelete"
							}
						}
					}
				},
				"description": "Remove a service type from a premise",
				"operationId": "removeServiceFromPremiseLatest",
				"responses": {
					"200": {
						"description": "The updated premise",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Premise"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/AssociatedScadaAlarm": {
			"post": {
				"summary": "Post associated SCADA alarms to an existing job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/ScadaAlarmCreate"
								}
							}
						}
					}
				},
				"description": "Post associated SCADA alarms to an existing job",
				"operationId": "createAssociatedScadaAlarmForJobV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Crew": {
			"post": {
				"summary": "Create a crew",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewCreate"
							}
						}
					}
				},
				"description": "Create a crew",
				"operationId": "createCrewLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Crew"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Crew"
				]
			},
			"get": {
				"summary": "Get crews for a  service type",
				"description": "Get crews for a  service type",
				"operationId": "getCrewsLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewData"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ExcludeDeprecated"
					},
					{
						"$ref": "#/components/parameters/ExcludeInactive"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Crew"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/CrewAssignment/{id}/Comment": {
			"post": {
				"summary": "Posts a comment to a crew assignment's job.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CommentCreate"
							}
						}
					}
				},
				"description": "Posts a comment to a crew assignment's job.",
				"operationId": "createCommentForCrewAssignmentV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobComment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Get a crew assignment's job comments.",
				"description": "Get a crew assignment's job comments.",
				"operationId": "getCommentsForCrewAssignmentV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/JobComment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/RestorePremises": {
			"post": {
				"summary": "Restore a verified job's premises",
				"description": "Restore a verified job's premises",
				"operationId": "restoreJobPremisesV1",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/Time"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/Premise/updates": {
			"get": {
				"summary": "Get the list of premise edits",
				"description": "Get the list of premise edits",
				"operationId": "getPremiseUpdatesV1",
				"responses": {
					"200": {
						"description": "List of updates",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CustomerPremiseUpdate"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/Customer/search": {
			"get": {
				"summary": "Search customers across configured search fields",
				"description": "Search customers across configured search fields",
				"operationId": "getCustomersBySearchV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CustomerElastic"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Query"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/Premise/{id}": {
			"get": {
				"summary": "Get Customer, Premise and Premise Service Type",
				"description": "Get customer, premise and premise service type details",
				"operationId": "getCustomerPremiseServiceTypeLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CustomerPremisePremiseServiceType"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/CrewAssignment/Archive": {
			"get": {
				"summary": "Get a list of archived crew assignments",
				"description": "Get a list of archived crew assignments",
				"operationId": "getArchivedCrewAssignmentsV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/After"
					},
					{
						"$ref": "#/components/parameters/Before"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/ServiceType/{sid}/CrewAssignment/Archive": {
			"get": {
				"summary": "Get a list of archived crew assignments",
				"description": "Get a list of archived crew assignments",
				"operationId": "getArchivedCrewAssignmentsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/After"
					},
					{
						"$ref": "#/components/parameters/Before"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/ServiceType/{sid}/DamageRecord/{id}": {
			"patch": {
				"summary": "Update a damage record",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DamageRecordUpdate"
							}
						}
					}
				},
				"description": "Update a damage record",
				"operationId": "updateDamageRecordByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DamageRecord"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Damage Record"
				]
			},
			"get": {
				"summary": "Get damage record by ID",
				"description": "Get damage record by ID",
				"operationId": "getDamageRecordByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DamageRecord"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Damage Record"
				]
			}
		},
		"/api/ServiceType/{sid}/CrewAssignment/{id}/WorkFlow": {
			"post": {
				"summary": "Update a crew assignment's status",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewAssignmentUpdateWithStatus"
							}
						}
					}
				},
				"description": "Update a crew assignment's status",
				"operationId": "updateCrewAssignmentWorkflowLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Get the next workflow transition states",
				"description": "Get the next workflow transition states",
				"operationId": "getWorkflowStatesForCrewAssignmentLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CrewWorkFlowTransition"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/UnverifyDevice": {
			"post": {
				"summary": "Unverify a job's device",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Unverify a job's device",
				"operationId": "unverifyJobDeviceLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Feeder/{id}": {
			"patch": {
				"summary": "Update feeder",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HierarchyComponent"
							}
						}
					}
				},
				"description": "Update a feeder by internal or external ID",
				"operationId": "updateFeederByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalExternalOrNetworkID"
					},
					{
						"$ref": "#/components/parameters/isNetworkID"
					}
				],
				"tags": [
					"Feeder"
				]
			},
			"get": {
				"summary": "Get feeder",
				"description": "Get a feeder by internal or external ID",
				"operationId": "getFeederByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalExternalOrNetworkID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/isNetworkID"
					}
				],
				"tags": [
					"Feeder"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Callback": {
			"get": {
				"summary": "Get a list of active callbacks",
				"description": "Get a list of active callbacks",
				"operationId": "getCallbacksV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CallbackData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Callback"
				]
			}
		},
		"/api/ServiceType/{sid}/Device/{id}": {
			"patch": {
				"summary": "Update device",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DeviceInfoUpdate"
							}
						}
					}
				},
				"description": "Update a device by internal or external id and service type id",
				"operationId": "updateDeviceByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceInfo"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Device"
				]
			},
			"get": {
				"summary": "Get device",
				"description": "Get a device by internal or external id",
				"operationId": "getDeviceByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DeviceInfo"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/ServiceType/{sid}/Call/Bulk": {
			"post": {
				"summary": "Create new calls",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"description": "List of Calls to create",
								"type": "array",
								"items": {
									"$ref": "#/definitions/CallCreate"
								}
							}
						}
					}
				},
				"description": "Create new calls",
				"operationId": "createBulkCallsForServiceTypeLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Call"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call/{id}/Attachment": {
			"post": {
				"summary": "Post an attachment to a call",
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"fileName": {
										"format": "binary",
										"type": "string"
									}
								}
							}
						}
					}
				},
				"description": "Post an attachment to a call",
				"operationId": "createAttachmentForCallV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"multipart/form-data": {
								"schema": {
									"$ref": "#/definitions/OMSFile"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			},
			"get": {
				"summary": "Get attachment metadata by call",
				"description": "Get attachment metadata by call",
				"operationId": "getAttachmentsForCallV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/OMSFile"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Asset/{id}": {
			"patch": {
				"summary": "Update asset",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/AssetUpdate"
							}
						}
					}
				},
				"description": "Update an asset by internal ID and service type",
				"operationId": "updateAssetByIdLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Asset"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Asset"
				]
			},
			"get": {
				"summary": "Get Asset",
				"description": "Get an asset by internal ID and service type",
				"operationId": "getAssetByIdV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Asset"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Asset"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/CrewAssignment/{id}": {
			"patch": {
				"summary": "Update a crew assignment",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CrewAssignmentUpdate"
							}
						}
					}
				},
				"description": "Update a crew assignment",
				"operationId": "updateCrewAssignmentByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			},
			"get": {
				"summary": "Get a crew assignment",
				"description": "Get a crew assignment",
				"operationId": "getCrewAssignmentByIdV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Join"
					}
				],
				"tags": [
					"Crew Assignment"
				]
			}
		},
		"/api/v1/Premise/service/{sid}/{id}": {
			"patch": {
				"summary": "Updates a premise service",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/PremiseServiceTypeUpdate"
							}
						}
					}
				},
				"description": "Updates a premise service. This update is assumed to be the equivalent of an import, so existing overrides will be cleared.",
				"operationId": "updatePremiseServiceV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/ServiceType/{sid}/Asset/Delete": {
			"post": {
				"summary": "Delete asset(s) from a damage record by IDs",
				"requestBody": {
					"required": true,
					"content": {
						"text": {
							"schema": {
								"description": "IDs of assets to delete",
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Delete asset(s) from a damage record by IDs",
				"operationId": "deleteAssetLatest",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Asset"
				]
			}
		},
		"/api/ServiceType/{sid}/Station": {
			"get": {
				"summary": "Get all stations",
				"description": "Get all stations",
				"operationId": "getStationsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HierarchyComponent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Station"
				]
			}
		},
		"/api/v1/Premise/{id}": {
			"patch": {
				"summary": "Update a Premise by internal or external id",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/PremiseUpdate"
							}
						}
					}
				},
				"description": "Update a Premise by internal or external id",
				"operationId": "updatePremiseByIdV1",
				"responses": {
					"200": {
						"description": "The updated premise",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Premise"
								}
							}
						}
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Premise"
				]
			},
			"get": {
				"summary": "Get a premise by internal or external id",
				"description": "Get a premise by internal or external id",
				"operationId": "getPremiseByIdV1",
				"responses": {
					"200": {
						"description": "The premise",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Premise"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Premise"
				]
			},
			"delete": {
				"summary": "Delete a premise by internal or external id",
				"description": "Delete a premise by internal or external id. This also disassociates any customers associated with the premise being deleted",
				"operationId": "deletePremiseByIdV1",
				"responses": {
					"200": {
						"description": "The premise was deleted successfully"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Premise"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/Attachment/{id}": {
			"get": {
				"summary": "Download a job's attachment",
				"description": "Download a job's attachment",
				"operationId": "getAttachmentForJobByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"multipart/form-data": {
								"schema": {
									"format": "binary",
									"type": "string"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			},
			"delete": {
				"summary": "Delete a job attachment",
				"description": "Delete a job attachment",
				"operationId": "deleteAttachmentForJobByIdLatest",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Call/Archive": {
			"get": {
				"summary": "Get a list of archived calls",
				"description": "Get a list of archived calls",
				"operationId": "getArchivedCallForServiceTypeLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CallData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/After"
					},
					{
						"$ref": "#/components/parameters/Before"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Call/{id}/Comment": {
			"post": {
				"summary": "Create a comment on a call",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CommentCreate"
							}
						}
					}
				},
				"description": "Create a comment on a call",
				"operationId": "createCommentForCallV1",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CallComment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			},
			"get": {
				"summary": "Get comments associated with a call",
				"description": "Get comments associated with a call",
				"operationId": "getCommentsForCallV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/CallComment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/Meter/{id}": {
			"get": {
				"summary": "Get premise, premise service type, and current customer details by meter ID",
				"description": "Get premise, premise service type, and current customer details by meter ID",
				"operationId": "getMeterIdLatest",
				"responses": {
					"200": {
						"400": {
							"$ref": "#/components/responses/400"
						},
						"401": {
							"$ref": "#/components/responses/401"
						},
						"403": {
							"$ref": "#/components/responses/403"
						},
						"404": {
							"$ref": "#/components/responses/404"
						},
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CustomerPremiseService"
								}
							}
						}
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Meter"
				]
			}
		},
		"/api/Customer/Bulk": {
			"post": {
				"summary": "Get customers by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get customers by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain external IDs",
				"operationId": "getCustomersBulkPostLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Customer"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Customer"
				]
			},
			"get": {
				"summary": "Get customers by a list of IDs",
				"description": "Get customers by a list of IDs",
				"operationId": "getCustomerBulkLatest",
				"responses": {
					"200": {
						"description": "Success",
						"$ref": "#/definitions/Customer"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalIDsQuery"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/Call/{id}/Hazard": {
			"get": {
				"summary": "Get hazards associated with a call",
				"description": "Get hazards associated with a call",
				"operationId": "getHazardsForCallLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Hazard"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Call"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/ForceUp": {
			"post": {
				"summary": "Force up a job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Force up a job",
				"operationId": "forceUpJobLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/LinkJobs": {
			"patch": {
				"summary": "Update job links",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobUpdateLinks"
							}
						}
					}
				},
				"description": "Add or remove one or more links to a job (either active or archived)",
				"operationId": "updateJobLinksV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Job"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/DamageRecord/{id}/AssociatedAssets": {
			"post": {
				"summary": "Create one or more assets and associate them to a damage record",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"description": "List of Assets",
								"type": "array",
								"items": {
									"$ref": "#/definitions/AssetCreate"
								}
							}
						}
					}
				},
				"description": "Create one or more assets and associate them to a damage record",
				"operationId": "createDamageRecordAssociatedAssets",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/DamageRecord"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Damage Record"
				]
			},
			"get": {
				"summary": "Get assets associated to a damage record",
				"description": "Get assets associated to a damage record",
				"operationId": "getDamageRecordAssociatedAssetsLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"description": "List of Assets",
									"type": "array",
									"items": {
										"$ref": "#/definitions/Asset"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Damage Record"
				]
			}
		},
		"/api/Customer/PremiseAssociation": {
			"post": {
				"summary": "Associate a customer to a premise",
				"requestBody": {
					"description": "Customer/Premise association to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CustomerPremiseAssociate"
							}
						}
					}
				},
				"description": "Associate a customer to a premise",
				"operationId": "associateCustomerToPremiseLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Customer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Customer"
				]
			},
			"delete": {
				"summary": "Disassociate a customer from a premise",
				"requestBody": {
					"description": "Customer/Premise association to delete",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CustomerPremiseDisassociate"
							}
						}
					}
				},
				"description": "Disassociate a customer from a premise",
				"operationId": "disassociateCustomerFromPremiseLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Customer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/OperationEvent/{id}": {
			"patch": {
				"summary": "Update operation event",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/OperationEventUpdate"
							}
						}
					}
				},
				"description": "Update a operation event by internal ID and service type",
				"operationId": "updateOperationEventByIdLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OperationEvent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Operation Event"
				]
			},
			"get": {
				"summary": "Get Operation Event",
				"description": "Get an operation event by internal or external ID and service type",
				"operationId": "getOperationEventByIdLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/OperationEvent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrDisplayID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Operation Event"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/{id}/CrewAssignment": {
			"get": {
				"summary": "Get crew assignments for a job",
				"description": "Get crew assignments for a job",
				"operationId": "getCrewAssignmentsForJobV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CrewAssignmentData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeResolved"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Feeder/{id}/Comment": {
			"post": {
				"summary": "Create a comment on a feeder",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/CommentCreate"
							}
						}
					}
				},
				"description": "Create a comment on a feeder",
				"operationId": "createCommentForFeederLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/FeederComment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Feeder"
				]
			},
			"get": {
				"summary": "Get comments associated with a feeder",
				"description": "Get comments associated with a feeder",
				"operationId": "getCommentsForFeederLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/FeederComment"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Feeder"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/Cancel": {
			"post": {
				"summary": "Cancel an outage job",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/JobCreateUserRequest"
							}
						}
					}
				},
				"description": "Cancel an outage job",
				"operationId": "cancelJobLatest",
				"responses": {
					"202": {
						"$ref": "#/components/responses/202UR"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404UR"
					},
					"409": {
						"$ref": "#/components/responses/409UR"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/ServiceType/{sid}/Device/Query": {
			"post": {
				"summary": "Get devices by a list of IDs in the body of the post",
				"requestBody": {
					"description": "An array of IDs to search for.  If isInternalIDs is true or not specified, each element in the array must be an ObjectId.",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string",
									"example": "59a1b4b4f304f0ef8232c768"
								}
							}
						}
					}
				},
				"description": "Get devices by a list of IDs in the body of the post. If isInternalIDs is false, the body should contain external ids, device names, or internal dms model ids (1,2,3,4)",
				"operationId": "getDevicesByQueryLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/DeviceInfo"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IsInternalIDs"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					}
				],
				"tags": [
					"Device"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Job/Bulk/Workflow": {
			"patch": {
				"summary": "Bulk workflow transition jobs",
				"requestBody": {
					"description": "Work Flow state identifier to transition to",
					"required": true,
					"content": {
						"text": {
							"schema": {
								"format": "int32",
								"type": "integer"
							}
						}
					}
				},
				"description": "Bulk workflow transition jobs",
				"operationId": "updateJobWorkflowBulkV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/JobBulkChangeReturnStatusData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IDs"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Retailer/{id}": {
			"get": {
				"summary": "Get retailer",
				"description": "Get a retailer by internal or external ID",
				"operationId": "getRetailerByIdLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Retailer"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/InternalOrExternalID"
					}
				],
				"tags": [
					"Retailer"
				]
			}
		},
		"/api/Customer/Job/search": {
			"get": {
				"summary": "Get jobs by customer search",
				"description": "Search customers across address, name, phone number and external customer id and return a list of jobs for those customers",
				"operationId": "getJobsByCustomerSearchLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PremiseCustomerJobs"
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/PhoneNumber"
					},
					{
						"$ref": "#/components/parameters/ServiceType"
					},
					{
						"$ref": "#/components/parameters/Name"
					},
					{
						"$ref": "#/components/parameters/Address"
					},
					{
						"$ref": "#/components/parameters/ExternalCustomerId"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/TakeForSearch"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/IgnoreHistorical"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/ServiceType/{sid}/Job/{id}/Hazard": {
			"get": {
				"summary": "Get hazards associated with a job including hazards on calls associated to the job",
				"description": "Get hazards associated with a job including hazards on calls associated to the job",
				"operationId": "getHazardsForJobLatest",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Hazard"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Job"
				]
			}
		},
		"/api/Customer/search": {
			"get": {
				"summary": "Search customers across configured search fields",
				"description": "Search customers across configured search fields",
				"operationId": "getCustomersBySearchLatest",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CustomerElastic"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Query"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/TakeForSearch"
					}
				],
				"tags": [
					"Customer"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Callback/{id}/Status": {
			"post": {
				"summary": "Update the status of a callback",
				"requestBody": {
					"required": true,
					"content": {
						"text": {
							"schema": {
								"format": "int32",
								"type": "integer"
							}
						}
					}
				},
				"description": "Update the status of a callback. Integer values for the body: 0=PENDING, 1=FULFILLED, 2=CANCELLED",
				"operationId": "updateCallbackStatusV1",
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/ID"
					}
				],
				"tags": [
					"Callback"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Callback/Archive": {
			"get": {
				"summary": "Get a list of archived callbacks",
				"description": "Get a list of archived callbacks",
				"operationId": "getArchivedCallbacksV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/CallbackData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/After"
					},
					{
						"$ref": "#/components/parameters/Before"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					}
				],
				"tags": [
					"Callback"
				]
			}
		},
		"/api/v1/ServiceType/{sid}/Hazard": {
			"post": {
				"summary": "Create a hazard",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/HazardCreate"
							}
						}
					}
				},
				"description": "Create a hazard",
				"operationId": "createHazardV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/Hazard"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"423": {
						"$ref": "#/components/responses/423"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					}
				],
				"tags": [
					"Hazard"
				]
			},
			"get": {
				"summary": "Get non-deleted/deprecated hazards",
				"description": "Get non-deleted/deprecated hazards",
				"operationId": "getHazardsV1",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/HazardData"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/ServiceTypeIdentifier"
					},
					{
						"$ref": "#/components/parameters/IncludeFields"
					},
					{
						"$ref": "#/components/parameters/ExcludeFields"
					},
					{
						"$ref": "#/components/parameters/Skip"
					},
					{
						"$ref": "#/components/parameters/Take"
					},
					{
						"$ref": "#/components/parameters/Historical"
					}
				],
				"tags": [
					"Hazard"
				]
			}
		}
	},
	"host": "omspds1:8443",
	"schemes": [
		"https"
	],
	"definitions": {
		"ColorationRule": {
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"color": {
					"description": "The color to apply to the rule's target",
					"type": "string",
					"example": "#ffaabb"
				},
				"deprecated": {
					"$ref": "#/definitions/Deprecated"
				},
				"active": {
					"description": "Whether the rule has been initially activated by the system",
					"type": "boolean",
					"example": false
				},
				"label": {
					"description": "The rule's label",
					"type": "string",
					"example": "Jobs with active hazards"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"priority": {
					"format": "int32",
					"description": "The priority of the rule, used when multiple rules apply to the same target",
					"type": "integer",
					"example": 7
				},
				"archived": {
					"$ref": "#/definitions/Archived"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"rowRule": {
					"description": "Whether the rule colors entire grid row rather than a field",
					"type": "boolean",
					"example": false
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"targetField": {
					"description": "The target field of the rule, only relevant when not a row rule",
					"type": "string",
					"example": "networkModelTypeLabel"
				},
				"modified": {
					"description": "Whether the rule has been modified since last processed by the system",
					"type": "boolean",
					"example": false
				},
				"fieldRequirements": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/FieldValueOperation"
					}
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"AreaComment": {
			"allOf": [
				{
					"$ref": "#/definitions/Comment"
				},
				{
					"properties": {
						"modelID": {
							"description": "The internal ID of the area associated with the comment",
							"type": "string",
							"example": "59a1bd89f304f0ef8232c76a"
						}
					}
				}
			],
			"description": "An area comment resource."
		},
		"Customer": {
			"description": "A customer resource.",
			"properties": {
				"callbackContactMethod": {
					"format": "int32",
					"description": "Default callback contact method for the customer. Reference callback contact method in the service type configuration",
					"type": "integer"
				},
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"deprecated": {
					"$ref": "#/definitions/Deprecated"
				},
				"externalID": {
					"$ref": "#/definitions/ExternalID"
				},
				"callbackContactInfo": {
					"$ref": "#/definitions/CallbackContactInfo"
				},
				"activeRetailerIDs": {
					"description": "List of retailer ids the customer is currently associated with",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c769"
					}
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"activePremiseServiceTypeIDs": {
					"description": "List of premise service type ids the customer is currently associated with",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c769"
					}
				},
				"callbackTypes": {
					"_comment": "making this a referenced field removes the description and examples, need to include in each model",
					"description": "Callback types",
					"type": "array",
					"items": {
						"type": "string",
						"example": "RESOLVED"
					},
					"enum": [
						"RESOLVED"
					]
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"doNotCallTimes": {
					"$ref": "#/definitions/DoNotCallTimes"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"group": {
					"description": "Customer Importer Group",
					"type": "string",
					"example": "sample group"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"lastChangeReason": {
					"$ref": "#/definitions/LastChangeReason"
				},
				"overriddenValues": {
					"description": "mapping of field to imported value for fields that have been overridden by the UI",
					"example": {
						"name": "Johnny Blazer",
						"59a1bd89f304f0ef8232c769": "fieldValue"
					}
				},
				"services": {
					"description": "Current and Former services for the customer",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Service"
					}
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"phoneNumber": {
					"description": "Customer Phone Number",
					"type": "string",
					"example": "(555) 555-5555"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"name": {
					"description": "Customer name",
					"type": "string",
					"example": "John Doe"
				}
			}
		},
		"CreatedAt": {
			"format": "date-time",
			"description": "The date / time the resource was created.",
			"type": "string",
			"example": "2018-01-13T10:00:00Z"
		},
		"StationComment": {
			"allOf": [
				{
					"$ref": "#/definitions/Comment"
				},
				{
					"properties": {
						"modelID": {
							"description": "The internal ID of the station associated with the comment",
							"type": "string",
							"example": "59a1bd89f304f0ef8232c76a"
						}
					}
				}
			],
			"description": "A station comment resource."
		},
		"DisplayID": {
			"description": "System generated, display friendly ID. This is not guaranteed to be unique.  Contact your system administrator for details on how the displayID is generated for the given model.",
			"type": "string",
			"example": "JE.0001"
		},
		"FactorType": {
			"description": "ETR Factor types",
			"type": "string",
			"enum": [
				"TIME",
				"MULTIPLIER"
			],
			"example": "TIME"
		},
		"CallCreate": {
			"description": "A call to create.",
			"properties": {
				"callbackContactMethod": {
					"format": "int32",
					"description": "Default callback contact method for the caller. Reference callback contact method in the service type configuration",
					"type": "integer"
				},
				"notes": {
					"description": "Notes from the call.",
					"type": "string",
					"example": "Caller noted that power is out"
				},
				"plannedEnd": {
					"format": "date-time",
					"description": "The planned end time",
					"type": "string"
				},
				"startedAt": {
					"format": "date-time",
					"description": "The date / time the Call was started.  This can be set by an external system to indicate the call was taken prior to being sent to OMS.  See Service Type configuration for call future / past deadbands and handling of startedAt times too far in the future or past",
					"type": "string"
				},
				"plannedStart": {
					"format": "date-time",
					"description": "The planned start time",
					"type": "string"
				},
				"callbackContactInfo": {
					"$ref": "#/definitions/CallbackContactInfo"
				},
				"jobID": {
					"description": "The internal ID of the Job that is associated with a restored call. Uses mongo's ObjectId format, which is a 24 character hexadecimal value.",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"callCodeID": {
					"description": "Internal id of the call code for the call. See Service Type Configuration for details",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"hazards": {
					"description": "Hazards to create with the call",
					"type": "array",
					"items": {
						"$ref": "#/definitions/HazardCreateEmbedded"
					}
				},
				"aorID": {
					"description": "(DEPRECATED - Use aorIDs instead) The AOR ID for the call. When querying, this will be the first (priority) AOR ID from the call's AOR IDs. When posting, this field will be ignored if AOR IDs are specified.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"observations": {
					"description": "The observations reported by the caller",
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					}
				},
				"callbackTypes": {
					"_comment": "making this a referenced field removes the description and examples, need to include in each model",
					"description": "Callback types",
					"type": "array",
					"items": {
						"type": "string",
						"example": "RESOLVED"
					},
					"enum": [
						"RESOLVED"
					]
				},
				"contactMethod": {
					"format": "int32",
					"description": "Internal identifier of the associated contactMethod by which this call was created.",
					"type": "integer",
					"example": 1
				},
				"externalCustomerID": {
					"$ref": "#/definitions/ExternalCustomerID"
				},
				"address": {
					"description": "The address the call originated from.  This is likely to be the premise's address unless it was overridden when the call was taken.",
					"type": "string",
					"example": "1234 Main Street"
				},
				"aorIDs": {
					"description": "A List of AOR IDs for this call. The first AOR in this list is considered the 'Priority AOR'. These in conjunction with the other AORs fields determine which users have jurisdiction over this call.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"premiseID": {
					"$ref": "#/definitions/PremiseID"
				},
				"externalCallCodeID": {
					"description": "External ID of the call code for this call. Required if callCodeID not specified",
					"type": "string"
				},
				"commentAdds": {
					"description": "Comments to create with the call",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CommentCreate"
					}
				},
				"phoneNumber": {
					"description": "The phone number associated with the call.",
					"type": "string",
					"example": "(555) 123-4567"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"customerID": {
					"description": "The internal ID of the customer associated with the call",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"name": {
					"description": "The customer name of the call.",
					"type": "string",
					"example": "Bob Johnson"
				},
				"restored": {
					"description": "Indicator that the call was created with intention of being associated with an already restored job. If set to true, jobID must be specified",
					"type": "boolean"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"externalPremiseID": {
					"$ref": "#/definitions/ExternalPremiseID"
				}
			}
		},
		"FeederComment": {
			"allOf": [
				{
					"$ref": "#/definitions/Comment"
				},
				{
					"properties": {
						"modelID": {
							"description": "The internal ID of the feeder associated with the comment",
							"type": "string",
							"example": "59a1bd89f304f0ef8232c76a"
						}
					}
				}
			],
			"description": "A feeder comment resource."
		},
		"CrewAssignmentDetails": {
			"description": "A resource many details pertaining to a crew assignment.",
			"properties": {
				"CREW_ASSIGNMENT": {
					"$ref": "#/definitions/CrewAssignment"
				},
				"Comments": {
					"description": "List of comments associated with the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/JobComment"
					}
				},
				"Hazards": {
					"description": "List of hazards associated with the job",
					"$ref": "#/definitions/Hazards"
				},
				"JOB": {
					"$ref": "#/definitions/Job"
				},
				"Files": {
					"description": "List of files associated with the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OMSFile"
					}
				}
			}
		},
		"DataEditValidationFailures": {
			"description": "Device Information to create",
			"properties": {
				"customFields": {
					"description": "List of custom fields violated",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"fields": {
					"description": "List of system fields violated",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"actions": {
					"description": "List of actions violated",
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"DeviceInfoData": {
			"description": "A list of devices.",
			"properties": {
				"lastUpdated": {
					"format": "int64",
					"description": "Time in milliseconds since epoch of last updated value in the list of devices.",
					"type": "integer",
					"example": 1503941374348
				},
				"total": {
					"format": "int64",
					"description": "The total number of devices returned",
					"type": "integer"
				},
				"data": {
					"description": "List of Devices",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DeviceInfo"
					}
				}
			}
		},
		"LinkCreate": {
			"required": [
				"linkTypeID",
				"linkedID"
			],
			"properties": {
				"linkedID": {
					"description": "The internal ID of the job/operation event to link to.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"linkTypeID": {
					"description": "The internal ID of the type of link to add.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				}
			}
		},
		"PriorityThreshold": {
			"description": "A customizable priority threshold resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"maxValue": {
					"format": "int32",
					"description": "",
					"type": "integer",
					"example": "1"
				},
				"externalID": {
					"description": "",
					"type": "string",
					"example": "sample externalID"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"archived": {
					"$ref": "#/definitions/Archived"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"minValue": {
					"format": "int32",
					"description": "",
					"type": "integer",
					"example": "1"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"priorityLevelIdentifier": {
					"format": "int32",
					"description": "",
					"type": "integer",
					"example": "1"
				},
				"id": {
					"$ref": "#/definitions/ObjectId"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"CustomerPremisePremiseServiceType": {
			"description": "A Customer, Premise and PremiseServiceType resource.",
			"properties": {
				"Customer": {
					"$ref": "#/definitions/Customer"
				},
				"PremiseServiceType": {
					"$ref": "#/definitions/PremiseServiceType"
				},
				"Premise": {
					"$ref": "#/definitions/Premise"
				}
			}
		},
		"ScadaAlarm": {
			"description": "A representation of an alarm from SCADA",
			"properties": {
				"severity": {
					"description": "The value of the alarm's severity field from SCADA",
					"type": "string",
					"example": "Event"
				},
				"scadaKey": {
					"description": "The SCADA key associated to this alarm",
					"type": "string"
				},
				"origin": {
					"description": "The value of the alarm's origin field from SCADA",
					"type": "string",
					"example": "origin"
				},
				"alarmClass": {
					"format": "int32",
					"description": "The numeric value of the alarm's class",
					"type": "integer"
				},
				"description": {
					"description": "The value of the alarm's description field from SCADA",
					"type": "string",
					"example": "description"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"event": {
					"description": "The value of the alarm's event field from SCADA",
					"type": "string",
					"example": "event"
				},
				"value": {
					"description": "The value of the alarm's value field from SCADA",
					"type": "string",
					"example": "value"
				},
				"timestamp": {
					"format": "date-time",
					"description": "The timestamp of the alarm's creation",
					"type": "string"
				}
			}
		},
		"DeviceInfo": {
			"description": "Device Information",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"premiseServiceTypePriority": {
					"description": "The highest Premise Service Type Priority Type connected to the device",
					"type": "int",
					"example": 1
				},
				"externalID": {
					"description": "The external ID of the device.  This will typically be the ID that came from the GIS.",
					"type": "string",
					"example": "570_31182856_0_11021755"
				},
				"nominalStationID": {
					"description": "Internal ID of the nominal station associated with the device.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"premiseCount": {
					"description": "Internal system field. This will always be 0.",
					"type": "int",
					"example": "0"
				},
				"type": {
					"description": "The type of device. Use deviceInfoType instead",
					"type": "string",
					"enum": [
						"Area",
						"Breaker",
						"Circuit",
						"Feeder",
						"Fuse",
						"Generator",
						"Line",
						"Load",
						"NetworkProtector",
						"Recloser",
						"Region",
						"Source",
						"Sectionalizer",
						"Substation",
						"Switch",
						"Transformer"
					],
					"example": "Load"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"nominalRegionID": {
					"description": "Internal ID of the nominal region associated with the device.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"inOVGeoDisplay": {
					"description": "Whether the device is included in the OpenView geographic one-line display",
					"type:": "boolean",
					"example": true
				},
				"substationName": {
					"description": "The name of the device's nominal substation",
					"type": "string",
					"example": "Berklee Sub"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"deviceInfoType": {
					"description": "The type of device the job is associated with",
					"type": "string",
					"enum": [
						"AREA",
						"BREAKER",
						"CIRCUIT",
						"FEEDER",
						"FUSE",
						"GENERATOR",
						"LINE",
						"LOAD",
						"NETWORK_PROTECTOR",
						"RECLOSER",
						"REGION",
						"REGULATOR",
						"SECTIONALIZER",
						"SOURCE",
						"SUBSTATION",
						"SWITCH",
						"TRANSFORMER"
					]
				},
				"group": {
					"description": "The group that the device was imported as part of.  This comes from the device extra data import.",
					"type": "string",
					"example": "Group A"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"nominalFeederID": {
					"description": "Internal ID of the nominal feeder associated with the device.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"nominalStationName": {
					"description": "The name of the device's nominal station",
					"type": "string",
					"example": "Berklee Sub"
				},
				"premiseCustomers": {
					"description": "Internal system field. This will always be null.",
					"type": "String"
				},
				"address": {
					"description": "The address of the device.",
					"type": "string",
					"example": "987 2nd Street"
				},
				"aorIDs": {
					"description": "List of AOR IDs for the device",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"nominalFeederName": {
					"description": "The name of the device's nominal feeder",
					"type": "string",
					"example": "FDR123"
				},
				"nominalAreaID": {
					"description": "Internal ID of the nominal area associated with the device.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"nominalAreaName": {
					"description": "The name of the device's nominal area",
					"type": "string",
					"example": "AREA_123"
				},
				"substationID": {
					"description": "Internal ID of the substation associated with the device.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"feederID": {
					"description": "Internal ID of the feeder associated with the device.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"internalID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"name": {
					"description": "The name of the device",
					"type": "string",
					"example": "Load_123"
				},
				"nominalRegionName": {
					"description": "The name of the device's nominal region",
					"type": "string",
					"example": "REGION_123"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"feederName": {
					"description": "The name of the device's nominal feeder",
					"type": "string",
					"example": "FDR123"
				}
			}
		},
		"Asset": {
			"description": "An asset resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"address": {
					"description": "The address of the asset.",
					"type": "string",
					"example": "123 Main Street"
				},
				"parentDamageRecordID": {
					"description": "The internal ID of the damage record that the asset is associated with.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"importSource": {
					"description": "The source of the asset (imported from AMP or copied from OMS device)",
					"type": "string",
					"enum": [
						"AMP",
						"OMS",
						"NONE"
					]
				},
				"fixed": {
					"description": "Whether the asset has been marked as fixed.",
					"type": "boolean"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"PremiseUpdate": {
			"description": "A premise to create.",
			"properties": {
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"address": {
					"description": "Premise address",
					"type": "string",
					"example": "sample address"
				},
				"changeReason": {
					"$ref": "#/definitions/ChangeReason"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"group": {
					"description": "Premise Importer Group. Warning - changing the group will likely require a change in the bulk import process",
					"type": "string",
					"example": "A"
				}
			}
		},
		"ID": {
			"description": "The internal ID of the resource.  This uses mongo's ObjectId format, which is a 24 character hexadecimal value.",
			"type": "string",
			"example": "59a1b4b4f304f0ef8232c768"
		},
		"Boolean": {
			"description": "True or False",
			"type": "boolean",
			"example": false
		},
		"JobWorkFlowTransitionMap": {
			"description": "State to transition to",
			"properties": {
				"1": {
					"$ref": "#/definitions/JobWorkFlowTransition"
				}
			}
		},
		"PremiseServiceTypeUpdate": {
			"description": "A premise service update",
			"properties": {
				"activeAccount": {
					"description": "Whether the associated account is active.",
					"type": "boolean",
					"example": false
				},
				"priorityLabel": {
					"description": "Label for one of the priorityTypes defined in the premise service configuration",
					"type": "string",
					"example": "Medical"
				},
				"amiSystemID": {
					"description": "Internal ID of the AMI system associated with the premise service meter",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"priority": {
					"format": "int32",
					"description": "The ordinal priority identifier, nullable. Reference the priorityTypes from the premise service configuration",
					"type": "integer",
					"example": "1"
				},
				"deviceID": {
					"description": "The associated device's external ID.",
					"type": "string",
					"example": "DistributionTransformer,12345"
				},
				"connected": {
					"description": "Whether the premise service is connected.",
					"type": "boolean",
					"example": false
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"aorID": {
					"description": "Internal ID of the AOR associated with the premise service. If this is set to null, the aorID is set to the service type default",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"meterID": {
					"description": "The external ID of an associated AMI meter.",
					"type": "string",
					"example": "sample meterID"
				},
				"externalAmiSystemID": {
					"description": "External ID of the AMI system associated with the premise service meter. Ignored if amiSystemID is specified",
					"type": "string",
					"example": "ElectricAMI"
				},
				"aorLabel": {
					"description": "Label of the AOR associated with the premise service. Ignored if aorID is specified",
					"type": "string",
					"example": "Northwest"
				},
				"phases": {
					"description": "The phases associated with the connection.",
					"type": "string",
					"example": "sample phases"
				}
			}
		},
		"Status": {
			"format": "int32",
			"description": "Model status. See service type configuration for details.",
			"type": "integer",
			"example": 1
		},
		"AMIReading": {
			"description": "An AMIReading resource.",
			"properties": {
				"unit": {
					"description": "The unit the reading was measured in",
					"type": "string",
					"example": "V"
				},
				"field": {
					"description": "The read result summarized. Value determines whether some fields are applicable like and 'value' and 'unit'.",
					"type": "string",
					"example": "Balanced Voltage"
				},
				"requestStatusValue": {
					"description": "The status of the request associated to the reading",
					"type": "string",
					"example": "Timeout"
				},
				"requestedAt": {
					"format": "date-time",
					"description": "The date / time the resource was requested.",
					"type": "string",
					"example": "2022-01-05T10:00:00Z"
				},
				"requestedByUserName": {
					"description": "The user name of the user that requested the reading.",
					"type": "string",
					"example": "Katy Wilson"
				},
				"value": {
					"format": "double",
					"description": "The value of the reading.",
					"type": "number",
					"example": "120.0"
				},
				"timestamp": {
					"format": "date-time",
					"description": "The timestamp of when the reading was processed",
					"type": "string"
				}
			}
		},
		"ReturnStatusJobCrewAssignment": {
			"description": "Return status for crew assignment details patch",
			"properties": {
				"job": {
					"$ref": "#/definitions/ReturnStatus"
				},
				"crewAssignment": {
					"$ref": "#/definitions/ReturnStatus"
				}
			}
		},
		"ScadaAlarmCreate": {
			"description": "SCADA alarm to create an associated SCADA alarm for a job",
			"properties": {
				"severity": {
					"description": "The value of the alarm's severity field from SCADA",
					"type": "string",
					"example": "Event"
				},
				"scadaKey": {
					"description": "The SCADA key associated to this alarm",
					"type": "string"
				},
				"origin": {
					"description": "The value of the alarm's origin field from SCADA",
					"type": "string",
					"example": "origin"
				},
				"alarmClass": {
					"format": "int32",
					"description": "The numeric value of the alarm's class",
					"type": "integer"
				},
				"description": {
					"description": "The value of the alarm's description field from SCADA",
					"type": "string",
					"example": "description"
				},
				"event": {
					"description": "The value of the alarm's event field from SCADA",
					"type": "string",
					"example": "event"
				},
				"value": {
					"description": "The value of the alarm's value field from SCADA",
					"type": "string",
					"example": "value"
				},
				"timestamp": {
					"format": "date-time",
					"description": "The timestamp of the alarm's creation",
					"type": "string"
				}
			}
		},
		"CustomerPremiseDisassociate": {
			"description": "A Customer-Premise Service association to delete",
			"properties": {
				"externalCustomerID": {
					"description": "The external ID of the customer. This or customerID are required",
					"type": "string",
					"example": "C-0001"
				},
				"premiseID": {
					"description": "The internal ID of the premise. Uses mongo's ObjectId format, which is a 24 character hexadecimal value. This or externalPremiseID are required",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"customerID": {
					"description": "The internal ID of the customer. Uses mongo's ObjectId format, which is a 24 character hexadecimal value. This or externalCustomerID are required",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"serviceTypeID": {
					"description": "The internal ID of the Service Type of the premise the customer is associated with. Uses mongo's ObjectId format, which is a 24 character hexadecimal value. This or serviceTypeIdentifier are required",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"serviceTypeIdentifier": {
					"description": "The service type identifier for the service to delete. This or serviceTypeID are required.",
					"type": "string",
					"example": "Electric"
				},
				"externalPremiseID": {
					"description": "The external ID of the premise. This or premiseID are required",
					"type": "string",
					"example": "P-0001"
				}
			}
		},
		"PremiseCustomerCallbacks": {
			"description": "CustomerPremise Information, with Callbacks.",
			"properties": {
				"externalCustomerID": {
					"descrption": "External ID of the associated customer.",
					"type": "string",
					"example": "C-123456"
				},
				"address": {
					"description": "Premise address.",
					"type": "string",
					"example": "sample address"
				},
				"phone": {
					"description": "Customer Phone Number.",
					"type": "string",
					"example": "(555) 555-5555"
				},
				"name": {
					"description": "Customer name.",
					"type": "string",
					"example": "John Doe"
				},
				"items": {
					"description": "A list of callbacks.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Callback"
					}
				},
				"externalPremiseID": {
					"description": "External ID of the associated premise.",
					"type": "string",
					"example": "P-123"
				}
			}
		},
		"AMINotification": {
			"description": "An AMINotification resource.",
			"properties": {
				"amiPriority": {
					"description": "The priority from the ami notification",
					"type": "string"
				},
				"callCreationEnabled": {
					"description": "Whether or not the ami notification should be used for creating a call",
					"type:": "boolean",
					"example": false
				},
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"ignored": {
					"description": "Whether or not the notification was ignored by the system",
					"type": "boolean",
					"example": false
				},
				"eventType": {
					"description": "The type of notification",
					"type": "string",
					"enum": [
						"OUTAGE",
						"ONLINE",
						"INFO",
						"ERROR"
					]
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"associationFailed": {
					"description": "Restoration notification failed to be associated to an active job or convert a call to momentary",
					"type:": "boolean",
					"example": false
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"amiMsg": {
					"description": "Message from the ami notification",
					"type": "string"
				},
				"amiEvent": {
					"description": "event from the ami message",
					"type": "string"
				},
				"outsideDeadband": {
					"description": "Whether the notification's event time was outside of the configured deadband and thus not used for call creation",
					"type:": "boolean",
					"example": false
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"requestEventType": {
					"description": "The type of request that caused the notification",
					"type": "string",
					"enum": [
						"OUTAGE_ANALYSIS",
						"USER",
						"UNSOLICITED"
					]
				},
				"premiseServiceID": {
					"description": "The premise service the notification corresponds to.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"eventTimestamp": {
					"format": "date-time",
					"description": "The timestamp from the notification message",
					"type": "string"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"CallDataExtended": {
			"description": "A list of calls.",
			"properties": {
				"lastUpdated": {
					"format": "int64",
					"description": "Time in milliseconds since epoch of last updated value in the list of Calls.",
					"type": "integer",
					"example": 1503941374348
				},
				"total": {
					"format": "int64",
					"description": "The total number of calls returned",
					"type": "integer"
				},
				"data": {
					"description": "List of Calls",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Call"
					}
				},
				"totalWithHidden": {
					"format": "int64",
					"description": "The total number of calls, including those not returned.",
					"type": "integer"
				}
			}
		},
		"PremiseCreate": {
			"description": "A premise to create.",
			"required": [
				"externalID",
				"group"
			],
			"properties": {
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"address": {
					"description": "Premise address",
					"type": "string",
					"example": "sample address"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"externalID": {
					"description": "External ID of the premise.",
					"type": "string",
					"example": "P-00001"
				},
				"serviceTypes": {
					"description": "Premise services to create",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PremiseServiceTypeCreateWithPremise"
					}
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"group": {
					"description": "Premise Importer Group",
					"type": "string",
					"example": "A"
				}
			}
		},
		"AssetCreate": {
			"description": "An asset resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"address": {
					"description": "The address of the asset.",
					"type": "string",
					"example": "123 Main Street"
				},
				"parentDamageRecordID": {
					"description": "The internal ID of the damage record that the asset is associated with.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"importSource": {
					"description": "The source of the asset (imported from AMP or copied from OMS device)",
					"type": "string",
					"enum": [
						"AMP",
						"OMS",
						"NONE"
					]
				},
				"fixed": {
					"description": "Whether the asset has been marked as fixed.",
					"type": "boolean"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"CrewAssignmentUpdateWithStatus": {
			"description": "A crew assignment update with status changes allowed.",
			"properties": {
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"notes": {
					"description": "Any notes pertaining to the crew assignment",
					"type": "string",
					"example": "sample notes"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"destination": {
					"description": "Destination for the crew assignment",
					"type": "string",
					"example": "123 Jones Ave"
				},
				"assignedUserName": {
					"description": "User name of the user assigned to the crew assignment",
					"type": "string",
					"example": "sample assignedUserName"
				},
				"crewID": {
					"description": "Internal ID of the crew assigned to this crew assignment",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"requestedCrewType": {
					"format": "int32",
					"description": "The integer identifier of the crew type requested for the assignment",
					"type": "integer"
				},
				"assignedUserID": {
					"description": "Internal ID of the user assigned to the crew assignment",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"destinationField": {
					"$ref": "#/definitions/CrewAssignmentDestinationField"
				},
				"status": {
					"format": "int32",
					"description": "The integer identifier of the desired crew assignment status.",
					"type": "integer"
				}
			}
		},
		"JobUpdate": {
			"_comment": "determine if the OA set fields should be allowed during QA and if so make that clear, and determine how etr and priority updates work",
			"description": "Job update",
			"properties": {
				"overrideLeadLocationSource": {
					"description": "If set to True, the leadLocationSource can be manually specified to a specific source and will not follow the jobLeadLocationPriority stored on the ServiceType. Otherwise, the leadLocationSource will be determined by the jobLeadLocationPriority.",
					"type": "boolean",
					"example": false
				},
				"notes": {
					"description": "Notes to include with the job",
					"type": "string",
					"example": "The transformer is on fire"
				},
				"leadLocationSource": {
					"description": "String enumeration of where the the lead location data was taken from. In order to change this value, overrideLeadLocationSource must be set to true. Also, in order to update the leadLocation, this must be set to 'CUSTOM_SOURCE'.",
					"type": "string",
					"enum": [
						"CALL",
						"DEVICE",
						"JOB",
						"PREMISE",
						"CUSTOM_SOURCE"
					],
					"example": "JOB"
				},
				"operationEventIDs": {
					"description": "The operation events the job is associated with",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"title": {
					"description": "Title for the job",
					"type": "string",
					"example": "Replace transformer X123"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"aorID": {
					"description": "(DEPRECATED - Use aorIDs instead) The AOR ID for the job. When querying, this will be the priority AOR ID from the job's AOR IDs. When posting, this field will be ignored if AOR IDs are specified.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"leadLocation": {
					"$ref": "#/definitions/LabeledLocation"
				},
				"outageType": {
					"description": "The classification of outage for the job",
					"type": "string",
					"enum": [
						"FORCED_OUTAGE",
						"OUTAGE",
						"PLANNED_INTERRUPTION",
						"PLANNED_OUTAGE",
						"UNPLANNED_INTERRUPTION"
					]
				},
				"substation": {
					"description": "The current substation of the affected device for the job",
					"type": "string",
					"example": "sample substation"
				},
				"nominalFeeder": {
					"description": "The nominal feeder of the job device",
					"type": "string",
					"example": "FDR 5"
				},
				"outageSubtypeID": {
					"description": "The Outage SubtypeID for the job defined in system config Outage Subtypes",
					"type": "string",
					"example": "5e94a904a639e67d18551f1e"
				},
				"hasUserOverriddenAors": {
					"description": "True if the aorIDs field has been overridden by a user, false otherwise. If set to false and updated to true, the system will stop re-calculating the aorIDs field when system managed AORs change (via reprediction/location change/etc.). If true and updated to false, the system will take over calculating the aorIDs field again based on the device/location/etc. of the job.",
					"type": "boolean"
				},
				"nominalSubstation": {
					"description": "The nominal substation of the job device",
					"type": "string",
					"example": "Brookdale Sub"
				},
				"assignedUserID": {
					"description": "The internal ID of the user assigned to the Job.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"leadAssignmentLocked": {
					"description": "true if the lead assignment is locked",
					"type": "boolean"
				},
				"deviceType": {
					"description": "The type of device the job is associated with",
					"type": "string",
					"example": "Switch"
				},
				"etr": {
					"$ref": "#/definitions/ETRCreate"
				},
				"address": {
					"description": "The address of the job.",
					"type": "string",
					"example": "123 Main Street"
				},
				"aorIDs": {
					"description": "A List of AOR IDs that determines which users have jurisdiction over this job. By default, this will be set by the system to be the combined set of the systemAorIDs and geographicAorIDs. However, this can be overridden by a user and then will no longer be recalculated by the system. See the associated hasUserOverriddenAors field. The first AOR in this list is considered the 'Priority AOR'.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"changeReason": {
					"$ref": "#/definitions/ChangeReason"
				},
				"start": {
					"format": "date-time",
					"description": "The job start time",
					"type": "string"
				},
				"externalWorkOrderID": {
					"description": "An ID used for tracking in an external system",
					"type": "string",
					"example": "WO-00001"
				},
				"priority": {
					"$ref": "#/definitions/PriorityCreate"
				},
				"leadCallLocked": {
					"description": "Whether the lead call has been locked so that no further changes will occur.",
					"type": "boolean"
				},
				"primaryWorkAreaOverride": {
					"description": "The internal ID of the work area which will be the new primary work area for the job. This work area must be associated to the lowest level in the work area hierarchy and have an associated AOR on the job. Passing null will clear out the override and will cause the system will go back to updating the primary work area based on the AORs on the job.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"assignedUserName": {
					"description": "The user name of the user assigned to the job.",
					"type": "string",
					"example": "Jane"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"feederName": {
					"description": "The name of the currently connected feeder for the job.  Only applies to Outage type jobs.",
					"type": "string",
					"example": "FDR1"
				}
			}
		},
		"PriorityCalcMatrix": {
			"description": "A customized priority calculation factor matrix resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"deprecated": {
					"description": "",
					"type": "boolean",
					"example": false
				},
				"externalID": {
					"description": "",
					"type": "string",
					"example": "sample externalID"
				},
				"label": {
					"description": "",
					"type": "string",
					"example": "sample label"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"priorityLevels": {
					"description": "",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PriorityLevel"
					}
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"archived": {
					"$ref": "#/definitions/Archived"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"priorityFactors": {
					"description": "",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PriorityFactor"
					}
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"oaProcessingModeID": {
					"description": "",
					"$ref": "#/definitions/ObjectId"
				},
				"priorityThresholds": {
					"description": "",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PriorityThreshold"
					}
				},
				"modified": {
					"description": "",
					"type": "boolean",
					"example": false
				},
				"id": {
					"$ref": "#/definitions/ObjectId"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"JobHazardClose": {
			"properties": {
				"hazardTypeIDs": {
					"description": "Hazard type IDs. If not defined, hazardTypeExternalIDs will be checked",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"hazardTypeExternalIDs": {
					"description": "Hazard type external IDs",
					"type": "array",
					"items": {
						"type": "string",
						"example": "lineDown"
					}
				},
				"hazardParentModelType": {
					"description": "Hazard parent model type",
					"type": "string",
					"enum": [
						"JOB",
						"CALL"
					],
					"example": "JOB"
				},
				"ids": {
					"description": "Hazard IDs",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				}
			}
		},
		"Object": {
			"description": "Arbitrary Object content",
			"type": "string"
		},
		"UpdatedByUserID": {
			"description": "The internal ID of the user that updated the resource.",
			"type": "string",
			"example": "59a1bd89f304f0ef8232c76a"
		},
		"Link": {
			"description": "A job link resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"linkedID": {
					"description": "The linked job/operation event's internal ID.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"deprecated": {
					"description": "Whether the link has been deleted",
					"type": "boolean",
					"example": false
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"linkedDisplayID": {
					"description": "Display ID of the linked job/operation event.",
					"type": "string",
					"example": "sample linkedDisplayID"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"linkTypeID": {
					"description": "An internal ID of the link type.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"JobCreateUserRequest": {
			"description": "Job to provide when creating a user request",
			"required": [
				"currentAffected",
				"networkModelName",
				"networkModelType",
				"phases"
			],
			"properties": {
				"networkModelID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"networkModelType": {
					"format": "int32",
					"description": "The device type of the job. See service type configuration for labels",
					"type": "integer",
					"example": 0
				},
				"currentAffected": {
					"format": "int32",
					"description": "The current number of customers affected by the job.",
					"type": "integer"
				},
				"phases": {
					"description": "The phase identifiers of the affected device for this job",
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer",
						"example": 1
					}
				}
			}
		},
		"HazardCreate": {
			"description": "The hazard to create from the hazard endpoint. Either the hazardTypeID or hazardTypeExternalID is required.  If the hazardTypeID is provided, the hazardTypeExternalID will be ignored.  The hazard type will be validated against the available hazard types for the service type. If the networkModelID or extNetworkModelID are set, the deviceInfo field will be populated based on the values provided.",
			"properties": {
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"hazardTypeExternalID": {
					"description": "The external ID of the hazard type to create.  This would be found in the Service Type definition.",
					"type": "string",
					"example": "lineDown"
				},
				"address": {
					"description": "The address of the hazard.",
					"type": "string",
					"example": "123 Main Street"
				},
				"networkModelID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"notes": {
					"description": "Notes about the hazard",
					"type": "string",
					"example": "Hazard on the street."
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"extNetworkModelID": {
					"description": "The external ID of the device.  This will typically be the ID that came from the GIS.",
					"type": "string",
					"example": "570_31182856_0_11021755"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"hazardTypeID": {
					"description": "A reference to the hazard type of the hazard.  This would be found in the Service Type definition.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"parentModel": {
					"description": "The model type of the parent (job or call)",
					"type": "string",
					"enum": [
						"CALL",
						"JOB"
					]
				},
				"parentID": {
					"description": "The internal ID of the Call or Job that the hazard is associated with.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				}
			},
			"required": [
				"hazardTypeID",
				"hazardTypeLabel",
				"parentID",
				"parentModel"
			]
		},
		"CustomTableValuesExt": {
			"properties": {
				"customTable": {
					"description": "Sample custom table. The key for this will the custom field external label of the custom table instead of customTable",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomFieldValues"
					}
				}
			}
		},
		"CustomerElastic": {
			"description": "A customer resource.",
			"properties": {
				"data": {
					"properties": {
						"hits": {
							"properties": {
								"hits": {
									"description": "Array of returned document objects.",
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"highlight": {
												"description": "Highlighted snippets from one or more fields in your search results of the query matches",
												"type": "object",
												"properties": {
													"name": {
														"type": "array",
														"items": {
															"type": "string"
														}
													}
												}
											},
											"score": {
												"description": "Positive 32-bit floating point number used to determine the relevance of the returned document.",
												"type": "number"
											},
											"index": {
												"description": "Name of the index containing the returned document.",
												"type": "string"
											},
											"source": {
												"properties": {
													"customerOverriddenValues": {
														"description": "Overridden values for the customer",
														"$ref": "#/definitions/OverriddenValues"
													},
													"activeAccount": {
														"description": "Whether the associated account is active.",
														"type": "boolean",
														"example": false
													},
													"amiSystemID": {
														"description": "The AMI System ID",
														"$ref": "#/definitions/ObjectId"
													},
													"deprecated": {
														"$ref": "#/definitions/Deprecated"
													},
													"retailerID": {
														"description": "The customer's retailer",
														"$ref": "#/definitions/ObjectId"
													},
													"deviceName": {
														"description": "The name of the device that the premise service is connected to in the network model",
														"type": "string",
														"example": "Xfrmr_ABC"
													},
													"createdAt": {
														"_comment": "This is actually the time the query was searched",
														"$ref": "#/definitions/CreatedAt"
													},
													"archived": {
														"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
														"description": "Whether the resource is archived.",
														"type": "boolean",
														"example": false
													},
													"customTableValues": {
														"$ref": "#/definitions/CustomTableValues"
													},
													"aorID": {
														"description": "Internal ID of the AOR associated with the premise service. If this or aorLabel are not specified, the service type default is used",
														"type": "string",
														"example": "59a1bd89f304f0ef8232c76a"
													},
													"meterID": {
														"description": "The meter ID",
														"type": "string",
														"example": "M-0001"
													},
													"customerDeprecated": {
														"description": "Whether the customer is deprecated",
														"type": "boolean",
														"example": false
													},
													"callbackTypes": {
														"_comment": "making this a referenced field removes the description and examples, need to include in each model",
														"description": "Callback types",
														"type": "array",
														"items": {
															"type": "string",
															"example": "RESOLVED"
														},
														"enum": [
															"RESOLVED"
														]
													},
													"id": {
														"_comment": "premise service type id",
														"description": "The associated premise service type internal ID",
														"$ref": "#/definitions/ObjectId"
													},
													"customTableValuesExt": {
														"$ref": "#/definitions/CustomTableValuesExt"
													},
													"phases": {
														"description": "The phases of the premise service (only applicable to Electric)",
														"type": "string",
														"example": "123"
													},
													"updatedAt": {
														"_comment": "This is actually the time the query was searched",
														"$ref": "#/definitions/UpdatedAt"
													},
													"externalCustomerID": {
														"$ref": "#/definitions/ExternalCustomerID"
													},
													"address": {
														"description": "The address of the associated premise.",
														"type": "string",
														"example": "123 Main Street"
													},
													"networkModelID": {
														"$ref": "#/definitions/NetworkModelID"
													},
													"premiseID": {
														"description": "The internal ID of the premise the customer is assigned to. Uses mongo's ObjectId format, which is a 24 character hexadecimal value",
														"type": "string",
														"example": "59a1b4b4f304f0ef8232c768"
													},
													"deviceID": {
														"description": "The device ID of the associated premise service type",
														"type": "string",
														"example": "1_2_3_4"
													},
													"deviceInfo": {
														"$ref": "#/definitions/DeviceInfo"
													},
													"connected": {
														"description": "Whether the premise service is connected.",
														"type": "boolean",
														"example": true
													},
													"updatedByUserName": {
														"$ref": "#/definitions/UpdatedByUserName"
													},
													"createdByUserName": {
														"$ref": "#/definitions/CreatedByUserName"
													},
													"phoneNumber": {
														"description": "Customer Phone Number",
														"type": "string",
														"example": "(555) 555-5555"
													},
													"customFieldValues": {
														"$ref": "#/definitions/CustomFieldValues"
													},
													"premiseOverriddenValues": {
														"description": "Overridden values for the associated premise.",
														"$ref": "#/definitions/OverriddenValues"
													},
													"premiseDeprecated": {
														"description": "Whether the associated premise is deprecated",
														"type": "boolean",
														"example": false
													},
													"customFieldValuesExt": {
														"$ref": "#/definitions/CustomFieldValuesExt"
													},
													"customerID": {
														"description": "The customer's internal ID",
														"$ref": "#/definitions/ObjectId"
													},
													"name": {
														"description": "Customer name",
														"type": "string",
														"example": "John Doe"
													},
													"activeOutage": {
														"description": "Whether the premise service is currently considered out",
														"type": "boolean",
														"example": false
													},
													"serviceTypeID": {
														"description": "Service Type Id",
														"$ref": "#/definitions/ObjectId"
													},
													"location": {
														"description": "The geospatial location of the associated premise",
														"$ref": "#/definitions/GeoJSONPoint"
													},
													"externalPremiseID": {
														"description": "The external ID of the associated premise",
														"type": "string",
														"example": "P-000001"
													}
												}
											},
											"id": {
												"description": "Unique identifier for the returned document. This ID is only unique within the returned index.",
												"type": "string"
											},
											"type": {
												"description": "Mapping type of the returned document.",
												"type": "string"
											}
										}
									}
								},
								"total": {
									"description": "Number of returned documents.",
									"type": "integer"
								},
								"maxScore": {
									"description": "Highest returned document score.",
									"type": "number"
								}
							}
						},
						"took": {
							"_comment": "found all properties in this level from Elasticsearch API documentation ",
							"description": "Milliseconds it took Elasticsearch to execute the request.",
							"type": "integer"
						},
						"timedOut": {
							"description": "If true, the request timed out before completion; returned results may be partial or empty.",
							"type": "boolean",
							"example": false
						},
						"status": {
							"type": "integer"
						}
					}
				}
			}
		},
		"OperationEventUpdate": {
			"description": "An operation event to update.",
			"properties": {
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"description": {
					"description": "Description of the operation event",
					"type": "string",
					"example": "sample description"
				},
				"label": {
					"description": "Operation event label",
					"type": "string",
					"example": "sample label"
				}
			}
		},
		"PremiseServiceType": {
			"description": "A premise service resource.",
			"properties": {
				"activeAccount": {
					"description": "Whether the associated account is active.",
					"type": "boolean",
					"example": false
				},
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"amiSystemID": {
					"description": "The internal ID of the AMI system associated with this premise.",
					"$ref": "#/definitions/ObjectId"
				},
				"deprecated": {
					"description": "Indicates if the premise service type is deprecated.",
					"type": "boolean",
					"example": false
				},
				"externalID": {
					"description": "",
					"type": "string",
					"example": "sample externalID"
				},
				"retailerID": {
					"description": "The internal ID of the service's associated retailer.",
					"$ref": "#/definitions/ObjectId"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"archived": {
					"$ref": "#/definitions/Archived"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"popOutageReportingSuppressed": {
					"description": "Indicates if public outage portal outage reporting is suppressed for this premise service type.",
					"type": "boolean",
					"example": false
				},
				"aorID": {
					"description": "The internal ID of the associated AOR.",
					"$ref": "#/definitions/ObjectId"
				},
				"meterID": {
					"description": "The external ID of an associated AMI meter.",
					"type": "string",
					"example": "sample meterID"
				},
				"id": {
					"$ref": "#/definitions/ObjectId"
				},
				"recentAMIReadings": {
					"description": "A list of most recent readings received for this premise.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AMIReading"
					}
				},
				"currentCustomerID": {
					"description": "The internal ID of the current customer serviced at the premise.",
					"$ref": "#/definitions/ObjectId"
				},
				"connections": {
					"description": "A history of connections at this premise.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PremiseConnection"
					}
				},
				"phases": {
					"description": "The phases associated with the connection.",
					"type": "string",
					"example": "sample phases"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"potentiallyMisaligned": {
					"description": "Indicates if the premise service type is potentially misaligned. This is based on distance from the associated premise to the associated device.",
					"type": "boolean",
					"example": false
				},
				"premiseID": {
					"$ref": "#/definitions/PremiseID"
				},
				"overriddenValues": {
					"description": "Mapping of field to imported value for fields that have been overridden by the UI",
					"example": {
						"device": "XFMR,X123"
					}
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"priority": {
					"format": "int32",
					"description": "The ordinal as defined for defining priority customers (Medical, Municipal, etc.)",
					"type": "integer",
					"example": "1"
				},
				"deviceID": {
					"description": "The associated device's network model ID.",
					"type": "string",
					"example": "sample deviceID"
				},
				"connected": {
					"description": "Whether the connection is active.",
					"type": "boolean",
					"example": false
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"recentInterruptionCount": {
					"format": "int32",
					"description": "A count of recent interruptions to this premise service.",
					"type": "integer",
					"example": "1"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"serviceTypeID": {
					"description": "The internal ID of the associated service type.",
					"$ref": "#/definitions/ObjectId"
				},
				"recentAMINotifications": {
					"description": "A list of most recent outage/online notifications received for this premise.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AMINotification"
					}
				}
			}
		},
		"JobBulkChangeReturnStatusData": {
			"description": "Bulk Change Return status data",
			"properties": {
				"lastUpdated": {
					"format": "int64",
					"description": "Time in milliseconds since epoch of last updated value in the list of bulk changes.",
					"type": "integer",
					"example": 1503941374348
				},
				"total": {
					"format": "int64",
					"description": "The total number of bulk changes",
					"type": "integer"
				},
				"data": {
					"description": "List of Bulk Change Return statuses",
					"type": "array",
					"items": {
						"$ref": "#/definitions/JobBulkChangeReturnStatus"
					}
				}
			}
		},
		"CallUpdate": {
			"description": "Updates to make to a call.",
			"properties": {
				"callbackContactMethod": {
					"format": "int32",
					"description": "Default callback contact method for the caller. Reference callback contact method in the service type configuration",
					"type": "integer"
				},
				"address": {
					"description": "The address the call originated from.  This is likely to be the premise's address unless it was overridden when the call was taken.",
					"type": "string",
					"example": "1234 Main Street"
				},
				"aorIDs": {
					"description": "A List of AOR IDs for this call. The first AOR in this list is considered the 'Priority AOR'. These in conjunction with the other AORs fields determine which users have jurisdiction over this call.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"notes": {
					"description": "Notes from the call.",
					"type": "string",
					"example": "Caller noted that power is out"
				},
				"changeReason": {
					"$ref": "#/definitions/ChangeReason"
				},
				"plannedEnd": {
					"format": "date-time",
					"description": "The planned end time",
					"type": "string"
				},
				"startedAt": {
					"format": "date-time",
					"description": "The date / time the Call was started.  This can be set by an external system to indicate the call was taken prior to being sent to OMS.  See Service Type configuration for call future / past deadbands and handling of startedAt times too far in the future or past",
					"type": "string"
				},
				"plannedStart": {
					"format": "date-time",
					"description": "The planned start time",
					"type": "string"
				},
				"callbackContactInfo": {
					"$ref": "#/definitions/CallbackContactInfo"
				},
				"callCodeID": {
					"description": "Internal ID of the call code for this call",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"phoneNumber": {
					"description": "The phone number associated with the call.",
					"type": "string",
					"example": "(555) 123-4567"
				},
				"aorID": {
					"description": "(DEPRECATED - Use aorIDs instead) The AOR ID for the call. When querying, this will be the first (priority) AOR ID from the call's AOR IDs. When posting, this field will be ignored if AOR IDs are specified.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"observations": {
					"description": "The observations reported by the caller",
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					}
				},
				"name": {
					"description": "The customer name of the call.",
					"type": "string",
					"example": "Bob Johnson"
				},
				"callbackTypes": {
					"_comment": "making this a referenced field removes the description and examples, need to include in each model",
					"description": "Callback types",
					"type": "array",
					"items": {
						"type": "string",
						"example": "RESOLVED"
					},
					"enum": [
						"RESOLVED"
					]
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				}
			}
		},
		"CustomTableValuesUpdate": {
			"properties": {
				"customTable": {
					"description": "Sample custom table. The key for this can be either the custom field internal id or external label, instead of customTable. Updates to the table will rewrite the entire table, so the entire table needs to be specified",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomFieldValuesUpdate"
					}
				}
			}
		},
		"ServiceTypeIdentifier": {
			"description": "The Service Type Identifier of the resource",
			"type": "string",
			"example": "Electric"
		},
		"CallbackUpdate": {
			"description": "A callback update.",
			"properties": {
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"changeReason": {
					"$ref": "#/definitions/ChangeReason"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				}
			}
		},
		"CrewAssignmentCreate": {
			"description": "A crew assignment resource.",
			"required": [
				"status"
			],
			"properties": {
				"networkModelID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"notes": {
					"description": "Any notes pertaining to the crew assignment",
					"type": "string",
					"example": "sample notes"
				},
				"workTypeID": {
					"description": "Internal ID of the work type of the crew assignmnet.  Defaults to the default work type for the associated job type.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"destination": {
					"description": "Destination for the crew assignment",
					"type": "string",
					"example": "123 Jones Ave"
				},
				"requestedCrewType": {
					"format": "int32",
					"description": "The integer identifier of the crew type requested for the assignment",
					"type": "integer"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"assignedUserName": {
					"description": "User name of the user assigned to the crew assignment",
					"type": "string",
					"example": "sample assignedUserName"
				},
				"crewID": {
					"description": "Internal ID of the crew assigned to this crew assignment",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"extNetworkModelID": {
					"$ref": "#/definitions/NetworkModelExternalID"
				},
				"crewExtID": {
					"description": "The external ID of the crew assigned to this crew assignment",
					"type": "string",
					"example": "CREW-1234"
				},
				"assignedUserID": {
					"description": "Internal ID of the user assigned to the crew assignment",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"destinationField": {
					"$ref": "#/definitions/CrewAssignmentDestinationField"
				},
				"status": {
					"format": "int32",
					"description": "Crew assignment status. See service type configuration for details. This should be set to the head workflow state, the alternate head workflow state, or -1 to use the default initial state",
					"type": "integer",
					"example": -1
				}
			}
		},
		"CustomFieldValuesExt": {
			"properties": {
				"dateTime": {
					"format": "date-time",
					"description": "Sample date-time custom field. The key for this will be the external label of the custom field, instead of dateTime",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"flag": {
					"description": "Sample flag custom field. The key for this will be the external label of the custom field, instead of flag",
					"type": "boolean"
				},
				"dropDownList": {
					"description": "Sample drop down list custom field. The value will be the custom field value label. The key for this will be the external label of the custom field, instead of dropDownList",
					"type": "string"
				},
				"percentage": {
					"format": "float",
					"description": "Sample percentage field. The key for this will be the external label of the custom field, instead of percentage. Only available on system hierarchy components.",
					"type": "number",
					"example": "0.45"
				},
				"numeric": {
					"format": "int32",
					"description": "Sample numeric field. The key for this will be the external label of the custom field, instead of numeric",
					"type": "integer"
				},
				"location": {
					"$ref": "#/definitions/CustomFieldLocation"
				},
				"decimal": {
					"format": "double",
					"description": "Sample decimal field. The key for this will be the external label of the custom field, instead of decimal",
					"type": "number"
				},
				"email": {
					"format": "email",
					"description": "Sample email custom field. The key for this will be the external label of the custom field, instead of email",
					"type": "string",
					"example": "a@b.c"
				},
				"aggregatedValue": {
					"format": "double",
					"description": "Sample aggregated value custom field. The key for this will be the external label of the custom field, instead of aggregatedValue.  Only available on jobs and system hierarchy components.",
					"type": "number",
					"example": "10.0"
				},
				"maskedText": {
					"description": "Sample masked text field. The key for this will be the external label of the custom field, instead of maskedText",
					"type": "string"
				},
				"multiSelect": {
					"description": "Sample multi-select field. The values will be the custom field value labels. The key for this will be the external label of the custom field, instead of multiSelect",
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					}
				},
				"textArea": {
					"description": "Sample text area field. The key for this will be the external label of the custom field, instead of numeric",
					"type": "string",
					"example": "text\narea"
				}
			}
		},
		"DeviceInfoUpdate": {
			"_comment": "only a few of these fields make sense to update",
			"description": "Device Information to create",
			"properties": {
				"address": {
					"description": "The address of the device.",
					"type": "string",
					"example": "987 2nd Street"
				},
				"aorIDs": {
					"description": "List of AOR IDs for the device",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"externalID": {
					"description": "The external ID of the device.  This will typically be the ID that came from the GIS.",
					"type": "string",
					"example": "570_31182856_0_11021755"
				},
				"type": {
					"description": "The type of device. Use deviceInfoType instead",
					"type": "string",
					"enum": [
						"Area",
						"Breaker",
						"Circuit",
						"Feeder",
						"Fuse",
						"Generator",
						"Line",
						"Load",
						"NetworkProtector",
						"Recloser",
						"Region",
						"Source",
						"Sectionalizer",
						"Substation",
						"Switch",
						"Transformer"
					],
					"example": "Load"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"internalID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"substationName": {
					"description": "The name of the device's nominal substation",
					"type": "string",
					"example": "Berklee Sub"
				},
				"name": {
					"description": "The name of the device",
					"type": "string",
					"example": "Load_123"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"feederName": {
					"description": "The name of the device's nominal feeder",
					"type": "string",
					"example": "FDR123"
				},
				"deviceInfoType": {
					"description": "The type of device the job is associated with",
					"type": "string",
					"enum": [
						"AREA",
						"BREAKER",
						"CIRCUIT",
						"FEEDER",
						"FUSE",
						"GENERATOR",
						"LINE",
						"LOAD",
						"NETWORK_PROTECTOR",
						"RECLOSER",
						"REGION",
						"REGULATOR",
						"SECTIONALIZER",
						"SOURCE",
						"SUBSTATION",
						"SWITCH",
						"TRANSFORMER"
					]
				},
				"group": {
					"description": "The group that the device was imported as part of.  This comes from the device extra data import.",
					"type": "string",
					"example": "Group A"
				}
			}
		},
		"HazardModelType": {
			"description": "The type of model the hazard is associated with.",
			"type": "string",
			"enum": [
				"CALL",
				"JOB"
			],
			"example": "CALL"
		},
		"CallbackType": {
			"description": "Call back type",
			"type": "string",
			"enum": [
				"AMI_RESTORATION_VERIFICATION",
				"RESOLVED"
			],
			"example": "RESOLVED"
		},
		"Deprecated": {
			"description": "Whether the resource is deprecated / deleted.",
			"type": "boolean",
			"example": false
		},
		"CreatedByUserName": {
			"description": "The user name of the user that created the resource.",
			"type": "string",
			"example": "Katy Wilson"
		},
		"CrewUpdate": {
			"description": "A crew to update.",
			"properties": {
				"aorIDs": {
					"description": "List of AOR IDs the crew is assigned to. Must have at least one value. These determine which users have jurisdiction over this crew.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"changeReason": {
					"$ref": "#/definitions/ChangeReason"
				},
				"memberUserIDs": {
					"description": "User IDs for the members of this crew",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"avatarFileID": {
					"description": "File ID for the crew avatar",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"active": {
					"description": "Whether the crew is active or not",
					"type": "boolean",
					"example": true
				},
				"externalID": {
					"description": "External Crew ID",
					"type": "string",
					"example": "C12345"
				},
				"crewShiftIDs": {
					"description": "List of crew shifts for this crew. See service type configuration for crew shifts",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"type": {
					"format": "int32",
					"description": "The number value for the type of crew.  To find the localized label, look the value up from the crewTypes in the service type configuration.",
					"type": "integer"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"crewCertificationIDs": {
					"description": "List of crew certifications for this crew. See service type configuration",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"phoneNumber": {
					"description": "Phone number",
					"type": "string",
					"example": "(555) 555-5555"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"name": {
					"description": "Crew name",
					"type": "string",
					"example": "Trunk 66"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"email": {
					"description": "Crew email address",
					"type": "string",
					"example": "a@b.c"
				}
			}
		},
		"CustomerPremiseJobStatus": {
			"description": "A Customer-Premise-Service status response",
			"properties": {
				"outageStatus": {
					"description": "Outage status of the job for this customer premise service, if any",
					"type": "string",
					"enum": [
						"Assumed",
						"Confirmed",
						"Restored",
						"Scheduled"
					],
					"example": "Assumed"
				},
				"etr": {
					"format": "date-time",
					"description": "The date / time the resource was updated.",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"crewDispatched": {
					"description": "Whether there is a crew dispatched to the job for this customer premise service, if any is found.",
					"type": "boolean",
					"example": false
				},
				"crewOnSite": {
					"description": "Whether there is a crew on site at the job for this customer premise service, if any is found.",
					"type": "boolean",
					"example": false
				},
				"customerFound": {
					"description": "Whether the requested customer premise service was found.",
					"type": "boolean",
					"example": false
				},
				"objectID": {
					"description": "The job displayID for this customer premise service",
					"type": "string",
					"example": "J.E.12345"
				}
			}
		},
		"Hazard": {
			"description": "A hazard resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"autoAssociated": {
					"description": "A flag denoting if a hazard is currently auto-associated to a job",
					"type": "boolean",
					"example": false
				},
				"notes": {
					"description": "Notes about the hazard",
					"type": "string",
					"example": "Hazard on the street."
				},
				"deprecated": {
					"$ref": "#/definitions/Deprecated"
				},
				"displayInOV": {
					"desciption": "Whether or not to display in OV.",
					"type": "boolean"
				},
				"networkModelName": {
					"description": "The name of the device.",
					"type": "string",
					"example": "BKR 123"
				},
				"parentAorID": {
					"description": "(DEPRECATED - Use parentAorIDs instead) The internal ID of the aor of the parent Job or Call.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"parentID": {
					"description": "The internal ID of the Call or Job that the hazard is associated with.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"autoAssociatedDeviceInfo": {
					"$ref": "#/definitions/DeviceInfo"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"jobID": {
					"description": "The internal ID of the Job that the hazard is associated with. For Job Hazards, this is the same as parentID. For Call Hazards, this is the same as the Call's jobID.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"activeAt": {
					"format": "date-time",
					"description": "The date / time that the hazard became active.",
					"type": "string"
				},
				"openDurationMs": {
					"format": "int64",
					"description": "How long the hazard has been open in ms",
					"type": "integer",
					"example": "980213"
				},
				"energized": {
					"description": "Whether the hazard's device is currently energized. Uses auto assciated device if device is not specified.",
					"type": "boolean"
				},
				"extNetworkModelID": {
					"description": "The external ID of the device.  This will typically be the ID that came from the GIS.",
					"type": "string",
					"example": "570_31182856_0_11021755"
				},
				"parentAorIDs": {
					"description": "A List of AOR IDs which are on the parent Job or Call that is associated to this hazard. These in conjunction with the other AORs fields determine which users have jurisdiction over this Hazard. These are set by the system and therefore are uneditable from the API",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"closedAt": {
					"format": "date-time",
					"description": "The date/time that the hazard was closed.",
					"type": "string"
				},
				"displayID": {
					"$ref": "#/definitions/DisplayID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"parentModel": {
					"description": "The model type of the parent (job or call)",
					"type": "string",
					"enum": [
						"CALL",
						"JOB"
					]
				},
				"deviceInfoType": {
					"description": "The type of device the hazard is associated with",
					"type": "string",
					"enum": [
						"BREAKER",
						"FUSE",
						"GENERATOR",
						"LINE",
						"LOAD",
						"NETWORK_PROTECTOR",
						"RECLOSER",
						"REGULATOR",
						"SECTIONALIZER",
						"SOURCE",
						"SWITCH",
						"TRANSFORMER"
					]
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"deviceType": {
					"description": "The type of device the hazard is associated with. Use deviceInfoType instead",
					"type": "string",
					"example": "Switch"
				},
				"address": {
					"description": "The address of the hazard.",
					"type": "string",
					"example": "123 Main Street"
				},
				"networkModelID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"parentDisplayID": {
					"description": "The display ID of the Call or Job that the hazard is associated with.",
					"type": "string",
					"example": "JE.0001"
				},
				"jobDisplayID": {
					"description": "The display ID of the Job that the hazard is associated with. For Job Hazards, this is the same as parentDisplayID. For Call Hazards, this is the same as the Call's jobDisplayID.",
					"type": "string",
					"example": "JE.0001"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"hazardTypeID": {
					"description": "A reference to the internal ID of the hazard type of the hazard. This would be found in the Service Type definition.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"deviceInfo": {
					"$ref": "#/definitions/DeviceInfo"
				},
				"fromCrewAssignment": {
					"description": "Whether the hazard was created from a Crew Assignment",
					"type": "boolean",
					"example": false
				},
				"hazardTypeExternalID": {
					"description": "A reference to the external label of the hazard type of the hazard. This would be found in the Service Type definition.",
					"type": "string",
					"example": "brokenPole"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"closed": {
					"description": "Whether the hazard has been closed.",
					"type": "boolean"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"geographicAorIDs": {
					"description": "A List of AOR IDs for the hazard which have been set by association with a work area this hazard's location is within. These in conjunction with the other AORs fields determine which users have jurisdiction over this Hazard.",
					"readOnly": true,
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c099"
					}
				}
			}
		},
		"Retailer": {
			"description": "A retailer resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"lastChangeReason": {
					"$ref": "#/definitions/LastChangeReason"
				},
				"deprecated": {
					"description": "Whether the retailer has been deleted",
					"type": "boolean",
					"example": false
				},
				"active": {
					"description": "Whether the retailer is active",
					"type": "boolean",
					"example": true
				},
				"externalID": {
					"description": "The external ID of the retailer",
					"type": "string",
					"example": "awesomeEnergy"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"name": {
					"description": "Retailer Name",
					"type": "string",
					"example": "Awesome Energy"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"Call": {
			"description": "A call resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"momentary": {
					"description": "true if this call is for a momentary issue",
					"type": "boolean"
				},
				"notes": {
					"description": "Notes from the call.",
					"type": "string",
					"example": "Caller noted that power is out"
				},
				"jobAorIDs": {
					"description": "A List of AOR IDs which are on the job that is associated to this call. These in conjunction with the other AORs fields determine which users have jurisdiction over this call. These are set by the system and therefore are uneditable from the API",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"startedAt": {
					"format": "date-time",
					"description": "The date / time the Call was started.  This can be set by an external system to indicate the call was taken prior to being sent to OMS.  See Service Type configuration for call future / past deadbands and handling of startedAt times too far in the future or past",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"networkModelName": {
					"description": "The network model name associated with the call.  This will likely be the device associated with the customer / premise from the call.",
					"type": "string",
					"example": "Load_1234"
				},
				"plannedStart": {
					"format": "date-time",
					"description": "The planned start time",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"autoAssociatedDeviceInfo": {
					"$ref": "#/definitions/DeviceInfo"
				},
				"causedByCallbackID": {
					"description": "This field will be populated with the callback internal ID if the call was automatically created because of a callback failure.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"jobID": {
					"description": "The internal ID of the associated job.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"aorID": {
					"description": "(DEPRECATED - Use aorIDs instead) The AOR ID for the call. When querying, this will be the first (priority) AOR ID from the call's AOR IDs. When posting, this field will be ignored if AOR IDs are specified.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"fileIds": {
					"type": "array",
					"descriptions": "The internal ids of the files that are attached to the call",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"meterID": {
					"description": "The meter ID for the premise service",
					"type": "string",
					"example": "M-12345"
				},
				"premiseAorID": {
					"description": "The internal ID of the aor of the premise associated to the call.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"canceledFromCallCodeChange": {
					"description": "true if the call was canceled as a result of a call code change.",
					"type": "boolean"
				},
				"deletedFileIDs": {
					"type": "array",
					"descriptions": "The internal ids of the files that have been deleted from the call",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"displayID": {
					"$ref": "#/definitions/DisplayID"
				},
				"activeHazards": {
					"description": "Active hazards for the call",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Hazard"
					}
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"contactMethod": {
					"format": "int32",
					"description": "Internal identifier of the associated contactMethod by which this call was created.",
					"type": "integer",
					"example": 1
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"activeColorationRules": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ColorationRule"
					}
				},
				"leadCall": {
					"description": "Whether or not this call is the lead call.",
					"type": "boolean"
				},
				"lastChangeReason": {
					"$ref": "#/definitions/LastChangeReason"
				},
				"hazardCount": {
					"format": "int32",
					"description": "Number of hazards associated with the call.",
					"type": "integer",
					"example": 1
				},
				"jobDisplayID": {
					"description": "The display ID of the associated job.",
					"type": "string",
					"example": "JE.00001"
				},
				"callerDetailsAltered": {
					"description": "Whether or not the Caller Details have been changed on this call",
					"type": "boolean",
					"example": "false"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"deviceInfo": {
					"$ref": "#/definitions/DeviceInfo"
				},
				"commentCount": {
					"format": "int32",
					"description": "Number of comments associated with the call.",
					"type": "integer",
					"example": 1
				},
				"amiCreated": {
					"description": "true if this call was created by an AMI system",
					"type": "boolean"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"phoneNumber": {
					"description": "The phone number associated with the call.",
					"type": "string",
					"example": "(555) 123-4567"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"customerID": {
					"description": "The internal ID of the customer associated with the call",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"name": {
					"description": "The customer name of the call.",
					"type": "string",
					"example": "Bob Johnson"
				},
				"activeRowColorationRule": {
					"$ref": "#/definitions/ColorationRule"
				},
				"jobTypeID": {
					"description": "The internal ID of the job type of the associated job.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"status": {
					"$ref": "#/definitions/CallStatus"
				},
				"callbackContactMethod": {
					"format": "int32",
					"description": "The enumeration of the contact method for the callback.\r\nReference callback contact method in the service type configuration.",
					"type": "integer"
				},
				"autoAssociated": {
					"description": "A flag denoting if a call is currently auto-associated to a job",
					"type": "boolean",
					"example": false
				},
				"callerIDCountryCode": {
					"description": "Country code of caller ID phone contact. Typically provided by an IVR system. Not editable from UI. Not editable from API after call creation.",
					"type": "string",
					"example": "1"
				},
				"callbackPhoneLocalNumber": {
					"description": "Local number for callback phone contact. Typically provided by an IVR system. Associated Callbacks created for this call will copy this information",
					"type": "string",
					"example": "111-1111"
				},
				"plannedEnd": {
					"format": "date-time",
					"description": "The planned end time",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"amiSystemID": {
					"description": "The internal ID of the ami system associated to the call.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"retailerID": {
					"description": "The internal ID of the retailer associated to the call.  This would be the retailer of the customer that the call was created for.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"callbackContactInfo": {
					"$ref": "#/definitions/CallbackContactInfo"
				},
				"callbackPhoneCountryCode": {
					"description": "Country code for callback phone contact. Typically provided by an IVR system. Associated Callbacks created for this call will copy this information",
					"type": "string",
					"example": ""
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"associatedCallDisplayID": {
					"description": "The display ID of the associated call.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"callCodeID": {
					"description": "Internal ID of the call code for this call",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"hazards": {
					"description": "All hazards for the call",
					"$ref": "#/definitions/Hazards"
				},
				"callerIDAreaCode": {
					"description": "Area code of caller ID phone contact. Typically provided by an IVR system. Not editable from UI. Not editable from API after call creation.",
					"type": "string",
					"example": "111"
				},
				"observations": {
					"description": "The observations reported by the caller",
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					}
				},
				"callbackTypes": {
					"_comment": "making this a referenced field removes the description and examples, need to include in each model",
					"description": "Callback types",
					"type": "array",
					"items": {
						"type": "string",
						"example": "RESOLVED"
					},
					"enum": [
						"RESOLVED"
					]
				},
				"createdFromCallCodeChange": {
					"description": "true if the call was created as a result of a call code change.",
					"type": "boolean"
				},
				"popOutageReport": {
					"description": "true if the call was submitted through the public outage portal.",
					"type": "boolean"
				},
				"externalCustomerID": {
					"$ref": "#/definitions/ExternalCustomerID"
				},
				"startedTime": {
					"format": "date-time",
					"description": "The date / time the Call was started.  This can be set by an external system to indicate the call was taken prior to being sent to OMS.  See Service Type configuration for call future / past deadbands and handling of startedAt times too far in the future or past",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"address": {
					"description": "The address the call originated from.  This is likely to be the premise's address unless it was overridden when the call was taken.",
					"type": "string",
					"example": "1234 Main Street"
				},
				"aorIDs": {
					"description": "A List of AOR IDs for this call. The first AOR in this list is considered the 'Priority AOR'. These in conjunction with the other AORs fields determine which users have jurisdiction over this call.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"comments": {
					"description": "List of all comments made regarding the call",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Comment"
					}
				},
				"networkModelID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"resolvedAt": {
					"format": "date-time",
					"description": "The time at which this call was resolved.",
					"type": "string"
				},
				"restoredAt": {
					"format": "date-time",
					"description": "The time at which this call's premise was restored.",
					"type": "string"
				},
				"premiseID": {
					"$ref": "#/definitions/PremiseID"
				},
				"externalCallCodeID": {
					"description": "External ID of the call code for this call",
					"type": "string",
					"example": "lightsOut"
				},
				"callerIDLocalNumber": {
					"description": "Local number of caller ID phone contact. Typically provided by an IVR system. Not editable from UI. Not editable from API after call creation.",
					"type": "string",
					"example": "111-1111"
				},
				"stillOff": {
					"description": "true if the call was submitted as a result of a customer callback reporting they were still out of power.",
					"type": "boolean"
				},
				"callbackPhoneCityCode": {
					"description": "City code for callback phone contact. Typically provided by an IVR system. Associated Callbacks created for this call will copy this information",
					"type": "string",
					"example": "111"
				},
				"jobAorID": {
					"description": "(DEPRECATED - Use jobAorIDs instead) The internal ID of the associated job's aor.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"callbackPhoneExtension": {
					"description": "Extension for callback phone contact. Typically provided by an IVR system. Associated Callbacks created for this call will copy this information",
					"type": "string",
					"example": "1111"
				},
				"callbackPhoneAreaCode": {
					"description": "Area code for callback phone contact. Typically provided by an IVR system. Associated Callbacks created for this call will copy this information",
					"type": "string",
					"example": "111"
				},
				"callerIDExtension": {
					"description": "Extension of caller ID phone contact. Typically provided by an IVR system. Not editable from UI. Not editable from API after call creation.",
					"type": "string",
					"example": "1111"
				},
				"callerIDCityCode": {
					"description": "City code of caller ID phone contact. Typically provided by an IVR system. Not editable from UI. Not editable from API after call creation.",
					"type": "string",
					"example": "111"
				},
				"restored": {
					"description": "Indicator that the call was created with intention of being associated with an already restored job",
					"type": "boolean"
				},
				"attachmentCount": {
					"format": "int32",
					"description": "The number of attachments on the call",
					"type": "integer"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"activeHazardCount": {
					"$ref": "#/definitions/ActiveHazardCount"
				},
				"geographicAorIDs": {
					"description": "A List of AOR IDs for the call which have been set by association with a work area this call's location is within. These in conjunction with the other AORs fields determine which users have jurisdiction over this call.",
					"readOnly": true,
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c099"
					}
				},
				"externalPremiseID": {
					"$ref": "#/definitions/ExternalPremiseID"
				}
			}
		},
		"CustomerPremiseJobStatusRequest": {
			"description": "A Customer-Premise-Service status request",
			"properties": {
				"customers": {
					"description": "List of Customer Premise Job Status Request Customers",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomerPremiseJobStatusRequestCustomer"
					}
				},
				"serviceTypeIdentifier": {
					"description": "The service type identifier for the service",
					"type": "string",
					"example": "Electric"
				}
			}
		},
		"CustomerPremiseUpdate": {
			"description": "A resource to show customer and premise field overrides of the last import.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"newValue": {
					"nullable": true,
					"description": "The current value of the field. Value type depends on the field type"
				},
				"modelID": {
					"description": "The internal ID of the customer or premise that was updated",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"externalID": {
					"$ref": "#/definitions/ExternalID"
				},
				"modelType": {
					"description": "The type of entity that was updated.",
					"type": "string",
					"enum": [
						"CUSTOMER",
						"PREMISE"
					],
					"example": "CUSTOMER"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"description": "The Service Type Identifier of the premise that was updated. This only applies to premise updates for connection information for a specific service type for a premise",
					"type": "string",
					"example": "Electric"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"field": {
					"description": "The name of the field overridden. For custom fields this will be the internal custom field ID",
					"type": "string",
					"example": "sample field"
				},
				"modelExternalID": {
					"description": "The external ID of the customer or premise that was updated",
					"type": "string",
					"example": "sample modelExternalID"
				},
				"externalLabel": {
					"description": "The external label for custom field updates",
					"type": "string",
					"example": "sample externalLabel"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"oldValue": {
					"nullable": true,
					"description": "The previous value of the field. Value type depends on the field type"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"CallStatus": {
			"description": "Call Status",
			"type": "string",
			"enum": [
				"ACTIVE",
				"RESOLVED",
				"CANCELLED"
			],
			"example": "ACTIVE"
		},
		"CallComment": {
			"allOf": [
				{
					"$ref": "#/definitions/Comment"
				},
				{
					"properties": {
						"modelID": {
							"description": "The internal ID of the call associated with the comment",
							"type": "string",
							"example": "59a1bd89f304f0ef8232c76a"
						}
					}
				}
			],
			"description": "A call comment resource."
		},
		"UpdatedAt": {
			"format": "date-time",
			"description": "The date / time the resource was updated.",
			"type": "string",
			"example": "2018-01-13T10:00:00Z"
		},
		"DeviceIDs": {
			"description": "A map from the ID field name to a list of IDs of that type",
			"properties": {
				"internalID": {
					"description": "A list of device network model ids seperated by a delimiter",
					"type": "string",
					"example": "470,30469640,0,11053301;470,30469640,0,11053347"
				},
				"externalID": {
					"description": "A list of device external ids seperated by a delimiter",
					"type": "string",
					"example": "load_1958;Switch_012"
				},
				"id": {
					"description": "A list of device mongo ids seperated by a delimiter",
					"type": "string",
					"example": "5f21a8e37bdebeaf384ee6bd;5f21a8e37bdebeaf384ee6bd"
				}
			}
		},
		"AssociatedSwitchOrder": {
			"description": "Associated switch order for a job.",
			"properties": {
				"jobID": {
					"description": "Unique hex ID of the job with which the Switch Order is associated.",
					"type": "string",
					"example": "5fea5a82256925b26c524431"
				},
				"externalID": {
					"description": "External ID of the Associated Switch Order, which corresponds to the internal ID of the Switch Order stored by SOM Planner.",
					"type": "string",
					"example": "5fea5a82256925b26c524431"
				},
				"displayID": {
					"description": "Display friendly ID. This ID is shared between OMS and SOM Planner.",
					"type": "string",
					"example": "S.O. 0.001"
				}
			}
		},
		"WorkAreaInfo": {
			"description": "A work area info resource.",
			"properties": {
				"workAreaID": {
					"description": "Internal ID of this work area.",
					"$ref": "#/definitions/ObjectId"
				},
				"workAreaLevelID": {
					"description": "The work area level associated with this work area.",
					"$ref": "#/definitions/ObjectId"
				},
				"primary": {
					"description": "Whether this is a primary work area.",
					"type:": "boolean",
					"example": false
				}
			}
		},
		"PriorityFactor": {
			"description": "A factor used in calculating job priority.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"deprecated": {
					"description": "",
					"type": "boolean",
					"example": false
				},
				"active": {
					"description": "",
					"type": "boolean",
					"example": false
				},
				"externalID": {
					"description": "",
					"type": "string",
					"example": "sample externalID"
				},
				"label": {
					"description": "",
					"type": "string",
					"example": "sample label"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"weighting": {
					"format": "int32",
					"description": "",
					"type": "integer",
					"example": "1"
				},
				"archived": {
					"$ref": "#/definitions/Archived"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"priorityThresholds": {
					"description": "",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PriorityThreshold"
					}
				},
				"factorType": {
					"description": "",
					"$ref": "#/definitions/FactorType"
				},
				"id": {
					"$ref": "#/definitions/ObjectId"
				},
				"fieldID": {
					"description": "",
					"$ref": "#/definitions/Object"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"OMSFile": {
			"description": "A file representation.",
			"properties": {
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"fileName": {
					"description": "The file name.",
					"type": "string",
					"example": "sample fileName"
				},
				"metadata": {
					"$ref": "#/definitions/OMSFileMetadata"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"OverriddenValues": {
			"properties": {}
		},
		"OutagePlan": {
			"description": "Outage Plan Resource",
			"properties": {
				"callbackCount": {
					"format": "int32",
					"description": "The total number of callbacks for the outage plan",
					"type": "integer"
				},
				"activatedPremiseIDs": {
					"description": "The list of premises that are included and activated in the outage plan",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"jobID": {
					"description": "The internal ID of the job the outage plan is associated with.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"plannedOutageTime": {
					"format": "date-time",
					"description": "The planned outage time of the outage plan",
					"type": "string"
				},
				"plannedRestorationTime": {
					"format": "date-time",
					"description": "The planned restoration time of the outage plan",
					"type": "string"
				},
				"callbackStatus": {
					"description": "The calcalation result of all callback status for the outage plan",
					"type": "string",
					"enum": [
						"NONE_CREATED",
						"PARTIALLY_CREATED",
						"PARTIALLY_FAILED",
						"PARTIALLY_FULFILLED",
						"ALL_CREATED",
						"ALL_FAILED",
						"ALL_FULFILLED"
					]
				},
				"deprecated": {
					"$ref": "#/definitions/Deprecated"
				},
				"excludedPremiseIDs": {
					"description": "The list of premises that are excluded from the outage plan",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"displayID": {
					"$ref": "#/definitions/DisplayID"
				},
				"premiseIDs": {
					"description": "The list of premises that are included in the outage plan",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"activated": {
					"description": "Whether the outage plan is activated",
					"type": "boolean"
				},
				"servicePointIDs": {
					"description": "The list of service points that are included in the outage plan",
					"type": "array",
					"items": {
						"$ref": "#/definitions/NetworkModelID"
					}
				}
			}
		},
		"ReturnStatus": {
			"properties": {
				"editViolations": {
					"$ref": "#/definitions/DataEditValidationFailures"
				},
				"returnCode": {
					"description": "The return code",
					"type": "string",
					"enum": [
						"ERROR",
						"FAILURE",
						"SUCCESS",
						"CONFLICT",
						"INVALID",
						"INCONCLUSIVE",
						"PENDING"
					]
				},
				"failureReasons": {
					"$ref": "#/definitions/ModelValidationFailureReasons"
				},
				"linkError": {
					"description": "Type of link error",
					"type": "string",
					"enum": [
						"CIRCULAR",
						"DUPLICATE",
						"GRANDPARENT",
						"LINK_TYPE",
						"MULTIPLE_PARENTS",
						"NO_UPDATES",
						"PARENT_CHILD_OUTAGES",
						"SELF_LINK",
						"SERVER_ERROR",
						"SUCCESS",
						"PARENT_CHILD_ARCHIVED",
						"LINKED_JOB_NO_DEG_ACTION"
					]
				}
			}
		},
		"CallDetail": {
			"description": "Minimal call details, joined to a job.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"externalCustomerID": {
					"$ref": "#/definitions/ExternalCustomerID"
				},
				"restoredAt": {
					"format": "date-time",
					"description": "The time at which this call's premise was restored.",
					"type": "string"
				},
				"premiseID": {
					"$ref": "#/definitions/PremiseID"
				},
				"active": {
					"description": "Whether or not the call is active. Only used when the job is OA-controlled",
					"type": "boolean",
					"example": false
				},
				"startedAt": {
					"format": "date-time",
					"description": "The date / time the Call was started.  This can be set by an external system to indicate the call was taken prior to being sent to OMS.  See Service Type configuration for call future / past deadbands and handling of startedAt times too far in the future or past",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"oaIgnored": {
					"description": "true if the call is ignored by OA",
					"type": "boolean"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"amiCreated": {
					"description": "true if this call was created by an AMI system",
					"type": "boolean"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customerID": {
					"description": "The internal ID of the customer associated with the call",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"displayID": {
					"$ref": "#/definitions/DisplayID"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"CrewShiftLogShiftOnTime": {
			"description": "Structure to provide timestamp for crew on shift api.",
			"properties": {
				"shiftOnTime": {
					"format": "date-time",
					"description": "The time the crew was marked on shift.",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				}
			}
		},
		"DeviceStatus": {
			"description": "Represents the current associated data .",
			"properties": {
				"call": {
					"description": "DEPRECATED: This flag is no longer set",
					"type": "boolean"
				},
				"flag8": {
					"description": "Unused",
					"type": "boolean",
					"example": false
				},
				"flag7": {
					"description": "Unused",
					"type": "boolean",
					"example": false
				},
				"flag6": {
					"description": "Unused",
					"type": "boolean",
					"example": false
				},
				"flag5": {
					"description": "Whether the device is confirmed closed on a predicted outage job.",
					"type": "boolean",
					"example": false
				},
				"flag4": {
					"description": "Whether the device has configured Flag4 priority customers",
					"type": "boolean",
					"example": false
				},
				"flag3": {
					"description": "Whether the device has configured Flag3 priority customers",
					"type": "boolean",
					"example": false
				},
				"flag2": {
					"description": "Whether the devices is included in a predicted outage",
					"type": "boolean",
					"example": true
				},
				"flag1": {
					"description": "Whether an active job or call exists on the device",
					"type": "boolean",
					"example": true
				},
				"job": {
					"description": "Whether an active job or call exists on the device.",
					"type": "boolean",
					"example": true
				},
				"deviceID": {
					"description": "An internal emap device identifier.",
					"type": "string",
					"example": "470,23,100,200"
				},
				"crewAssignment": {
					"description": "DEPRECATED: This flag is no longer set",
					"type": "boolean"
				}
			}
		},
		"CustomerUpdate": {
			"description": "A customer update.",
			"properties": {
				"callbackContactMethod": {
					"format": "int32",
					"description": "Default callback contact method for the customer. Reference callback contact method in the service type configuration",
					"type": "integer"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"phoneNumber": {
					"description": "Customer Phone Number",
					"type": "string",
					"example": "(555) 555-5555"
				},
				"changeReason": {
					"$ref": "#/definitions/ChangeReason"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"name": {
					"description": "Customer name",
					"type": "string",
					"example": "John Doe"
				},
				"callbackTypes": {
					"_comment": "making this a referenced field removes the description and examples, need to include in each model",
					"description": "Callback types",
					"type": "array",
					"items": {
						"type": "string",
						"example": "RESOLVED"
					},
					"enum": [
						"RESOLVED"
					]
				},
				"callbackContactInfo": {
					"$ref": "#/definitions/CallbackContactInfo"
				},
				"group": {
					"description": "Customer Importer Group. Warning - changing the group will likely require a change in the bulk import process",
					"type": "string",
					"example": "sample group"
				}
			}
		},
		"DeviceStatusV2": {
			"description": "Represents the current associated data .",
			"properties": {
				"flag5": {
					"description": "Whether the device is confirmed closed on a predicted outage job.",
					"type": "boolean",
					"example": false
				},
				"flag4": {
					"description": "Whether the device has configured Flag4 priority customers. If not included, the value is false.",
					"type": "boolean",
					"example": false
				},
				"flag3": {
					"description": "Whether the device has configured Flag3 priority customers. If not included, the value is false.",
					"type": "boolean",
					"example": false
				},
				"flag2": {
					"description": "Whether the devices is included in a predicted outage. If not included, the value is false.",
					"type": "boolean",
					"example": true
				},
				"flag1": {
					"description": "Whether an active job or call exists on the device. If not included, the value is false.",
					"type": "boolean",
					"example": true
				},
				"deviceID": {
					"description": "An internal emap device identifier.",
					"type": "string",
					"example": "470,23,100,200"
				}
			}
		},
		"ETRCreate": {
			"description": "The ETR resource used in creating a job",
			"properties": {
				"overridden": {
					"description": "Whether the ETR has been overridden by a manual value. Set to true to prevent auto-etr processing",
					"type": "boolean"
				},
				"value": {
					"format": "date-time",
					"description": "The current manually entered ETR value",
					"type": "string"
				}
			},
			"required": [
				"value"
			]
		},
		"ETR": {
			"description": "A complete existing ETR definition",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"overridden": {
					"description": "Whether the ETR has been overriden by a manual value",
					"type": "boolean"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"autoEtrDisabled": {
					"description": "Whether auto ETR is disabled or not",
					"type": "boolean"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"value": {
					"format": "date-time",
					"description": "The current ETR value",
					"type": "string"
				},
				"autoEtrDisabledBy": {
					"description": "If autoEtrDisabled set, set to the value it is disabled by",
					"type": "string",
					"enum": [
						"SERVICE_TYPE",
						"OPERATION_MODE",
						"AOR"
					]
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"DoNotCallTimes": {
			"description": "A map from day of the week in all caps (eg. TUESDAY) to timespan in which the customer does not want to be called",
			"type": "object",
			"properties": {
				"value": {
					"description": "A list of the time spans in which the customer does not want to be called for this day",
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"start": {
								"description": "The start time of the time span in which the customer does not want to be called in milliseconds. For example, if the user does not want to be called from 02:00 to 07:00, this number would be 7200000 = (2 * 60 * 60 * 1000)",
								"type": "int32",
								"example": "7200000"
							},
							"end": {
								"description": "The end time of the time span in which the customer does not want to be called in milliseconds. For example, if the user does not want to be called from 02:00 to 07:00, this number would be 25200000 = (7 * 60 * 60 * 1000)",
								"type": "int32",
								"example": "25200000"
							}
						}
					}
				},
				"key": {
					"description": "A day of the week in all caps",
					"type": "string",
					"example": "TUESDAY"
				}
			}
		},
		"CrewAssignmentDestinationField": {
			"properties": {
				"modelType": {
					"description": "The model type of the source field",
					"type": "string",
					"enum": [
						"JOB_DEVICE",
						"JOB",
						"LEAD_CALL",
						"LEAD_CREW",
						"LEAD_CREW_ASSIGNMENT"
					]
				},
				"fieldID": {
					"description": "Internal ID of the field to use as a destination source. This field must be a location field.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				}
			}
		},
		"CrewCreate": {
			"description": "A crew to create.",
			"required": [
				"aorIDs"
			],
			"properties": {
				"aorIDs": {
					"description": "List of AOR IDs the crew is assigned to. Must have at least one value. These determine which users have jurisdiction over this crew.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"memberUserIDs": {
					"description": "User IDs for the members of this crew",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"avatarFileID": {
					"description": "File ID for the crew avatar",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"active": {
					"description": "Whether the crew is active or not",
					"type": "boolean",
					"example": true
				},
				"externalID": {
					"description": "External Crew ID.  Must be unique.  If not provided, a random ID will be generated.",
					"type": "string",
					"example": "C12345"
				},
				"crewShiftIDs": {
					"description": "List of crew shifts for this crew. See service type configuration for crew shifts",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"type": {
					"format": "int32",
					"description": "The number value for the type of crew.  To find the localized label, look the value up from the crewTypes in the service type configuration.",
					"type": "integer"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"crewCertificationIDs": {
					"description": "List of crew certifications for this crew. See service type configuration",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"phoneNumber": {
					"description": "Phone number",
					"type": "string",
					"example": "(555) 555-5555"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"name": {
					"description": "Crew name",
					"type": "string",
					"example": "Trunk 66"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"email": {
					"description": "Crew email address",
					"type": "string",
					"example": "a@b.c"
				}
			}
		},
		"DeviceInfoCreate": {
			"description": "Device Information to create",
			"properties": {
				"address": {
					"description": "The address of the device.",
					"type": "string",
					"example": "987 2nd Street"
				},
				"aorIDs": {
					"description": "List of AOR IDs for the device",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"externalID": {
					"description": "The external ID of the device.  This will typically be the ID that came from the GIS.",
					"type": "string",
					"example": "570_31182856_0_11021755"
				},
				"type": {
					"description": "The type of device. Use deviceInfoType instead",
					"type": "string",
					"enum": [
						"Area",
						"Breaker",
						"Circuit",
						"Feeder",
						"Fuse",
						"Generator",
						"Line",
						"Load",
						"NetworkProtector",
						"Recloser",
						"Region",
						"Source",
						"Sectionalizer",
						"Substation",
						"Switch",
						"Transformer"
					],
					"example": "Load"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"internalID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"substationName": {
					"description": "The name of the device's nominal substation",
					"type": "string",
					"example": "Berklee Sub"
				},
				"name": {
					"description": "The name of the device",
					"type": "string",
					"example": "Load_123"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"feederName": {
					"description": "The name of the device's nominal feeder",
					"type": "string",
					"example": "FDR123"
				},
				"deviceInfoType": {
					"description": "The type of device the job is associated with",
					"type": "string",
					"enum": [
						"AREA",
						"BREAKER",
						"CIRCUIT",
						"FEEDER",
						"FUSE",
						"GENERATOR",
						"LINE",
						"LOAD",
						"NETWORK_PROTECTOR",
						"RECLOSER",
						"REGION",
						"REGULATOR",
						"SECTIONALIZER",
						"SOURCE",
						"SUBSTATION",
						"SWITCH",
						"TRANSFORMER"
					]
				},
				"group": {
					"description": "The group that the device was imported as part of.  This comes from the device extra data import.",
					"type": "string",
					"example": "Group A"
				}
			}
		},
		"OpEventStatus": {
			"description": "Operation Event Status",
			"type": "string",
			"enum": [
				"ACTIVE",
				"QA",
				"ARCHIVED",
				"CANCELLED"
			],
			"example": "ACTIVE"
		},
		"JobUpdateLinks": {
			"description": "Job update for links",
			"properties": {
				"addLinks": {
					"description": "List of links to add to the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/LinkCreate"
					}
				},
				"deleteLinks": {
					"description": "List of link ids to delete from the job",
					"type": "array",
					"items": {
						"type": "string"
					},
					"example": [
						"59a1bd89f304f0ef8232c76a"
					]
				}
			}
		},
		"LabeledLocation": {
			"description": "An labeled location resource without an ID.",
			"properties": {
				"gpsLocation": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"label": {
					"description": "Label for the labeled location",
					"type": "string",
					"example": "Possible fault location"
				}
			}
		},
		"Archived": {
			"description": "Whether the resource is archived",
			"$ref": "#/definitions/Boolean"
		},
		"ChangeReason": {
			"description": "The reason for changing a field. This will be required if any edited fields have been configured to require a change reason.",
			"type": "string",
			"example": "Updating prior to storm"
		},
		"DeviceFlagsV2": {
			"description": "A list of device flags.",
			"properties": {
				"deviceStatuses": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DeviceStatusV2"
					}
				},
				"timestamp": {
					"format": "int64",
					"description": "UTC ms since epoch representing when the query was made on the server.",
					"type": "integer",
					"example": "34523345324"
				}
			}
		},
		"CallbackContactInfo": {
			"description": "The callback contact information that was provided.\r\nThis is a text field so it could be a phone number, email, etc",
			"type": "string",
			"example": "(555) 123-5555"
		},
		"PriorityLevel": {
			"description": "A customizable priority level resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"identifier": {
					"format": "int32",
					"description": "",
					"type": "integer",
					"example": "1"
				},
				"color": {
					"description": "The configured color",
					"type": "string",
					"example": "sample color"
				},
				"externalID": {
					"description": "",
					"type": "string",
					"example": "sample externalID"
				},
				"index": {
					"format": "int32",
					"description": "The ordered index value. Unique amongst other priority levels in the same matrix.",
					"type": "integer",
					"example": "1"
				},
				"label": {
					"description": "The configured label",
					"type": "string",
					"example": "sample label"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"archived": {
					"$ref": "#/definitions/Archived"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"id": {
					"$ref": "#/definitions/ObjectId"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"GeoJSONPoint": {
			"description": "GeoJSON Point Resource",
			"properties": {
				"coordinates": {
					"description": "The coordinates of the resource in the format of an array where the first index is the longitude and the second is the latitude.",
					"type": "array",
					"items": {
						"format": "double",
						"type": "number"
					},
					"example": [
						120.09,
						40.00913
					]
				},
				"type": {
					"description": "The type of coordinate provided.  Currently supported types are: POINT",
					"type": "string",
					"example": "POINT"
				}
			}
		},
		"UpdatedByUserName": {
			"description": "The user name of the user that updated the resource.",
			"type": "string",
			"example": "Chris Terry"
		},
		"ActiveHazardCount": {
			"format": "int32",
			"description": "Count of active hazards associated with the resource.",
			"type": "integer",
			"example": 1
		},
		"JobData": {
			"properties": {
				"lastUpdated": {
					"format": "int64",
					"description": "Time in milliseconds since epoch of last updated value in the list of Jobs.",
					"type": "integer",
					"example": 1503941374348
				},
				"total": {
					"format": "int64",
					"description": "The total number of jobs returned",
					"type": "integer"
				},
				"data": {
					"description": "List of Jobs",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Job"
					}
				}
			}
		},
		"NetworkModelOperation": {
			"description": "A network model operation resource.",
			"properties": {
				"createdByUserID": {
					"description": "The internal ID of the user that performed the operation. This will only be populated for OMS user requests",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c769"
				},
				"networkModelExternalID": {
					"$ref": "#/definitions/NetworkModelExternalID"
				},
				"operationSequence": {
					"format": "int64",
					"description": "The sequence number of the operation used in differing between operations with the same operation time.",
					"type": "integer",
					"example": 1
				},
				"regionName": {
					"description": "The name of the region of the device",
					"type": "string",
					"example": "West"
				},
				"nominalStationID": {
					"description": "The ID of the nominal station of the device at the time of the operation",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"systemTime": {
					"format": "date-time",
					"description": "The time the system first processed the operation. For SCADA operations, this the time the SCADA system processed the operation. For non-scada network model operations, this is the time the DMS system processed the change. Otherwise it is the time OMS processed the change.",
					"type": "string"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"fieldTime": {
					"format": "date-time",
					"description": "The field time of the operation. For telemetered operations this is the reported RTU time. For non-telemetered operations, this is the user-entered time of the operation",
					"type": "string"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"format": "date-time",
					"description": "The time the operation was processed by OMS",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"areaID": {
					"description": "The ID of the area of the device",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"aorID": {
					"description": "(DEPRECATED - Use aorIDs instead) The AOR ID for the job. This will be the priority AOR ID from the network model operation's AOR IDs.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"areaName": {
					"description": "The name of the area of the device",
					"type": "string",
					"example": "Central"
				},
				"regionID": {
					"description": "The ID of the region of the device",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"primaryOperationID": {
					"description": "The ID of the primary operation record for this operation. This will only be set for operations that impact the network model topology",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"stationName": {
					"description": "The name of the current station of the deviceat the time of the operation",
					"type": "string",
					"example": "STN001"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"displayID": {
					"$ref": "#/definitions/DisplayID"
				},
				"phases": {
					"description": "The phases affected by the operation.",
					"type": "string",
					"example": "123"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"nominalFeederID": {
					"description": "The ID of the nominal feeder of the device at the time of the operation",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"nominalStationName": {
					"description": "The name of the nominal station of the deviceat the time of the operation",
					"type": "string",
					"example": "STN001"
				},
				"aorIDs": {
					"description": "List of AOR IDs for the network model operation",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"networkModelID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"nominalFeederName": {
					"description": "The name of the nominal feeder of the device at the time of the operation",
					"type": "string",
					"example": "FDR123"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"deviceInfo": {
					"$ref": "#/definitions/DeviceInfo"
				},
				"affectedPremises": {
					"format": "int32",
					"description": "The number of premises impacted by the operation",
					"type": "integer",
					"example": 1
				},
				"operationTime": {
					"format": "date-time",
					"description": "For network model operations, this is the time the DMS system processed the operation. Combined with operationSequence, this can be used to determine the order OMS processed the operation. For user requests, this is the time oms processed the operation.",
					"type": "string"
				},
				"feederID": {
					"description": "The ID of the current feeder of the device at the time of the operation",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"createdByUserName": {
					"description": "The user name of the user that performed the operation. This will be the OMS user name for an OMS user request or the DMS user that performed the operation for a network model operation.",
					"type": "string",
					"example": "Katy Wilson"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"operationType": {
					"description": "The type of operation performed.",
					"type": "string",
					"enum": [
						"DEVICE_OPEN",
						"DEVICE_CLOSE",
						"SOURCE_ON",
						"SOURCE_OFF",
						"DEVICE_ADDITION",
						"DEVICE_REMOVAL",
						"LINE_CUT_ADDITION",
						"LINE_CUT_REMOVAL",
						"VERIFY_OUTAGE",
						"RESTORE_OUTAGE",
						"ADD_PREMISES",
						"RESTORE_PREMISES",
						"PREMISE_UPDATE"
					]
				},
				"feederName": {
					"description": "The name of the current feeder of the device at the time of the operation",
					"type": "string",
					"example": "FDR123"
				},
				"device": {
					"description": "The operation's associated device Name",
					"type": "string",
					"example": "sample device"
				},
				"telemetered": {
					"description": "true if the operation was from a telemetered source",
					"type": "boolean"
				},
				"stationID": {
					"description": "The ID of the current station of the device at the time of the operation",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				}
			}
		},
		"Job": {
			"description": "Job resource representation",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"damageRecords": {
					"description": "A list of all damage records associated with job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DamageRecord"
					}
				},
				"momentary": {
					"description": "true if the job duration is less than the momentary threshold",
					"type": "boolean"
				},
				"affectedByTemporaryDevice": {
					"description": "true if the job has been affected by a temporary device addition or removal",
					"type": "boolean"
				},
				"associatedSwitchOrders": {
					"description": "List of switch orders associated with the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssociatedSwitchOrder"
					}
				},
				"damageRecordCount": {
					"format": "int32",
					"description": "Number of damage records associated with job.",
					"type": "integer"
				},
				"operationEventIDs": {
					"description": "The operation events the job is associated with",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"networkModelName": {
					"description": "The name of the device.",
					"type": "string",
					"example": "BKR 123"
				},
				"resolution": {
					"format": "int32",
					"description": "The resolution of the job",
					"type": "integer"
				},
				"externalLeadCallCodeID": {
					"description": "The external ID of the lead call's call code",
					"type": "string",
					"example": "lightsOut"
				},
				"qa": {
					"description": "true if the job is in a QA state",
					"type": "boolean"
				},
				"jobLinkCount": {
					"format": "int32",
					"description": "Number of other jobs that are linked to this job.",
					"type": "integer",
					"example": 1
				},
				"interruptingStepToPremiseIDsMap": {
					"description": "A list of Premise IDs that have verification for interruption.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PremiseID"
					}
				},
				"outageStepIDs": {
					"description": "A list of IDs for the outage steps of the job",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"allowOaPremiseOperations": {
					"description": "If the job energization status is PREDICTED or VERIFIED, this will be true if a user can request a verify premises or restore premises user request",
					"type": "boolean"
				},
				"areaName": {
					"description": "The name of the currently connected area for the job.  Only applies to Outage type jobs.",
					"type": "string",
					"example": "Area_1"
				},
				"outageType": {
					"description": "(DEPRECATED) The classification of outage for the job",
					"type": "string",
					"enum": [
						"FORCED_OUTAGE",
						"OUTAGE",
						"PLANNED_INTERRUPTION",
						"PLANNED_OUTAGE",
						"UNPLANNED_INTERRUPTION"
					]
				},
				"outagePlanCount": {
					"format": "int32",
					"description": "Number of outage plans for the job",
					"type": "integer",
					"example": 1
				},
				"nominalFeeder": {
					"description": "The name of the nominal feeder of the job device",
					"type": "string",
					"example": "FDR 5"
				},
				"outageStepsCount": {
					"format": "int32",
					"description": "Number of outage steps for the job",
					"type": "integer",
					"example": 1
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"outageSubtypeID": {
					"description": "Reference to the Outage Subtype of the job.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"activeHazards": {
					"description": "List of active hazards for the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Hazards"
					}
				},
				"activeJobHazardCount": {
					"format": "int32",
					"description": "The number of active job hazards (hazards added directly to the job) for the job",
					"type": "integer"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"customerInterruptedDurationMs": {
					"format": "int64",
					"description": "Total customer interrupted duration in ms (CMI * 60 * 1000)",
					"type": "integer",
					"example": "980213"
				},
				"nominalSubstation": {
					"description": "The name of the nominal substation of the job device",
					"type": "string",
					"example": "Brookdale Sub"
				},
				"outageStepAmiRestorationThresholdMet": {
					"description": "Indication of whether outage steps have met the AMI restoration threshold.  True only if all steps have met the threshold.",
					"type": "boolean",
					"example": false
				},
				"createdOperationModeID": {
					"description": "The operation mode that was active at the time of creation for the job",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"deviceType": {
					"description": "The type of device the job is associated with. Use deviceInfoType instead",
					"type": "string",
					"example": "Switch"
				},
				"activeColorationRules": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ColorationRule"
					}
				},
				"associatedScadaAlarms": {
					"description": "List of scada alarms associated with the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ScadaAlarm"
					}
				},
				"currentAffectedKVA": {
					"format": "float",
					"description": "The total kVA of all load phases currently affected by the job",
					"type": "number"
				},
				"priorityHazardDisplayID": {
					"description": "The display ID of the highest priority hazard for the job",
					"type": "string",
					"example": "HE.0001"
				},
				"totalAffectedKVA": {
					"format": "float",
					"description": "The total kVA of all loads affected by the job",
					"type": "number"
				},
				"validMeterRestorationNotifReceivedPercentage": {
					"format": "double",
					"description": "The ratio of premises for which an AMI restoration notification was received to all premises with a valid meter.",
					"type": "number",
					"example": 0.75
				},
				"currentAffected": {
					"format": "int32",
					"description": "The current number of customers affected by the job.",
					"type": "integer"
				},
				"callAttachmentCount": {
					"format": "int32",
					"description": "The number of attachments on associated calls",
					"type": "integer"
				},
				"callIDs": {
					"type": "array",
					"descriptions": "The internal ids of calls associated with the job",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"priority": {
					"$ref": "#/definitions/Priority"
				},
				"calculatedETRComponentTimes": {
					"description": "A mapping of ETR component IDs to the calculated amount of time (in ms) spent in the components",
					"example": {
						"59a1bd89f304f0ef8232c769": 980213
					}
				},
				"commentCount": {
					"format": "int32",
					"description": "The number of comments on the job",
					"type": "integer"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"leadCrewName": {
					"description": "The name of the crew associated with the lead assignment",
					"type": "string"
				},
				"outageStepOnOperationUncommanded": {
					"description": "Indication of whether outage steps have an on operation that was uncommanded.  True if any outage step has an uncommanded on operation.",
					"type": "boolean",
					"example": false
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"leadCrewExternalID": {
					"description": "The external ID of the crew associated with the lead assignment",
					"type": "string",
					"example": "C-00001"
				},
				"energizationStatus": {
					"description": "The OA status for the job",
					"type": "string",
					"enum": [
						"PREDICTED",
						"VERIFIED",
						"RESTORATION_VERIFICATION",
						"RESTORED",
						"CANCELLED",
						"MERGED",
						"NONE",
						"SINGLE_AMI_CALL_CANCELLED",
						"PARTIALLY_RESTORED",
						"PENDING_UPSTREAM_RESTORATION",
						"ALL_CALLS_CANCELLED",
						"OA_IGNORED",
						"RESTORATION_VERIFICATION_FAILED"
					]
				},
				"outageStepTestModeRestoration": {
					"description": "Indication of whether outage steps were restored in test mode.  True if any outage step was restored in test mode.",
					"type": "boolean",
					"example": false
				},
				"allowOaDeviceOperations": {
					"description": "If the job energization status is PREDICTED or VERIFIED, this will be true if a user can request a verify device or restore device user request",
					"type": "boolean"
				},
				"feederName": {
					"description": "The name of the currently connected feeder for the job.  Only applies to Outage type jobs.",
					"type": "string",
					"example": "FDR1"
				},
				"initialEnergizationStatus": {
					"description": "The initial OA status for the job",
					"type": "string",
					"enum": [
						"PREDICTED",
						"VERIFIED",
						"NONE"
					]
				},
				"activeRowColorationRule": {
					"$ref": "#/definitions/ColorationRule"
				},
				"status": {
					"$ref": "#/definitions/Status"
				},
				"validMeterAffectedPercentage": {
					"format": "double",
					"description": "The ratio of premises on a job which have a valid meter to all premises on the job.",
					"type": "number",
					"example": 0.75
				},
				"etrUpdatedAt": {
					"format": "date-time",
					"description": "The time the ETR value was last updated",
					"type": "string"
				},
				"totalAffectedLoads": {
					"format": "int32",
					"description": "The total number of loads affected by the outage",
					"type": "integer"
				},
				"callCount": {
					"format": "int32",
					"description": "The current number of calls associated to the job",
					"type": "integer"
				},
				"validMeterOutageNotifReceivedPercentage": {
					"format": "double",
					"description": "The ratio of premises for which an AMI call was received to all premises with a valid meter.",
					"type": "number",
					"example": 0.75
				},
				"etrPublicationSource": {
					"description": "The name of the current source of the job's published ETR",
					"type": "string"
				},
				"outageStepMomentary": {
					"description": "Indication of whether the any outage steps for the job were momentary.  True if any outage step was momentary.",
					"type": "boolean",
					"example": false
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"hazards": {
					"description": "List of hazards associated with the job",
					"$ref": "#/definitions/Hazards"
				},
				"priorityHazardID": {
					"description": "The ID of the highest priority hazard for the job",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"etrInternalPublished": {
					"description": "If the etr is internally published.",
					"type": "boolean"
				},
				"viewed": {
					"description": "Whether the job details page for the job has been viewed",
					"type": "boolean",
					"example": false
				},
				"outagePlans": {
					"description": "List of outage plans for the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OutagePlan"
					}
				},
				"geographicAorIDsAtTimeOfUserOverride": {
					"description": "The list of Geographic AOR IDs at the time of the most recent AORs override. If the AORs for this job are not overridden this will be null. This field is read only",
					"readOnly": true,
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c099"
					}
				},
				"hasUserOverriddenAors": {
					"description": "True if the aorIDs field has been overridden by a user, false otherwise. If set to false and updated to true, the system will stop re-calculating the aorIDs field when system managed AORs change (via reprediction/location change/etc.). If true and updated to false, the system will take over calculating the aorIDs field again based on the device/location/etc. of the job.",
					"type": "boolean"
				},
				"assignedUserID": {
					"description": "The internal ID of the user assigned to the Job.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"phases": {
					"description": "The phase identifiers of the affected device for this job",
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer",
						"example": 1
					}
				},
				"amiRestorationNotifsByPremiseID": {
					"description": "Mapping of premise ID to restoration notifications received for the premise for this outage step",
					"example": {
						"59a1bd89f304f0ef8232c76a": [
							"59a1bd89f304f0ef8232c76a",
							"59a1bd89f304f0ef8232c76b"
						]
					}
				},
				"address": {
					"description": "The address of the job.",
					"type": "string",
					"example": "123 Main Street"
				},
				"networkModelID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"associatedLocations": {
					"description": "List of locations associated with the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssociatedLocation"
					}
				},
				"outageSteps": {
					"description": "List of outage steps for the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OutageStep"
					}
				},
				"initialCallCodeID": {
					"description": "The call code internal id for the initial call for this job",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"outageCondition": {
					"description": "If applicable, a special model condition for the job.",
					"type": "string",
					"enum": [
						"PREMISE_NOT_CONNECTED",
						"LOAD_NOT_IN_MODEL",
						"LOAD_DEENERGIZED",
						"POSSIBLE_OVER_PREDICTION",
						"SINGLE_CUSTOMER_CANCELED",
						"SINGLE_CUSTOMER_RESTORED",
						"SINGLE_CUSTOMER_PING_ONLINE"
					],
					"example": "PREMISE_NOT_CONNECTED"
				},
				"priorityCustomers": {
					"description": "IDs of priority customers affected by the job",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"leadCallID": {
					"description": "The internal ID of the lead call",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"customerInterruptedDurationMsDB": {
					"format": "int64",
					"description": "Total customer interrupted duration as of the most recent update to the outage steps, in ms (CMI * 60 * 1000)",
					"type": "integer",
					"example": "980213"
				},
				"userManagedAorIDs": {
					"description": "(DEPRECATED : This field has been deprecated and therefore will have no functional affect if set, override the aorIDs field instead) A List of AOR IDs for the job which have been set by users rather than the system.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c099"
					}
				},
				"calls": {
					"description": "List of calls associated with the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CallDetail"
					}
				},
				"outageStepOffOperationUncommanded": {
					"description": "Indication of whether outage steps have an off operation that was uncommanded.  True if any outage step has an uncommanded off operation.",
					"type": "boolean",
					"example": false
				},
				"assignedUserName": {
					"description": "The user name of the user assigned to the job.",
					"type": "string",
					"example": "Jane"
				},
				"outagePlanActivated": {
					"description": "Indication of whether one or more outage plans on the job are activated.",
					"type": "boolean",
					"example": false
				},
				"premisesWithAMICallCount": {
					"format": "int32",
					"description": "Number of premises for which an AMI call was received.",
					"type": "integer",
					"example": 32
				},
				"lastTransitionedAt": {
					"$ref": "#/definitions/LastTransitionedAt"
				},
				"networkModelExternalID": {
					"$ref": "#/definitions/NetworkModelExternalID"
				},
				"overrideLeadLocationSource": {
					"description": "If set to True, the leadLocationSource can be manually specified to a specific source and will not follow the jobLeadLocationPriority stored on the ServiceType. Otherwise, the leadLocationSource will be determined by the jobLeadLocationPriority.",
					"type": "boolean",
					"example": false
				},
				"etrExpirationStatus": {
					"description": "The ID of the published ETR expiration status",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"notes": {
					"description": "Notes to include with the job",
					"type": "string",
					"example": "The transformer is on fire"
				},
				"outageStepRestorationVerificationSkipped": {
					"description": "Indication of whether outage steps skipped restoration verification.  True if any outage step skipped restoration verification.",
					"type": "boolean",
					"example": false
				},
				"longestHazardDuration": {
					"format": "int64",
					"description": "The longest duration of any hazard for the job",
					"type": "integer",
					"example": "980213"
				},
				"nominalStationID": {
					"description": "The ID of the nominal substation for the job device",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"leadCallCodeID": {
					"description": "The internal ID of the lead call's call code",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"validMeterAffected": {
					"format": "int32",
					"description": "The total number of premises on a job which have a valid meter.",
					"type": "integer"
				},
				"publishedEtrExtensionCount": {
					"format": "int32",
					"description": "The number of times the Published ETR has been extended",
					"type": "integer",
					"example": "7"
				},
				"priorityCallIDs": {
					"type": "array",
					"descriptions": "The internal ids of priority calls associated with the job",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"outageStepRestorationVerificationFailed": {
					"description": "Indication of whether outage steps failed restoration verification.  True if any outage step failed restoration verification.",
					"type": "boolean",
					"example": false
				},
				"amiRestorationThresholdMet": {
					"description": "true if the AMI restoration threshold has been met",
					"type": "boolean"
				},
				"areaID": {
					"description": "The ID of the currently connected area for the job.  Only applies to Outage type jobs.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"aorID": {
					"description": "(DEPRECATED - Use aorIDs instead) The AOR ID for the job. When querying, this will be the priority AOR ID from the job's AOR IDs. When posting, this field will be ignored if AOR IDs are specified.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"fileIds": {
					"type": "array",
					"descriptions": "The internal ids of the files that are attached to the job",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"predictedDevicesConfirmedClosed": {
					"description": "Device IDs of the predicted devices confirmed closed for this job.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/NetworkModelID"
					}
				},
				"substation": {
					"description": "The current substation of the affected device for the job",
					"type": "string",
					"example": "sample substation"
				},
				"hasOverriddenLocation": {
					"description": "True if the Location field has been overridden by a user",
					"type": "boolean"
				},
				"links": {
					"description": "A list of links associated with the Job.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Link"
					}
				},
				"deletedFileIDs": {
					"type": "array",
					"descriptions": "The internal ids of the files that have been deleted from the job",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"displayID": {
					"$ref": "#/definitions/DisplayID"
				},
				"locked": {
					"description": "Whether the job is locked at the current extent",
					"type": "boolean",
					"example": false
				},
				"deviceInfoType": {
					"description": "The type of device the job is associated with",
					"type": "string",
					"enum": [
						"BREAKER",
						"FUSE",
						"GENERATOR",
						"LINE",
						"LOAD",
						"NETWORK_PROTECTOR",
						"RECLOSER",
						"REGULATOR",
						"SECTIONALIZER",
						"SOURCE",
						"SWITCH",
						"TRANSFORMER"
					]
				},
				"callHazardCount": {
					"format": "int32",
					"description": "The number of call hazards for the job",
					"type": "integer"
				},
				"leadAssignmentLocked": {
					"description": "true if the lead assignment is locked",
					"type": "boolean"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"nominalFeederID": {
					"description": "The ID of the nominal feeder for the job device",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"etr": {
					"$ref": "#/definitions/ETR"
				},
				"lastChangeReason": {
					"$ref": "#/definitions/LastChangeReason"
				},
				"currentAffectedLoads": {
					"format": "int32",
					"description": "The current number of loads currently affected by the job",
					"type": "integer"
				},
				"networkModelType": {
					"format": "int32",
					"description": "The device type of the job. See service type configuration for labels",
					"type": "integer",
					"example": 0
				},
				"leadAssignmentID": {
					"description": "The internal ID of the lead crew assignment",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"hazardCount": {
					"format": "int32",
					"description": "The total number of hazards for the job",
					"type": "integer"
				},
				"highestCustomerPriorityTypeID": {
					"description": "The highest priority type ID of all affected customers",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"updatedByUserID": {
					"type": "string",
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"crewRestoreTime": {
					"format": "date-time",
					"description": "The time this job was restored by a crew.",
					"type": "string"
				},
				"leadCallLocked": {
					"description": "Whether the lead call has been locked so that no further changes will occur.",
					"type": "boolean"
				},
				"deviceInfo": {
					"$ref": "#/definitions/DeviceInfo"
				},
				"crewAssignmentCount": {
					"format": "int32",
					"description": "The total number of crew assignments for the job",
					"type": "integer"
				},
				"feederID": {
					"description": "The ID of the currently connected feeder for the job.  Only applies to Outage type jobs.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"priorityHazardLabel": {
					"description": "The label of the highest priority hazard for the job",
					"type": "string",
					"example": "Line Down"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"etrStatus": {
					"description": "The current status of the job's published ETR",
					"type": "string",
					"enum": [
						"AUTOMATIC",
						"DISABLED",
						"INTERNAL",
						"OVERRIDDEN"
					]
				},
				"runningOutageDurationMs": {
					"format": "int64",
					"description": "The duration of the current outage in ms",
					"type": "integer",
					"example": "980213"
				},
				"totalAffected": {
					"format": "int32",
					"description": "The total number of premises affected by the job",
					"type": "integer"
				},
				"activeDamageRecords": {
					"description": "A list of active damage records associated with the job.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DamageRecord"
					}
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"activeCallHazardCount": {
					"format": "int32",
					"description": "The number of active call hazards for the job",
					"type": "integer"
				},
				"systemAorIDsAtTimeOfUserOverride": {
					"description": "The list of System AOR IDs at the time of the most recent AORs override. If the AORs for this job are not overridden this will be null. This field is read only",
					"readOnly": true,
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c099"
					}
				},
				"systemAorIDs": {
					"description": "A List of AOR IDs for the job which have been set by by the system. Set on job creation or via the AORs on devices which are outaged under this job. These in conjunction with the other AORs fields determine which users have jurisdiction over this Job.",
					"readOnly": true,
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c099"
					}
				},
				"activeDamageRecordCount": {
					"format": "int32",
					"description": "Number of active damage records associated with job",
					"type": "integer"
				},
				"jobTypeID": {
					"description": "Reference to the Job Type of the job.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"verifiedTime": {
					"format": "date-time",
					"description": "The time the job was verified",
					"type": "string"
				},
				"leadCrewID": {
					"description": "The internal ID of the crew associated with the lead assignment",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"stationID": {
					"description": "The ID of the currently connected station for the job.  Only applies to Outage type jobs.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"lastMeterPingOnlinePercentage": {
					"format": "float",
					"description": "The percentage of meter which responded as online during the last meter ping request. Should be a number from 0 to 1 where 0 is 0% and 1 is 100%",
					"type": "number"
				},
				"transitionHistory": {
					"$ref": "#/definitions/TransitionHistory"
				},
				"energizationStatusUpdatedAt": {
					"format": "date-time",
					"description": "The time the OA status for the job was last updated",
					"type": "string"
				},
				"leadLocationSource": {
					"description": "String enumeration of where the the lead location data was taken from. In order to change this value, overrideLeadLocationSource must be set to true. Also, in order to update the leadLocation, this must be set to 'CUSTOM_SOURCE'",
					"type": "string",
					"enum": [
						"CALL",
						"DEVICE",
						"JOB",
						"PREMISE",
						"CUSTOM_SOURCE"
					],
					"example": "JOB"
				},
				"regionName": {
					"description": "The name of the currently connected region for the job.  Only applies to Outage type jobs.",
					"type": "string",
					"example": "Region_1"
				},
				"premisesWithAMIRestorationNotifCount": {
					"format": "int32",
					"description": "Number of premises for which an AMI restoration notification was received.",
					"type": "integer",
					"example": 32
				},
				"title": {
					"description": "Title for the job",
					"type": "string",
					"example": "Replace transformer X123"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"outageStepOnTime": {
					"format": "date-time",
					"description": "The on time of the latest outage step",
					"type": "string"
				},
				"activeCallIDs": {
					"type": "array",
					"descriptions": "The internal ids of active calls associated with the job",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"leadLocation": {
					"$ref": "#/definitions/LabeledLocation"
				},
				"regionID": {
					"description": "The ID of the currently connected region for the job.  Only applies to Outage type jobs.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"networkModelOperations": {
					"description": "Network Model and user operations that have outaged or restored customers for this job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/NetworkModelOperation"
					}
				},
				"observations": {
					"description": "The observations reported by all callers",
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					}
				},
				"outageStepOffTime": {
					"format": "date-time",
					"description": "The off time of the earliest outage step",
					"type": "string"
				},
				"stationName": {
					"description": "The name of the currently connected station for the job.  Only applies to Outage type jobs.",
					"type": "string",
					"example": "Station_1"
				},
				"currentOpenPhases": {
					"description": "The phase identifiers that are currently open of the affected device for this job",
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer",
						"example": 1
					}
				},
				"associatedWorkAreas": {
					"description": "A list of work areas associated with the job.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/WorkArea"
					}
				},
				"publishedEtrUpdatedAt": {
					"format": "date-time",
					"description": "The time the Published ETR value was last updated",
					"type": "string"
				},
				"jobAttachmentCount": {
					"format": "int32",
					"description": "The number of attachments on the job",
					"type": "integer"
				},
				"leadCallDisplayID": {
					"description": "The display ID of the lead call",
					"type": "string"
				},
				"aorIDs": {
					"description": "A List of AOR IDs that determines which users have jurisdiction over this job. By default, this will be set by the system to be the combined set of the systemAorIDs and geographicAorIDs. However, this can be overridden by a user and then will no longer be recalculated by the system. See the associated hasUserOverriddenAors field. The first AOR in this list is considered the 'Priority AOR'.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"comments": {
					"description": "List of all comments made regarding the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Comment"
					}
				},
				"primaryWorkAreas": {
					"description": "List of primary work areas for a job.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/WorkArea"
					}
				},
				"priorityCallCodeID": {
					"description": "The call code internal id for the highest priority call code for the mapped to this job",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"crewVerifyTime": {
					"format": "date-time",
					"description": "The time this job was verified by a crew.",
					"type": "string"
				},
				"start": {
					"format": "date-time",
					"description": "The job start time",
					"type": "string"
				},
				"outageUniqueCustomerCallsReceivedPercentage": {
					"format": "double",
					"description": "The ratio of unique customer calls received for an outage including AMI call to total affected.",
					"type": "number",
					"example": 0.75
				},
				"leadAssignmentDisplayID": {
					"description": "The display ID of the lead crew assignment",
					"type": "string"
				},
				"externalWorkOrderID": {
					"description": "An ID used for tracking in an external system",
					"type": "string"
				},
				"jobHazardCount": {
					"format": "int32",
					"description": "The number of job hazards (hazards added directly to the job) for the job",
					"type": "integer"
				},
				"singleAmiPredictedCustomerOutage": {
					"description": "true if this job only has a single call originating from an AMI system, affects a single customer, and is predicted. If system is so configured, this job may be automatically canceled",
					"type": "boolean"
				},
				"activeCrewAssignmentCount": {
					"format": "int32",
					"description": "The number of active crew assignments for the job",
					"type": "integer"
				},
				"publishedEtr": {
					"$ref": "#/definitions/ETR"
				},
				"voltage": {
					"format": "double",
					"description": "The nominal operating voltage in kV for the job",
					"type": "number",
					"example": "1.1"
				},
				"outageAffected": {
					"format": "int32",
					"description": "The number of premises affected by any outage steps on the job.",
					"type": "integer"
				},
				"testMode": {
					"description": "true if the job is in test mode",
					"type": "boolean"
				},
				"leadAssignmentStatus": {
					"format": "int32",
					"description": "The status of the lead crew assignment",
					"type": "integer"
				},
				"priorityPremiseServiceTypes": {
					"description": "IDs of priority premise service types affected by the job",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"attachmentCount": {
					"format": "int32",
					"description": "The number of attachments on the job and associated calls",
					"type": "integer"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"otherAffected": {
					"format": "int32",
					"description": "The number of premises affect by the job, which are unaffected by any outage steps.",
					"type": "integer"
				},
				"elapsedETRComponentTimes": {
					"description": "A mapping of ETR component IDs to the previous amount of time (in ms) spent in the components",
					"example": {
						"59a1bd89f304f0ef8232c769": 980213
					}
				},
				"publishedEtrChangeCount": {
					"format": "int32",
					"description": "The number of times the Published ETR has been changed by either the system or a user",
					"type": "integer",
					"example": "7"
				},
				"activeHazardCount": {
					"format": "int32",
					"description": "The total number of active hazards for the job",
					"type": "integer"
				},
				"geographicAorIDs": {
					"description": "A List of AOR IDs for the job which have been set by association with a work area this job's location is within. These in conjunction with the other AORs fields determine which users have jurisdiction over this Job.",
					"readOnly": true,
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c099"
					}
				}
			}
		},
		"UserRequest": {
			"description": "User Request Result Response",
			"properties": {
				"result": {
					"description": "Request result</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PENDING: Request is still pending</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SUCCESS: Request processed successfully</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FAILURE: Request processing failed</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INCONCLUSIVE: Request processing complete, result unknown</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
					"type": "string"
				},
				"failureReason": {
					"description": "Reason request failed</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALREADY_DISABLED: Already disabled</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALREADY_ENABLED: Already enabled</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DEVICE_CLOSED_ENERGIZED: Device is closed and energized</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DEVICE_ENERGIZED: Device is energized</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DEVICE_NOT_CLOSED: Device not closed</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DEVICE_NOT_CLOSED_ENERGIZED: Device not closed and energized</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DEVICE_NOT_ENERGIZED: Device not energized</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DEVICE_NOT_IN_NETWORK_MODEL: Device not in network model</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INCLUDES_ALL_PREMISES_FROM_LOCKED_JOB: The request would remove all premises from a locked job</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INCLUDES_ALL_PREMISES_FROM_VERIFIED_JOB: The request would remove all premises from a verified job</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INVALID_DEVICE: Invalid device</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INVALID_EXTENT: Invalid extent</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INVALID_PHASES: Invalid phases</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INVALID_PREMISE: Invalid premises</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INVALID_REQUEST: Invalid request</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INVALID_SOURCE: Invalid source</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INVALID_STEP: Invalid step</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INVALID_STEP_STATUS: Invalid step status</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JOB_NOT_FOUND: Job not found</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JOB_NOT_IN_TEST_MODE: Job not in test mode</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JOB_NOT_PREDICTED: Job not predicted</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JOB_NOT_VERIFIED: Job not verified</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JOB_OUT_OF_DATE: Job out of date</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JOB_PREDICTED: Job is predicted</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JOB_TYPE_NOT_FOUND: Job type not found</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOCK_FAILURE: Failed to lock job</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MERGE_ACTIVE_TO_RESTORED: Cannot merge an active job to a restored job</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MERGE_GENERAL_MOMENTARY_INCONSISTENT: Unable to merge a non-general momentary to a general momentary</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MERGE_TEST_MODE_INCONSISTENT: Job have different test mode states</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MERGE_TO_CUSTOMER_SECONDARY: Unable to merge higher level outage to a customer or secondary outage</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MERGE_TO_PREDICTED: Cannot merge an outage job to a predicted job</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MERGE_TO_SELF: Cannot merge a job to itself</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MULTIPLE_ISLANDS: Premises are in multiple islands</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NO_AFFECTED_PREMISES: No affected premises</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NO_COMMON_UPSTREAM_DEVICE: No common upstream device found. Generally this means the device is in the area of a loop</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NO_JOB_DEVICE: Job does not have an associated device</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NO_JOB_SPECIFIED: Job not specified</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NO_JOBS_FOUND: No jobs found</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NO_STEPS_FOUND: No applicable outage steps found</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OTHER_JOB_NOT_FOUND: Other job not found</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OTHER_JOB_NOT_VERIFIED: Other job not verified</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OTHER_JOB_PREDICTED: Other job predicted</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OTHER_JOBS_NOT_SPECIFIED: Other jobs not specified</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUTAGE_WORKFLOW_NOT_FOUND: Outage workflow not found</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PLANNED_OUTAGE_MERGE: Cannot merge a planned outage into another outage</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PREMISE_LOAD_ENERGIZED: The load for a requested premise is energized</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PREMISE_LOAD_NOT_ASSOCIATED: The load for a requested premise is not associated with the job</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PREMISE_NOT_ACTIVATED: Premise is not part of an active outage plan</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOAD_ENERGIZED: The load for a requested premise is energized</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PREMISE_NOT_FOUND: One or more of the specified premises could not be found</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PREMISE_OUTAGES: A requested premise is already part of an active outage</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PREMISE_VERIFIED_ON_JOB: A requested premise is already part of a verified outage step for the job</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PREMISE_VERIFIED_ON_OTHER_CUSTOMER_SECONDARY_JOB: Cannot add a premise from a verified customer or secondary outage to a verified load or higher extent outage</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PREMISES_ON_DIFFERENT_LOADS: Premises are not assigned to the same load</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REQUIRES_MODEL_OPERATION: Request requires a model operation</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGET_NON_OUTAGE: Merge target is a non-outage job</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;USE_RESTORE_OUTAGE_STEP: Invalid outage step status, restoring the job requires restoring individual steps</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VERIFIED_JOB_ON_LOAD: Load is part of a verified outage",
					"type": "string"
				}
			}
		},
		"Crew": {
			"description": "A crew resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"temporary": {
					"description": "Whether the crew is temporary or not",
					"type": "boolean",
					"example": true
				},
				"memberUserIDs": {
					"description": "User IDs for the members of this crew",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"avatarFileID": {
					"description": "File ID for the crew avatar",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"deprecated": {
					"description": "Whether the crew has been deleted or not",
					"type": "boolean",
					"example": false
				},
				"externalID": {
					"description": "External Crew ID",
					"type": "string",
					"example": "C12345"
				},
				"type": {
					"format": "int32",
					"description": "The number value for the type of crew.  To find the localized label, look the value up from the crewTypes in the service type configuration.",
					"type": "integer"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"archived": {
					"description": "Whether the crew has been archived or not. Will always be false.",
					"type": "boolean"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"activeAt": {
					"format": "date-time",
					"description": "The date / time that the crew was last active.",
					"type": "string"
				},
				"activeAssignmentCount": {
					"format": "int32",
					"description": "The number of active crew assignments for the crew",
					"type": "integer"
				},
				"lastOnShiftTime": {
					"format": "date-time",
					"description": "The last time the crew went on shift.",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"compassConnected": {
					"description": "If crew is connected on compass.",
					"type": "boolean"
				},
				"lastOnShiftTooEarly": {
					"description": "Going on shift before the earliestAllowedOnShiftTime is not prevented by the system but this flag will be set to true while the crew is on shift.",
					"type": "boolean",
					"example": true
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"earliestAllowedOnShiftTime": {
					"format": "date-time",
					"description": "Calculated when a crew goes off shift. Sets the ealiest time a crew should be allowed to come back on shift.",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"email": {
					"description": "Crew email address",
					"type": "string",
					"example": "a@b.c"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"activeColorationRules": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ColorationRule"
					}
				},
				"lastChangeReason": {
					"$ref": "#/definitions/LastChangeReason"
				},
				"aorIDs": {
					"description": "List of AOR IDs the crew is assigned to. These determine which users have jurisdiction over this crew.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"actuallyOnShift": {
					"description": "Flag that indicates if the crew is actually on shift based on on/off shift actions.",
					"type": "boolean",
					"example": true
				},
				"assignmentPriority": {
					"description": "Priority of crew assignment.",
					"type": "integer",
					"example": 1
				},
				"lastOffShiftTime": {
					"format": "date-time",
					"description": "The last time the crew went off shift.",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"leadAssignmentID": {
					"description": "The calculated lead assignment ID for this crew.  This field is calculated automatically by the system.",
					"$ref": "#/definitions/ObjectId"
				},
				"onShift": {
					"description": "Whether the crew is currently planned to be on shift or not based on assigned crew shift schedules.",
					"type": "boolean",
					"example": true
				},
				"active": {
					"description": "Whether the crew is active or not",
					"type": "boolean",
					"example": true
				},
				"crewShiftIDs": {
					"description": "List of crew shifts for this crew. See service type configuration for crew shifts",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"leadAssignment": {
					"description": "The calculated lead assignment for this crew.  This field is calculated automatically by the system.",
					"$ref": "#/definitions/CrewAssignment"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"crewCertificationIDs": {
					"description": "List of crew certifications for this crew. See service type configuration",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"phoneNumber": {
					"description": "Phone number",
					"type": "string",
					"example": "(555) 555-5555"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"shiftStatus": {
					"description": "Crew shift status. Unique object id from the enums from both the service type and crew type.",
					"$ref": "#/definitions/ObjectId"
				},
				"crewIdle": {
					"description": "If a crew has not been active after causing an inactivity trigger to be kicked off. A crew is considered active at the most recent time in which their 'active' flag is toggled, or they are on a crew assignment which transitions workflow states.",
					"type": "boolean",
					"example": false
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"leadAssignmentStatus": {
					"description": "Status of crews assignment.",
					"type": "integer",
					"example": 1
				},
				"name": {
					"description": "Crew name",
					"type": "string",
					"example": "Trunk 66"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"urgentRequest": {
					"description": "If there is a urgent request made from the crew.",
					"type": "boolean"
				},
				"activeRowColorationRule": {
					"$ref": "#/definitions/ColorationRule"
				},
				"unavailableState": {
					"description": "Whether the crew is in an unavailable state across any of their crew assignments.",
					"type": "boolean",
					"example": false
				}
			}
		},
		"CustomerPremiseAssociate": {
			"description": "A Customer-Premise Service association to create",
			"properties": {
				"externalCustomerID": {
					"description": "The external ID of the customer. This or customerID are required",
					"type": "string",
					"example": "C-0001"
				},
				"priorityLabel": {
					"description": "Priority label for the service. Reference the priorityTypes from the premise service configuration. Only used if priority is not specified.",
					"type": "string"
				},
				"premiseID": {
					"description": "The internal ID of the premise. Uses mongo's ObjectId format, which is a 24 character hexadecimal value. This or externalPremiseID are required",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"customerID": {
					"description": "The internal ID of the customer. Uses mongo's ObjectId format, which is a 24 character hexadecimal value. This or externalCustomerID are required",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"serviceTypeID": {
					"description": "The internal ID of the Service Type of the premise the customer is associated with. Uses mongo's ObjectId format, which is a 24 character hexadecimal value. This or serviceTypeIdentifier are required",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"externalRetailerID": {
					"description": "The external ID of the retailer servicing the customer for this service type and premise. If this or retailerID are not specified, The default retailer ID for the service type is used",
					"type": "string",
					"example": "yourEnergyRetailer"
				},
				"priority": {
					"format": "int32",
					"description": "Priority identifier for the service. Reference the priorityTypes from the premise service configuration.",
					"type": "integer",
					"example": "1"
				},
				"retailerID": {
					"description": "The internal ID of the Retailer servicing the customer. Uses mongo's ObjectId format, which is a 24 character hexadecimal value. If this or externalRetailerID are not specified, the default retailer for the service type is used",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"serviceTypeIdentifier": {
					"description": "The service type identifier for the service. This or serviceTypeID are required.",
					"type": "string",
					"example": "Electric"
				},
				"externalPremiseID": {
					"description": "The external ID of the premise. This or premiseID are required",
					"type": "string",
					"example": "P-0001"
				}
			}
		},
		"DamageRecordCreate": {
			"description": "The damage record to create from the damage record endpoint. Either the damageRecordTypeID or damageRecordTypeExternalID is required.  If the damageRecordTypeID is provided, the damageRecordTypeExternalID will be ignored.  The damage record type will be validated against the available damage record types for the service type. If the networkModelID or extNetworkModelID are set, the deviceInfo field will be populated based on the values provided.",
			"properties": {
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"damageRecordTypeExternalID": {
					"description": "The external ID of the damage record type to create.  This would be found in the Service Type definition.",
					"type": "string",
					"example": "brokenPole"
				},
				"jobID": {
					"description": "The internal ID of the Job that the damage record is associated with.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"address": {
					"description": "The address of the damage record.",
					"type": "string",
					"example": "123 Main Street"
				},
				"networkModelID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"damageRecordTypeID": {
					"description": "A reference to the damage record type of the damage record.  This would be found in the Service Type definition.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"extNetworkModelID": {
					"description": "The external ID of the device.  This will typically be the ID that came from the GIS.",
					"type": "string",
					"example": "570_31182856_0_11021755"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				}
			},
			"required": [
				"damageRecordTypeID",
				"damageRecordTypeLabel"
			]
		},
		"ExternalPremiseID": {
			"description": "The external ID of the Premise associated with the resource. This would typically be the ID from the CIS.",
			"type": "string",
			"example": "P-10001"
		},
		"CrewAssignmentUpdate": {
			"description": "A crew assignment resource.",
			"properties": {
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"eta": {
					"format": "date-time",
					"description": "Estimated time of arrival of the crew to the location",
					"type": "string"
				},
				"notes": {
					"description": "Any notes pertaining to the crew assignment",
					"type": "string",
					"example": "sample notes"
				},
				"changeReason": {
					"$ref": "#/definitions/ChangeReason"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"destination": {
					"description": "Destination for the crew assignment",
					"type": "string",
					"example": "123 Jones Ave"
				},
				"assignedUserName": {
					"description": "User name of the user assigned to the crew assignment",
					"type": "string",
					"example": "sample assignedUserName"
				},
				"crewID": {
					"description": "Internal ID of the crew assigned to this crew assignment",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"requestedCrewType": {
					"format": "int32",
					"description": "The integer identifier of the crew type requested for the assignment",
					"type": "integer"
				},
				"assignedUserID": {
					"description": "Internal ID of the user assigned to the crew assignment",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"destinationField": {
					"$ref": "#/definitions/CrewAssignmentDestinationField"
				}
			}
		},
		"CrewAssignmentJobUpdate": {
			"description": "A resource containing an associated job and crew assignment for simultaneous update.",
			"properties": {
				"job": {
					"$ref": "#/definitions/JobUpdate"
				},
				"crewAssignment": {
					"$ref": "#/definitions/CrewAssignmentUpdate"
				}
			}
		},
		"FieldValueOperation": {
			"description": "A resource used in defining field value requirements for workflow transitions.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"fieldOperation": {
					"description": "An operation to use in comparing a field's actual value against a configured fieldValue.",
					"type": "string",
					"enum": [
						"NOT_NULL",
						"NULL",
						"EQUALS",
						"NOT_EQUALS",
						"GREATER_THAN",
						"LESS_THAN",
						"CONTAINS",
						"NOT_CONTAINS"
					]
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"fieldValue": {
					"description": "The value used in comparing the field's actual value. The type depends on the custom field type and fieldOperation"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"customField": {
					"description": "Whether the field being compared against is a custom field.",
					"type": "boolean",
					"example": false
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"invalid": {
					"description": "Whether the field requirement is currently invalid. This is only set when viewing field requirements on workflows.",
					"type": "boolean"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"fieldID": {
					"description": "The field required to meet a specific condition.",
					"type": "string",
					"example": "crewID"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"PremiseCustomerCalls": {
			"description": "CustomerPremise Information, with Calls.",
			"properties": {
				"externalCustomerID": {
					"descrption": "External ID of the associated customer.",
					"type": "string",
					"example": "C-123456"
				},
				"address": {
					"description": "Premise address.",
					"type": "string",
					"example": "sample address"
				},
				"phone": {
					"description": "Customer Phone Number.",
					"type": "string",
					"example": "(555) 555-5555"
				},
				"name": {
					"description": "Customer name.",
					"type": "string",
					"example": "John Doe"
				},
				"items": {
					"description": "A list of calls.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Call"
					}
				},
				"externalPremiseID": {
					"description": "External ID of the associated premise.",
					"type": "string",
					"example": "P-123"
				}
			}
		},
		"Priority": {
			"description": "A job priority calculation resource.",
			"properties": {
				"factorID": {
					"description": "For a sub-priority, the internal priority factor ID",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"matrixID": {
					"description": "The internal ID of the calculation's priority matrix as defined in the service type.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"label": {
					"description": "Priority label",
					"type": "string",
					"example": "sample label"
				},
				"overridden": {
					"description": "Whether a user manually overrode the calculation.",
					"type": "boolean",
					"example": false
				},
				"factorValues": {
					"description": "A list of factors that played in to the automatic priority calculation.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Priority"
					}
				},
				"value": {
					"format": "int32",
					"description": "The current priority value.",
					"type": "integer",
					"example": 1
				}
			}
		},
		"RecentAMINotifications": {
			"description": "A list of Recent AMI Notifications",
			"type": "array",
			"items": {
				"$ref": "#/definitions/AMINotification"
			}
		},
		"NetworkModelExternalID": {
			"description": "External ID of the device, typically the GIS ID",
			"type": "string",
			"example": "XFMR_12345"
		},
		"SystemLevelComment": {
			"allOf": [
				{
					"$ref": "#/definitions/Comment"
				},
				{
					"properties": {
						"modelID": {
							"description": "The internal ID of the system level associated with the comment",
							"type": "string",
							"example": "59a1bd89f304f0ef8232c76a"
						}
					}
				}
			],
			"description": "A system level comment resource."
		},
		"StateTransition": {
			"description": "A workflow state transition resource including the transition time and the state ID.",
			"properties": {
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"stateID": {
					"format": "int32",
					"description": "State transitioned to",
					"type": "integer",
					"example": 1
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"durationMs": {
					"format": "int64",
					"description": "The number of milliseconds spent in the state being transitioned from.",
					"type": "integer"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"transitionedAt": {
					"format": "date",
					"description": "Time the state change occurred",
					"type": "string"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"Hazards": {
			"description": "A list of hazards",
			"type": "array",
			"items": {
				"$ref": "#/definitions/Hazard"
			}
		},
		"CrewShiftLog": {
			"description": "A log of a crew shift",
			"properties": {
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"crewID": {
					"description": "Internal ID of the user assigned to the crew assignment",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"shiftOffTime": {
					"format": "date-time",
					"description": "The time the crew was marked off shift.",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"shiftOnTime": {
					"format": "date-time",
					"description": "The time the crew was marked on shift.",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"CrewWorkFlowTransition": {
			"description": "A customized definition of a transition between states.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"color": {
					"description": "The color to use in displaying the transition in the UI.",
					"type": "string",
					"example": "sample color"
				},
				"archive": {
					"description": "Whether the transition will result in archival.",
					"type": "boolean"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"autoAttemptTransitionPriority": {
					"format": "int32",
					"description": "Priority value for which transitions are ranked in attempting auto transitions. Higher ranked valid transitions will be attempted first.",
					"type": "integer"
				},
				"actionLabel": {
					"description": "The label of the transition action.",
					"type": "string",
					"example": "Resolve"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"userGroups": {
					"description": "The list of user group IDs allowed to perform the transition",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"toState": {
					"format": "int32",
					"description": "The ID of the state the transition will end in.",
					"type": "integer",
					"example": 1
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"invalid": {
					"description": "Whether the action is currently invalid based on configured state and transition requirements",
					"type": "boolean"
				},
				"autoAttemptTransitionWithinDistance": {
					"format": "double",
					"description": "Distance in meters for which the system will auto attempt the workflow transition when the assigned crew is within said distance to the assignment.",
					"type": "number",
					"example": 1.75
				},
				"fieldRequirements": {
					"description": "A list of field requirements for the transition to be allowed.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/FieldValueOperation"
					}
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"autoAttemptTransitionBeyondDistance": {
					"format": "double",
					"description": "Distance in meters for which the system will auto attempt the workflow transition when the assigned crew is beyond said distance frpm the assignment.",
					"type": "number",
					"example": 1.75
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"AMINotificationData": {
			"properties": {
				"lastUpdated": {
					"format": "int64",
					"description": "Time in milliseconds since epoch of last updated value in the list of AMI Notifications.",
					"type": "integer",
					"example": 1503941374348
				},
				"total": {
					"format": "int64",
					"description": "The total number of AMI Notifications returned",
					"type": "integer"
				},
				"data": {
					"description": "List of AMI Notifications",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AMINotification"
					}
				}
			}
		},
		"HierarchyParameterSet": {
			"description": "Information about the relevant parameter set",
			"properties": {
				"effectiveID": {
					"description": "The ID of the parameter set to use, taking into account any overrides on the current hierarchy component or the autoID if there are no overrides on the current hierarchy component.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"overriddenID": {
					"description": "The ID of the parameter set this parameter set has been overridden to",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"autoID": {
					"description": "The ID of the parameter set to use, without taking into account any settings on the current hierarchy level. This will be inherited from upstream components if overrides exist. Otherwise, this will be  the configured parameter set for the current mode.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"overridden": {
					"description": "Whether or not the parameter set is overridden at the current level",
					"type": "boolean"
				},
				"configType": {
					"description": "The parameter set type",
					"type": "string",
					"enum": [
						"ETR_CALC_TABLE_ID",
						"PRIORITY_CALC_MATRIX_ID",
						"PREDICTION_PARAMETER_SET_ID",
						"OPERATION_MODE_ID",
						"NOTIFICATION_ABSORPTION_ID",
						"CALL_ABSORPTION_ID"
					]
				},
				"downstreamOverrideExists": {
					"description": "Whether or not downstream overrides exist",
					"type": "boolean"
				}
			}
		},
		"AssociatedLocation": {
			"description": "An associated location resource.",
			"properties": {
				"gpsLocation": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"label": {
					"description": "Label for the associated location",
					"type": "string",
					"example": "Possible fault location"
				}
			}
		},
		"JobCreate": {
			"description": "Job to create",
			"required": [
				"jobTypeID"
			],
			"properties": {
				"networkModelExternalID": {
					"description": "The networkModelExternalID of the device associated to the job. Only applies to non-outage or planned outage type jobs.",
					"$ref": "#/definitions/NetworkModelExternalID"
				},
				"overrideLeadLocationSource": {
					"description": "If set to True, the leadLocationSource can be manually specified to a specific source and will not follow the jobLeadLocationPriority stored on the ServiceType. Otherwise, the leadLocationSource will be determined by the jobLeadLocationPriority.",
					"type": "boolean",
					"example": false
				},
				"notes": {
					"description": "Notes to include with the job",
					"type": "string",
					"example": "The transformer is on fire"
				},
				"leadLocationSource": {
					"description": "String enumeration of where the the lead location data was taken from. In order to change this value, overrideLeadLocationSource must be set to true. Also, in order to update the leadLocation, this must be set to 'CUSTOM_SOURCE'.",
					"type": "string",
					"enum": [
						"CALL",
						"DEVICE",
						"JOB",
						"PREMISE",
						"CUSTOM_SOURCE"
					],
					"example": "JOB"
				},
				"operationEventIDs": {
					"description": "The operation events the job is associated with",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"title": {
					"description": "Title for the job",
					"type": "string",
					"example": "Replace transformer X123"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"hazards": {
					"description": "List of hazards to create with the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/HazardCreateEmbedded"
					}
				},
				"aorID": {
					"description": "(DEPRECATED - Use aorIDs instead) The AOR ID for the job. When querying, this will be the priority AOR ID from the job's AOR IDs. When posting, this field will be ignored if AOR IDs are specified.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"leadLocation": {
					"$ref": "#/definitions/LabeledLocation"
				},
				"substation": {
					"description": "The current substation of the affected device for the job",
					"type": "string",
					"example": "sample substation"
				},
				"nominalFeeder": {
					"description": "The nominal feeder of the job device",
					"type": "string",
					"example": "FDR 5"
				},
				"hasUserOverriddenAors": {
					"description": "True if the aorIDs field has been overridden by a user, false otherwise. If set to false and updated to true, the system will stop re-calculating the aorIDs field when system managed AORs change (via reprediction/location change/etc.). If true and updated to false, the system will take over calculating the aorIDs field again based on the device/location/etc. of the job.",
					"type": "boolean"
				},
				"nominalSubstation": {
					"description": "The nominal substation of the job device",
					"type": "string",
					"example": "Brookdale Sub"
				},
				"addLinks": {
					"description": "List of links to add to the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/LinkCreate"
					}
				},
				"assignedUserID": {
					"description": "The internal ID of the user assigned to the Job.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"etr": {
					"$ref": "#/definitions/ETRCreate"
				},
				"address": {
					"description": "The address of the job.",
					"type": "string",
					"example": "123 Main Street"
				},
				"aorIDs": {
					"description": "A List of AOR IDs that determines which users have jurisdiction over this job. If not specified in the post body, aorIDs are set on every job upon creation as the combined set of both the system managed AORs and geographic AORs (systemAorIDs and geographicAorIDs respectively). If the post specifies either aorID or aorIDs on the job, this is considered as an override and the user must have the appropriate permissions to do so. If an AOR override is passed upon creation, then the supplied AOR(s) will be combined into a set with the systemAorIDs and geographicAorIDs, and the job will be flagged as overridden (hasUserOverriddenAors). The first AOR in this list is considered the 'Priority AOR'.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"networkModelID": {
					"description": "The networkModelID of the device associated to the job. Only applies to non-outage or planned outage type jobs.",
					"$ref": "#/definitions/NetworkModelID"
				},
				"start": {
					"format": "date-time",
					"description": "The job start time",
					"type": "string"
				},
				"commentAdds": {
					"description": "Comments to create with the job",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CommentCreate"
					}
				},
				"externalWorkOrderID": {
					"description": "An ID used for tracking in an external system",
					"type": "string",
					"example": "WO-00001"
				},
				"priority": {
					"$ref": "#/definitions/PriorityCreate"
				},
				"voltage": {
					"format": "double",
					"description": "The nominal operating voltage for the job",
					"type": "number",
					"example": "1.1"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"assignedUserName": {
					"description": "The user name of the user assigned to the job.",
					"type": "string",
					"example": "Jane"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"feederName": {
					"description": "The name of the currently connected feeder for the job.  Only applies to Outage type jobs.",
					"type": "string",
					"example": "FDR1"
				},
				"jobTypeID": {
					"description": "Reference to the Job Type of the job.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				}
			}
		},
		"CrewData": {
			"description": "Crew data",
			"properties": {
				"lastUpdated": {
					"format": "int64",
					"description": "Time in milliseconds since epoch of last updated value in the list of crews.",
					"type": "integer",
					"example": 1503941374348
				},
				"total": {
					"format": "int64",
					"description": "The total number of crews returned",
					"type": "integer"
				},
				"data": {
					"description": "List of Crews",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Crew"
					}
				}
			}
		},
		"DamageRecordUpdate": {
			"description": "A damage record update.",
			"properties": {
				"activeAt": {
					"format": "date-time",
					"description": "The date / time that the damage record became active.",
					"type": "string"
				},
				"closed": {
					"description": "Whether the damage record has been closed.",
					"type": "boolean"
				},
				"closedAt": {
					"format": "date-time",
					"description": "The date/time that the damage record was closed.",
					"type": "string"
				}
			}
		},
		"CreatedByUserID": {
			"description": "The internal ID of the user that created the resource.",
			"type": "string",
			"example": "59a1bd89f304f0ef8232c769"
		},
		"PremiseID": {
			"description": "The internal ID of the premise that is associated with the resource. Uses mongo's ObjectId format, which is a 24 character hexadecimal value.",
			"type": "string",
			"example": "59a1b4b4f304f0ef8232c768"
		},
		"CustomFieldLocation": {
			"properties": {
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"label": {
					"description": "location description",
					"type": "string"
				}
			}
		},
		"HazardData": {
			"properties": {
				"lastUpdated": {
					"format": "int64",
					"description": "Time in milliseconds since epoch of last updated value in the list of Hazards.",
					"type": "integer",
					"example": 1503941374348
				},
				"total": {
					"format": "int64",
					"description": "The total number of hazards returned",
					"type": "integer"
				},
				"data": {
					"description": "List of Hazards",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Hazard"
					}
				}
			}
		},
		"ServiceTypeID": {
			"description": "The internal ID of the Service Type that is associated with the resource. Uses mongo's ObjectId format, which is a 24 character hexadecimal value.",
			"type": "string",
			"example": "59a1b4b4f304f0ef8232c768"
		},
		"WorkArea": {
			"description": "A work area resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"deprecated": {
					"description": "Whether the work area has been deleted or not.",
					"type": "boolean",
					"example": false
				},
				"externalID": {
					"description": "External Work Area ID",
					"type": "string",
					"example": "WA12345"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"parentID": {
					"description": "Internal ID of this work area's parent.",
					"$ref": "#/definitions/ObjectId"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"parentExternalID": {
					"description": "External ID of this work area's parent.",
					"type": "string",
					"example": "WA12345"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"shortCode": {
					"description": "A shortened version of the name used in display ID generation.",
					"type": "string",
					"example": "WA1"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"hasJurisdiction": {
					"description": "Whether the user for this request has permission to this work area.",
					"type": "boolean",
					"example": false
				},
				"aorIDs": {
					"description": "Associated AOR IDs for accessing a work area.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"upstreamWorkAreaInfos": {
					"description": "Work area infos upstream of this one in the hierarchy.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/WorkAreaInfo"
					}
				},
				"associationAorIDs": {
					"description": "Associated AOR IDs this work area controls access to.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"parentName": {
					"description": "Name of this work area's parent.",
					"type": "string",
					"example": "WA12345"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"name": {
					"description": "Work Area name",
					"type": "string",
					"example": "Trunk 66"
				},
				"workAreaLevelID": {
					"description": "The internal ID of the work area level associated with this work area.",
					"$ref": "#/definitions/ObjectId"
				}
			}
		},
		"DeviceInfoBulkPatch": {
			"description": "Device Information to update",
			"properties": {
				"address": {
					"description": "The address of the device.",
					"type": "string",
					"example": "987 2nd Street"
				},
				"aorIDs": {
					"description": "List of AOR IDs for the device",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"externalID": {
					"description": "The external ID of the device.  This will typically be the ID that came from the GIS.",
					"type": "string",
					"required": true,
					"example": "570_31182856_0_11021755"
				},
				"type": {
					"description": "The type of device. Use deviceInfoType instead",
					"type": "string",
					"enum": [
						"Area",
						"Breaker",
						"Circuit",
						"Feeder",
						"Fuse",
						"Generator",
						"Line",
						"Load",
						"NetworkProtector",
						"Recloser",
						"Region",
						"Source",
						"Sectionalizer",
						"Substation",
						"Switch",
						"Transformer"
					],
					"example": "Load"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"internalID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"substationName": {
					"description": "The name of the device's nominal substation",
					"type": "string",
					"example": "Berklee Sub"
				},
				"name": {
					"description": "The name of the device",
					"type": "string",
					"example": "Load_123"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"feederName": {
					"description": "The name of the device's nominal feeder",
					"type": "string",
					"example": "FDR123"
				},
				"deviceInfoType": {
					"description": "The type of device the job is associated with",
					"type": "string",
					"enum": [
						"AREA",
						"BREAKER",
						"CIRCUIT",
						"FEEDER",
						"FUSE",
						"GENERATOR",
						"LINE",
						"LOAD",
						"NETWORK_PROTECTOR",
						"RECLOSER",
						"REGION",
						"REGULATOR",
						"SECTIONALIZER",
						"SOURCE",
						"SUBSTATION",
						"SWITCH",
						"TRANSFORMER"
					]
				},
				"group": {
					"description": "The group that the device was imported as part of.  This comes from the device extra data import.",
					"type": "string",
					"example": "Group A"
				}
			}
		},
		"HazardUpdate": {
			"description": "A hazard update.",
			"properties": {
				"hazardTypeExternalID": {
					"description": "The external ID of the hazard type to create.  This would be found in the Service Type definition.",
					"type": "string",
					"example": "lineDown"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"activeAt": {
					"format": "date-time",
					"description": "The date / time that the hazard became active.",
					"type": "string"
				},
				"notes": {
					"description": "Notes about the hazard",
					"type": "string",
					"example": "Hazard on the street."
				},
				"address": {
					"description": "The address of the hazard.",
					"type": "string",
					"example": "123 Main Street"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"closed": {
					"description": "Whether the hazard has been closed.",
					"type": "boolean"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"closedAt": {
					"format": "date-time",
					"description": "The date/time that the hazard was closed.",
					"type": "string"
				},
				"hazardTypeID": {
					"description": "A reference to the hazard type of the hazard.  This would be found in the Service Type definition.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				}
			}
		},
		"DeviceFlags": {
			"description": "A list of device flags.",
			"properties": {
				"deviceStatuses": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DeviceStatus"
					}
				},
				"timestamp": {
					"format": "int64",
					"description": "UTC ms since epoch representing when the query was made on the server.",
					"type": "integer",
					"example": "34523345324"
				}
			}
		},
		"WorkAreaLevel": {
			"description": "A work area level resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"deprecated": {
					"description": "Whether the work area level has been deleted or not.",
					"type": "boolean",
					"example": false
				},
				"externalID": {
					"description": "External Work Area Level ID",
					"type": "string",
					"example": "WA12345"
				},
				"index": {
					"format": "int32",
					"description": "This work area level's position relative to other levels. 1 is above 2, 2 is above 3, etc.",
					"type": "integer",
					"example": "1"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"abbreviation": {
					"description": "A shortened version of the name used in display ID configuration to include this level in an ID.",
					"type": "string",
					"example": "WAL1"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"geographic": {
					"description": "Whether the work area level is used for geographic association.",
					"type": "boolean",
					"example": false
				},
				"name": {
					"description": "Work Area Level name",
					"type": "string",
					"example": "Trunk 66"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"CallData": {
			"description": "A list of calls.",
			"properties": {
				"lastUpdated": {
					"format": "int64",
					"description": "Time in milliseconds since epoch of last updated value in the list of Calls.",
					"type": "integer",
					"example": 1503941374348
				},
				"total": {
					"format": "int64",
					"description": "The total number of calls returned",
					"type": "integer"
				},
				"data": {
					"description": "List of Calls",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Call"
					}
				}
			}
		},
		"JobWorkFlowTransition": {
			"description": "A customized definition of a transition between states.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"color": {
					"description": "The color to use in displaying the transition in the UI.",
					"type": "string",
					"example": "sample color"
				},
				"archive": {
					"description": "Whether the transition will result in archival.",
					"type": "boolean"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"resolution": {
					"format": "int32",
					"description": "The job resolution identifier mapped to this transition",
					"type": "integer"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"actionLabel": {
					"description": "The label of the transition action.",
					"type": "string",
					"example": "Resolve"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"userGroups": {
					"description": "The list of user group IDs allowed to perform the transition",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"toState": {
					"format": "int32",
					"description": "The ID of the state the transition will end in.",
					"type": "integer",
					"example": 1
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"invalid": {
					"description": "Whether the action is currently invalid based on configured state and transition requirements",
					"type": "boolean"
				},
				"fieldRequirements": {
					"description": "A list of field requirements for the transition to be allowed.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/FieldValueOperation"
					}
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"OperationModeToCalcConfig": {
			"description": "An object consisting of the IDs of parameter sets to be used",
			"properties": {
				"notificationAbsorptionID": {
					"description": "The ID of the table to use in notification absorption",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"priorityCalcMatrixID": {
					"description": "The ID of the table to use in priority calculation",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"etrCalcTableID": {
					"description": "The ID of the table to use in ETR calculation",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"callAbsorptionID": {
					"description": "The ID of the table to use in call absorption",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"predictionParameterSetID": {
					"description": "The ID of the table to use in outage prediction",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				}
			}
		},
		"HazardCreateEmbedded": {
			"description": "A hazard to create when the reference to the call or job is implied separatly from this model.  Either the hazardTypeID or hazardTypeExternalID is required.  If the hazardTypeID is provided, the hazardTypeExternalID will be ignored.  The hazard type will be validated against the available hazard types for the service type.",
			"required": [
				"hazardTypeID",
				"hazardTypeLabel"
			],
			"properties": {
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"hazardTypeExternalID": {
					"description": "The external ID of the hazard type to create.  This would be found in the Service Type definition.",
					"type": "string",
					"example": "lineDown"
				},
				"address": {
					"description": "The address of the hazard.",
					"type": "string",
					"example": "123 Main Street"
				},
				"networkModelID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"notes": {
					"description": "Notes about the hazard",
					"type": "string",
					"example": "Hazard on the street."
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"extNetworkModelID": {
					"description": "The external ID of the device.  This will typically be the ID that came from the GIS.",
					"type": "string",
					"example": "570_31182856_0_11021755"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"hazardTypeID": {
					"description": "A reference to the hazard type of the hazard.  This would be found in the Service Type definition.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				}
			}
		},
		"HierarchyComponent": {
			"description": "A hierarchy component resource.",
			"properties": {
				"notificationAbsorptionParameterSetID": {
					"description": "The internal ID of the overridden AMI notification absorption parameter set ID for the hierarchy component",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"overriddenEtrValue": {
					"format": "date-time",
					"description": "The date / time to use as an ETR override. Only used if the ETR status is OVERRIDDEN.",
					"type": "string",
					"example": "2018-04-10T10:00:00Z"
				},
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"overriddenInheritedFields": {
					"description": "A list of field IDs that have been overridden on an upstream hierarchy component and have been inherited by this component",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"clearDownstreamETRStatuses": {
					"description": "Whether to set the ETR status of all downstream hierarchy components to Automatic (only used when patching)",
					"type": "boolean",
					"example": false
				},
				"deprecated": {
					"description": "Indicates whether or not the hierarchy component has been removed from the model",
					"type": "boolean",
					"example": false
				},
				"hierarchyLevel": {
					"description": "The level in the hierarchy of the current component",
					"type": "string",
					"enum": [
						"FEEDER",
						"STATION",
						"AREA",
						"REGION",
						"SYSTEM"
					]
				},
				"externalID": {
					"description": "External ID of the hierarchy component",
					"type": "string",
					"example": "C12345"
				},
				"currentOperationEvent": {
					"description": "The internal ID of the current operation event on the hierarchy component",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"parentID": {
					"description": "The internal ID of the parent hierarchy component",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"parentNetworkModelID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"priorityCalcMatrixID": {
					"description": "The internal ID of the overridden priority calculation matrix ID for the hierarchy component",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"etrCalcTable": {
					"$ref": "#/definitions/HierarchyParameterSet"
				},
				"operationMode": {
					"$ref": "#/definitions/HierarchyParameterSet"
				},
				"priorityCalcMatrix": {
					"$ref": "#/definitions/HierarchyParameterSet"
				},
				"aorID": {
					"description": "The AOR ID for the hierarchy component",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"operationModeToCalcConfig": {
					"description": "A mapping of operation mode IDs to IDs of parameter sets to use for each configuration type",
					"example": {
						"59a1bd89f304f0ef8232c769": {
							"notificationAbsorptionID": "59a1bd89f304f0ef8232c76a",
							"priorityCalcMatrixID00": "59a1bd89f304f0ef8232c76b",
							"etrCalcTableID": "59a1bd89f304f0ef8232c76c",
							"callAbsorptionID": "59a1bd89f304f0ef8232c76d",
							"predictionParameterSetID": "59a1bd89f304f0ef8232c76e"
						}
					}
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"operationEvent": {
					"$ref": "#/definitions/OperationEvent"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"shortCode": {
					"description": "A short code for the component",
					"type": "string",
					"example": "C01"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"notificationAbsorptionParameterSet": {
					"$ref": "#/definitions/HierarchyParameterSet"
				},
				"etr": {
					"description": "The ETR of the hierarchy component. Used to track values saved to ETR custom fields and tables.",
					"$ref": "#/definitions/ETR"
				},
				"downstreamOverriddenFields": {
					"description": "A list of custom field IDs that have been overridden on a lower hierarchy component",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"etrStatusAction": {
					"description": "The desired action to perform on ETRs on jobs downstream from the current hierarchy component (only used when patching)",
					"type": "string",
					"enum": [
						"PRESERVE_ALL",
						"UPDATE_ALL",
						"UPDATE_AUTOMATIC"
					]
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"etrCalcEnabled": {
					"description": "Indicates whether or not internal job ETR calculation is enabled for jobs in the hierarchy component",
					"type": "boolean",
					"example": false
				},
				"callAbsorptionParameterSetID": {
					"description": "The internal ID of the overridden call absorption parameter set ID for the hierarchy component",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"parentName": {
					"description": "The name of the parent hierarchy component",
					"type": "string",
					"example": "Component_10"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"uniqueName": {
					"description": "A unique name for the hierarchy component. If the hierarchy component collection has duplicate names, the external ID will be appended to the name for the hierarchy component. Otherwise, this will be the same as the hierarchy component name",
					"type": "string",
					"example": "Component_10 (C12345)"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"etrStatus": {
					"description": "The current method of ETR calculation",
					"type": "string",
					"enum": [
						"AUTOMATIC",
						"DISABLED",
						"INTERNAL",
						"OVERRIDDEN"
					]
				},
				"callAbsorptionParameterSet": {
					"$ref": "#/definitions/HierarchyParameterSet"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"etrCalcTableID": {
					"description": "The internal ID of the overridden etr calculation table ID for the hierarchy component",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"name": {
					"description": "The name of the hierarchy component",
					"type": "string",
					"example": "Component_10"
				},
				"clearDownstreamOverrides": {
					"description": "A list of custom field IDs that should be cleared of any overridden values if downstream from the current component. Not used in GET requests.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"networkID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"operationModeID": {
					"description": "The internal ID of the overridden operation mode ID for the hierarchy component",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"predictionParameterSet": {
					"$ref": "#/definitions/HierarchyParameterSet"
				},
				"predictionParameterSetID": {
					"description": "The internal ID of the overridden prediction parameter set ID for the hierarchy component",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				}
			}
		},
		"Form": {
			"description": "A resource defining an OpenGrid report.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"statusLastUpdatedAt": {
					"format": "date",
					"description": "",
					"type": "string"
				},
				"externalID": {
					"description": "",
					"type": "string",
					"example": "sample externalID"
				},
				"statusHexColor": {
					"description": "",
					"type": "string",
					"example": "sample statusHexColor"
				},
				"crewName": {
					"description": "",
					"type": "string",
					"example": "sample crewName"
				},
				"label": {
					"description": "",
					"type": "string",
					"example": "sample label"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"url": {
					"description": "The report's URL location",
					"type": "string",
					"example": "sample url"
				},
				"archived": {
					"$ref": "#/definitions/Archived"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"jobID": {
					"description": "",
					"$ref": "#/definitions/ObjectId"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"crewID": {
					"description": "",
					"$ref": "#/definitions/ObjectId"
				},
				"id": {
					"$ref": "#/definitions/ObjectId"
				},
				"crewAssignmentDisplayID": {
					"description": "",
					"type": "string",
					"example": "sample crewAssignmentDisplayID"
				},
				"crewAssignmentID": {
					"description": "",
					"$ref": "#/definitions/ObjectId"
				},
				"status": {
					"description": "",
					"type": "string",
					"example": "sample status"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"PremiseServiceTypeCreate": {
			"description": "A premise service to create independently from the premise",
			"properties": {
				"premiseID": {
					"description": "Internal ID of the premise to create the service for. One of premiseID and externalID are required.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"amiSystemID": {
					"description": "Internal ID of the AMI system associated with the premise service meter",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"externalID": {
					"description": "External ID of the premise. Only used if premiseID is not specified. One of externalID and premiseID are required",
					"type": "string",
					"example": "DistTransformer,12345"
				},
				"deviceID": {
					"description": "The associated device's external ID.",
					"type": "string",
					"example": "DistributionTransformer,12345"
				},
				"serviceTypeIdentifier": {
					"description": "The service type identifier for the service. This or serviceTypeID are required",
					"type": "string",
					"example": "Electric"
				},
				"connected": {
					"description": "Whether the premise service is connected.",
					"type": "boolean",
					"example": true
				},
				"aorID": {
					"description": "Internal ID of the AOR associated with the premise service. If this or aorLabel are not specified, the service type default is used",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"meterID": {
					"description": "The external ID of an associated AMI meter.",
					"type": "string",
					"example": "Meter123"
				},
				"externalAmiSystemID": {
					"description": "External ID of the AMI system associated with the premise service meter. Ignored if amiSystemID is specified",
					"type": "string",
					"example": "ElectricAMI"
				},
				"serviceTypeID": {
					"description": "The internal ID of the associated service type. This or serviceTypeIdentifier are required",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"aorLabel": {
					"description": "Label of the AOR associated with the premise service. If this or aorID are not specified, the service type default is used",
					"type": "string",
					"example": "Northwest"
				},
				"phases": {
					"description": "The phases associated with the connection.",
					"type": "string",
					"example": "123"
				}
			}
		},
		"CrewAssignmentBulkChangeReturnStatus": {
			"description": "Crew bulk change return status.",
			"properties": {
				"model": {
					"$ref": "#/definitions/CrewAssignment"
				},
				"status": {
					"$ref": "#/definitions/ReturnStatus"
				}
			}
		},
		"ExternalID": {
			"description": "External ID of the resource",
			"type": "string",
			"example": "C-10001"
		},
		"LastChangeReason": {
			"description": "The last submitted change reason",
			"type": "string",
			"example": "Preemptive change before storm hits"
		},
		"DamageRecordData": {
			"properties": {
				"lastUpdated": {
					"format": "int64",
					"description": "Time in milliseconds since epoch of last updated value in the list of damage records.",
					"type": "integer",
					"example": 1503941374348
				},
				"total": {
					"format": "int64",
					"description": "The total number of damage records returned",
					"type": "integer"
				},
				"data": {
					"description": "List of Damage Records",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DamageRecord"
					}
				}
			}
		},
		"NetworkModelID": {
			"description": "The internal ID of the device.  This is the value that the distibution model uses internally.",
			"type": "string",
			"example": "570,31182856,0,11021755"
		},
		"PremiseConnection": {
			"description": "A premise connection resource.",
			"properties": {
				"connected": {
					"description": "Whether the connection is active.",
					"type": "boolean",
					"example": false
				},
				"activeAccount": {
					"description": "Whether the associated account is active.",
					"type": "boolean",
					"example": false
				},
				"startSequence": {
					"format": "int64",
					"description": "",
					"type": "integer",
					"example": "1"
				},
				"deviceID": {
					"description": "The external device ID for the premise connection.",
					"type": "string",
					"example": "sample deviceID"
				},
				"phases": {
					"description": "The phases on which the premise is connected.",
					"type": "string",
					"example": "sample phases"
				},
				"startTimestamp": {
					"format": "date",
					"description": "The time at which the premise connection went active.",
					"type": "string"
				}
			}
		},
		"CallbackData": {
			"description": "A list of callbacks.",
			"properties": {
				"lastUpdated": {
					"format": "int64",
					"description": "Time in milliseconds since epoch of last updated value in the list of callbacks.",
					"type": "integer",
					"example": 1503941374348
				},
				"total": {
					"format": "int64",
					"description": "The total number of callbacks returned",
					"type": "integer"
				},
				"data": {
					"description": "List of Callbacks",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Callback"
					}
				}
			}
		},
		"Premise": {
			"description": "A premise resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"lastChangeReason": {
					"$ref": "#/definitions/LastChangeReason"
				},
				"address": {
					"description": "Premise address",
					"type": "string",
					"example": "sample address"
				},
				"deprecated": {
					"description": "Whether the premise has been deleted or not",
					"type": "boolean",
					"example": false
				},
				"overriddenValues": {
					"description": "mapping of field to imported value for fields that have been overridden by the UI",
					"example": {
						"address": "123 Carendon Rd.",
						"59a1bd89f304f0ef8232c769": "fieldValue"
					}
				},
				"externalID": {
					"description": "External ID of the premise",
					"type": "string",
					"example": "P-123"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"premiseServiceTypeIDs": {
					"description": "Premise service type internal identifiers for the premise",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"group": {
					"description": "Premise importer group",
					"type": "string",
					"example": "A"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"CrewAssignmentBulkChangeReturnStatusData": {
			"description": "Bulk Change Return status data",
			"properties": {
				"lastUpdated": {
					"format": "int64",
					"description": "Time in milliseconds since epoch of last updated value in the list of bulk changes.",
					"type": "integer",
					"example": 1503941374348
				},
				"total": {
					"format": "int64",
					"description": "The total number of bulk changes",
					"type": "integer"
				},
				"data": {
					"description": "List of Bulk Change Return statuses",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CrewAssignmentBulkChangeReturnStatus"
					}
				}
			}
		},
		"ExternalCustomerID": {
			"description": "The external ID of the Customer associated with the resource. This would typically be the ID from the CIS.",
			"type": "string",
			"example": "C-10001"
		},
		"CommentCreate": {
			"description": "A comment to create.",
			"properties": {
				"comment": {
					"description": "The body of the comment.",
					"type": "string",
					"example": "sample comment"
				}
			}
		},
		"LastConfigUpdate": {
			"properties": {
				"lastUpdated": {
					"format": "date-time",
					"description": "The last updated time for the configuration information",
					"type": "string"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"configurationId": {
					"description": "The internal ID of the currently deployed configuration",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"table": {
					"description": "The name of the table.",
					"type": "string",
					"example": "LastConfigUpdate"
				}
			}
		},
		"OutageStep": {
			"description": "Outage Step Resource",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"networkModelExternalID": {
					"$ref": "#/definitions/NetworkModelExternalID"
				},
				"momentary": {
					"description": "Whether the outage step is considered a momentary outage or not.",
					"type": "boolean"
				},
				"notes": {
					"description": "Notes about the outage step.",
					"type": "string",
					"example": "Partial restoration of customers backfeed from tie switch SW-112A."
				},
				"deprecated": {
					"$ref": "#/definitions/Deprecated"
				},
				"networkModelName": {
					"description": "The name of the device.",
					"type": "string",
					"example": "BKR 123"
				},
				"validMeterAffected": {
					"format": "int32",
					"description": "The count of valid AMI meters for the outage step",
					"type": "integer"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"jobID": {
					"description": "The internal ID of the job the outage step is associated with.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"onOperationUncommanded": {
					"description": "true if the operation that ended this outage step is uncommanded",
					"type": "boolean"
				},
				"amiRestorationThresholdMet": {
					"description": "Whether the AMI restoration threshold has been met",
					"type": "boolean"
				},
				"offOperationID": {
					"description": "The internal ID of the operation that occurred to outage the given step. This references the id of the operation on the job.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"premisesWithValidMeters": {
					"description": "The list of premises in the outage step that have valid AMI meters",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"amiAbsorptionCutoff": {
					"format": "date-time",
					"description": "The end of the AMI notification absorption period",
					"type": "string"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"displayID": {
					"$ref": "#/definitions/DisplayID"
				},
				"customerInterruptedDurationMs": {
					"format": "int64",
					"description": "Customer interrupted duration of the Outage Step in ms",
					"type": "integer",
					"example": "980213"
				},
				"deviceInfoType": {
					"description": "The type of device the job is associated with",
					"type": "string",
					"enum": [
						"BREAKER",
						"FUSE",
						"GENERATOR",
						"LINE",
						"LOAD",
						"NETWORK_PROTECTOR",
						"RECLOSER",
						"REGULATOR",
						"SECTIONALIZER",
						"SOURCE",
						"SWITCH",
						"TRANSFORMER"
					]
				},
				"totalAmiEnergizations": {
					"format": "int32",
					"description": "The count of valid restoration notifications received for the outage step",
					"type": "integer"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"deviceType": {
					"description": "The type of device the hazard is associated with. Use deviceInfoType instead",
					"type": "string",
					"example": "Switch"
				},
				"medianAmiEnergizationTime": {
					"format": "date-time",
					"description": "The timestamp of the median restoration notification received for this outage step",
					"type": "string"
				},
				"totalAffectedKVA": {
					"format": "float",
					"description": "The total kVA of all premises affected by the outage step, determined based off the premise's proportion of load kVA",
					"type": "number"
				},
				"onTimeSource": {
					"description": "Internal identifier of field (custom or system) from which the on time was populated. If null, the on time has yet to be set or the on time was manually modified.",
					"type": "string"
				},
				"active": {
					"description": "Whether the outage step is currently active",
					"type": "boolean",
					"example": false
				},
				"verificationFailed": {
					"description": "Indicates that restoration verification did not complete successfully. This could be caused by a premise still reporting offline or not all premises reporting back",
					"type": "boolean"
				},
				"onOperationID": {
					"description": "The internal ID of the operation that occurred to restore the given step. This references the id of the operation on the job.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"deviceInfo": {
					"$ref": "#/definitions/DeviceInfo"
				},
				"premiseIDs": {
					"description": "The list of premises that are included in the outage step",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"suspectedOnTime": {
					"format": "date-time",
					"description": "The suspected on-time of the outage step",
					"type": "string"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"offOperationUncommanded": {
					"description": "true if the operation that started this outage step is uncommanded",
					"type": "boolean"
				},
				"durationMs": {
					"format": "int64",
					"description": "Duration of the Outage Step in ms",
					"type": "integer",
					"example": "980213"
				},
				"splitOperationID": {
					"description": "The internal ID of the operation that occurred to split the operation to a new step, if applicable. This references the id of the operation on the job.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"status": {
					"description": "The status of the outage step. Predicted out, verified out, restoration verification, verification failed, or restored. Generic OA additionally supports unverified and unaffected statuses.",
					"type": "string",
					"enum": [
						"PREDICTED",
						"VERIFIED",
						"RESTORATION_VERIFICATION",
						"RESTORATION_VERIFICATION_FAILED",
						"RESTORED",
						"MOMENTARY_PENDING_OPERATION",
						"MOMENTARY_CALL_ABSORPTION",
						"PENDING_UPSTREAM_RESTORATION, UNVERIFIED, UNAFFECTED"
					]
				},
				"verificationSkipped": {
					"description": "Indicates that restoration verification was skipped.",
					"type": "boolean"
				},
				"minAmiEnergizationTime": {
					"format": "date-time",
					"description": "The timestamp of the earliest restoration notification received for this outage step",
					"type": "string"
				},
				"excludedFromReporting": {
					"description": "Whether the outage step is excluded for reporting calculations",
					"type": "boolean"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"onTime": {
					"format": "date-time",
					"description": "The restoration time of the outage step. Only present when a step is in the restored state",
					"type": "string"
				},
				"phases": {
					"description": "The phase identifiers of the device for this outage step",
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer",
						"example": 1
					}
				},
				"amiRestorationNotifsByPremiseID": {
					"description": "Mapping of premise ID to restoration notifications received for the premise for this outage step",
					"example": {
						"59a1bd89f304f0ef8232c76a": [
							"59a1bd89f304f0ef8232c76a",
							"59a1bd89f304f0ef8232c76b"
						]
					}
				},
				"networkModelID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"premisesWithOnlinePings": {
					"description": "The list of premises whose latest restoration ping responded with an online status",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"absorbSustainedCalls": {
					"description": "Whether or not sustained (non-momentary) outage calls can be absorbed into this outage step",
					"type": "boolean"
				},
				"interruptedVerificationStepID": {
					"description": "ID of the step restored without verification on this step's creation(if applicable)",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"maxAmiEnergizationTime": {
					"format": "date-time",
					"description": "The timestamp of the latest restoration notification received for this outage step",
					"type": "string"
				},
				"premisesWithFailedPings": {
					"description": "The list of premises whose latest restoration ping responded with a failure status",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"restored": {
					"description": "Whether the outage step is restored or not.  True if the step status is restored.",
					"type": "boolean"
				},
				"callAbsorptionCutoff": {
					"format": "date-time",
					"description": "The end of the call absorption period for this outage step",
					"type": "string"
				},
				"offTime": {
					"format": "date-time",
					"description": "The off-time of the outage step",
					"type": "string"
				}
			}
		},
		"Number": {
			"format": "int32",
			"type": "integer",
			"example": 1
		},
		"RegionComment": {
			"allOf": [
				{
					"$ref": "#/definitions/Comment"
				},
				{
					"properties": {
						"modelID": {
							"description": "The internal ID of the region associated with the comment",
							"type": "string",
							"example": "59a1bd89f304f0ef8232c76a"
						}
					}
				}
			],
			"description": "A region comment resource."
		},
		"FormCreate": {
			"description": "Form Create resource",
			"properties": {
				"jobID": {
					"description": "",
					"$ref": "#/definitions/ObjectId"
				},
				"crewID": {
					"description": "",
					"$ref": "#/definitions/ObjectId"
				},
				"externalID": {
					"description": "",
					"type": "string",
					"example": "sample externalID"
				},
				"crewName": {
					"description": "",
					"type": "string",
					"example": "sample crewName"
				},
				"label": {
					"description": "",
					"type": "string",
					"example": "sample label"
				},
				"crewAssignmentID": {
					"description": "",
					"$ref": "#/definitions/ObjectId"
				},
				"url": {
					"description": "The report's URL location",
					"type": "string",
					"example": "sample url"
				},
				"status": {
					"description": "",
					"type": "string",
					"example": "sample status"
				}
			}
		},
		"Feeder": {
			"description": "A feeder resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"lastChangeReason": {
					"$ref": "#/definitions/LastChangeReason"
				},
				"externalID": {
					"description": "The external ID of the feeder",
					"type": "string",
					"example": "FDR,OPD123"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"currentOperationEvent": {
					"description": "The internal ID of the feeder's current assocaited operation event.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"currentMode": {
					"description": "The current operation mode for the feeder",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"feederID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"name": {
					"description": "The feeder's user facing name.",
					"type": "string",
					"example": "BRK123"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"shortCode": {
					"description": "A short code for the feeder",
					"type": "string",
					"example": "F01"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"PremiseServiceTypeCreateWithPremise": {
			"description": "A premise service to create with a CreatePremise. For Premise Services being created independently, use PremiseServiceTypeCreate",
			"properties": {
				"meterCommStatusLabel": {
					"description": "Meter Comm Status label for the associated meter. Ignored if meterCommStatus specified",
					"type": "string"
				},
				"amiSystemID": {
					"description": "Internal ID of the AMI system associated with the premise service meter",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"deviceID": {
					"description": "The associated device's external ID.",
					"type": "string",
					"example": "DistributionTransformer,12345"
				},
				"serviceTypeIdentifier": {
					"description": "The service type identifier for the service. This or serviceTypeID are required",
					"type": "string",
					"example": "Electric"
				},
				"connected": {
					"description": "Whether the premise service is connected.",
					"type": "boolean",
					"example": true
				},
				"aorID": {
					"description": "Internal ID of the AOR associated with the premise service. If this or aorLabel are not specified, the service type default is used",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"meterID": {
					"description": "The external ID of an associated AMI meter.",
					"type": "string",
					"example": "sample meterID"
				},
				"externalAmiSystemID": {
					"description": "External ID of the AMI system associated with the premise service meter. Ignored if amiSystemID is specified",
					"type": "string",
					"example": "ElectricAMI"
				},
				"serviceTypeID": {
					"description": "The internal ID of the associated service type. This or serviceTypeIdentifier are required",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"aorLabel": {
					"description": "Label of the AOR associated with the premise service. If this or aorID are not specified, the service type default is used",
					"type": "string",
					"example": "Northwest"
				},
				"meterCommTime": {
					"format": "date-time",
					"description": "The time the meter last communicated",
					"type": "string"
				},
				"phases": {
					"description": "The phases associated with the connection.",
					"type": "string",
					"example": "sample phases"
				},
				"meterCommStatus": {
					"format": "int32",
					"description": "Meter Comm Status identifier for the associated meter",
					"type": "integer"
				}
			}
		},
		"LastTransitionedAt": {
			"format": "date-time",
			"description": "Last time the model was transitioned.",
			"type": "string",
			"example": "2018-01-13T10:00:00Z"
		},
		"TransitionHistory": {
			"description": "List of state transitions performed on the model",
			"type": "array",
			"items": {
				"$ref": "#/definitions/StateTransition"
			}
		},
		"Comment": {
			"description": "A call comment resource.",
			"properties": {
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"modelID": {
					"description": "The comment's associated internal job ID",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"deprecated": {
					"description": "Whether the comment has been deleted",
					"type": "boolean",
					"example": false
				},
				"comment": {
					"description": "The body of the comment.",
					"type": "string",
					"example": "sample comment"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"AssetUpdate": {
			"description": "An asset to update.",
			"properties": {
				"address": {
					"description": "The address of the asset.",
					"type": "string",
					"example": "1234 Main Street"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"fixed": {
					"description": "Whether the asset has been marked as fixed.",
					"type": "boolean"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				}
			}
		},
		"JSONContent": {
			"description": "Arbitrary JSON content",
			"type": "string"
		},
		"CustomerCreate": {
			"description": "A customer resource.",
			"required": [
				"externalID",
				"group"
			],
			"properties": {
				"callbackContactMethod": {
					"format": "int32",
					"description": "Default callback contact method for the customer. Reference callback contact method in the service type configuration",
					"type": "integer"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValuesUpdate"
				},
				"phoneNumber": {
					"description": "Customer Phone Number",
					"type": "string",
					"example": "(555) 555-5555"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValuesUpdate"
				},
				"name": {
					"description": "Customer name",
					"type": "string",
					"example": "John Doe"
				},
				"externalID": {
					"$ref": "#/definitions/ExternalID"
				},
				"callbackTypes": {
					"_comment": "making this a referenced field removes the description and examples, need to include in each model",
					"description": "Callback types",
					"type": "array",
					"items": {
						"type": "string",
						"example": "RESOLVED"
					},
					"enum": [
						"RESOLVED"
					]
				},
				"services": {
					"description": "Services to associate to the created customer",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ServiceCreate"
					}
				},
				"doNotCallTimes": {
					"$ref": "#/definitions/DoNotCallTimes"
				},
				"callbackContactInfo": {
					"$ref": "#/definitions/CallbackContactInfo"
				},
				"group": {
					"description": "Customer Importer Group",
					"type": "string",
					"example": "sample group"
				}
			}
		},
		"DamageRecord": {
			"description": "A damage record resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"damageRecordTypeExternalID": {
					"description": "A reference to the external label of the damage record type of the damage record.  This would be found in the Service Type definition.",
					"type": "string",
					"example": "brokenPole"
				},
				"autoAssociated": {
					"description": "A flag denoting if a damage record is currently auto-associated to a job",
					"type": "boolean",
					"example": false
				},
				"jobAorIDs": {
					"description": "A List of AOR IDs which are on the job that is associated to this damage record. These in conjunction with the other AORs fields determine which users have jurisdiction over this Damage Record. These are set by the system and therefore are uneditable from the API.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"deprecated": {
					"$ref": "#/definitions/Deprecated"
				},
				"displayInOV": {
					"description": "Whether or not to display in OV.",
					"type": "boolean"
				},
				"networkModelName": {
					"description": "The name of the device.",
					"type": "string",
					"example": "BKR 123"
				},
				"repairDuration": {
					"format": "int64",
					"description": "Estimated time to complete the repair",
					"type": "integer"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"autoAssociatedDeviceInfo": {
					"$ref": "#/definitions/DeviceInfo"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"jobID": {
					"description": "The internal ID of the job that the damage record is associated with.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"activeAt": {
					"format": "date-time",
					"description": "The date / time that the damage record became active.",
					"type": "string"
				},
				"extNetworkModelID": {
					"description": "The external ID of the device.  This will typically be the ID that came from the GIS.",
					"type": "string",
					"example": "570_31182856_0_11021755"
				},
				"associatedAssetCount": {
					"format": "int32",
					"description": "The total number of assets associated to the damage record",
					"type": "integer"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"closedAt": {
					"format": "date-time",
					"description": "The date/time that the damage record was closed.",
					"type": "string"
				},
				"displayID": {
					"$ref": "#/definitions/DisplayID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"deviceInfoType": {
					"description": "The type of device the damage record is associated with",
					"type": "string",
					"enum": [
						"BREAKER",
						"FUSE",
						"GENERATOR",
						"LINE",
						"LOAD",
						"NETWORK_PROTECTOR",
						"RECLOSER",
						"REGULATOR",
						"SECTIONALIZER",
						"SOURCE",
						"SWITCH",
						"TRANSFORMER"
					]
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"deviceType": {
					"description": "The type of device the damage record is associated with. Use deviceInfoType instead",
					"type": "string",
					"example": "Switch"
				},
				"address": {
					"description": "The address of the damage record.",
					"type": "string",
					"example": "123 Main Street"
				},
				"aorIDs": {
					"description": "List of AOR IDs the damage record is assigned to. These in conjunction with the other AORs fields determine which users have jurisdiction over this Damage Record.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"networkModelID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"jobDisplayID": {
					"description": "The display ID of the job that the damage record is associated with.",
					"type": "string",
					"example": "JE.0001"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"deviceInfo": {
					"$ref": "#/definitions/DeviceInfo"
				},
				"fromCrewAssignment": {
					"description": "Whether the damage record was created from a Crew Assignment",
					"type": "boolean",
					"example": false
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"damageRecordTypeID": {
					"description": "A reference to the internal ID of the damage record type of the damage record.  This would be found in the Service Type definition.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"closed": {
					"description": "Whether the damage record has been closed.",
					"type": "boolean"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"geographicAorIDs": {
					"description": "A List of AOR IDs for the damage record which have been set by association with a work area this damage record's location is within. These in conjunction with the other AORs fields determine which users have jurisdiction over this Damage Record.",
					"readOnly": true,
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c099"
					}
				}
			}
		},
		"ObjectId": {
			"description": "The internal ID of the resource.  This uses mongo's ObjectId format, which is a 24 character hexadecimal value.",
			"type": "string",
			"example": "59a1b4b4f304f0ef8232c768"
		},
		"CrewShiftLogShiftOffTime": {
			"description": "Structure to provide timestamp for crew off shift api.",
			"properties": {
				"shiftOffTime": {
					"format": "date-time",
					"description": "The time the crew was marked off shift.",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				}
			}
		},
		"CustomFieldValues": {
			"properties": {
				"dateTime": {
					"format": "date-time",
					"description": "Sample date-time custom field. The key for this will be the internal id of the custom field, instead of dateTime",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"flag": {
					"description": "Sample flag custom field. The key for this will be the internal id of the custom field, instead of flag",
					"type": "boolean"
				},
				"dropDownList": {
					"format": "int32",
					"description": "Sample drop down list custom field. The value will be the custom field value integer identifier. The key for this will be the internal id of the custom field, instead of dropDownList",
					"type": "integer"
				},
				"numeric": {
					"format": "int32",
					"description": "Sample numeric field. The key for this will be the internal id of the custom field, instead of numeric",
					"type": "integer"
				},
				"maskedText": {
					"description": "Sample masked text field. The key for this will be the internal id of the custom field, instead of maskedText",
					"type": "string"
				},
				"percentage": {
					"format": "float",
					"description": "Sample percentage field. The key for this will be the internal id of the custom field, instead of percentage. Only available on system hierarchy components.",
					"type": "number",
					"example": "0.45"
				},
				"location": {
					"$ref": "#/definitions/CustomFieldLocation"
				},
				"decimal": {
					"format": "double",
					"description": "Sample decimal field. The key for this will be the internal id of the custom field, instead of decimal",
					"type": "number"
				},
				"cascadingDropDownList": {
					"format": "int32",
					"description": "Sample cascading drop down list custom field. The value will be the custom field value integer identifier. The key for this will be the internal id of the custom field, instead of cascadingDropDownList",
					"type": "integer"
				},
				"email": {
					"format": "email",
					"description": "Sample email custom field. The key for this will be the internal id of the custom field, instead of email",
					"type": "string",
					"example": "a@b.c"
				},
				"aggregatedValue": {
					"format": "double",
					"description": "Sample aggregated value custom field. The key for this will be the internal id of the custom field, instead of aggregatedValue.  Only available on jobs and system hierarchy components.",
					"type": "number",
					"example": "10.0"
				},
				"multiSelect": {
					"description": "Sample multi-select field. The values will be the custom field value integer identifiers. The key for this will be the internal id of the custom field, instead of multiSelect",
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					}
				},
				"textArea": {
					"description": "Sample text area field. The key for this will be the internal id of the custom field, instead of numeric",
					"type": "string",
					"example": "text\narea"
				}
			}
		},
		"CrewAssignment": {
			"description": "A crew assignment resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"lastTransitionedAt": {
					"$ref": "#/definitions/LastTransitionedAt"
				},
				"notes": {
					"description": "Any notes pertaining to the crew assignment",
					"type": "string",
					"example": "sample notes"
				},
				"transitionHistory": {
					"$ref": "#/definitions/TransitionHistory"
				},
				"workTypeID": {
					"description": "Internal ID of the work type of the crew assignment.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"unavailable": {
					"description": "Indicator that the crew assigned to this assignment is not available for other assignments due to this crew assignment",
					"type": "boolean",
					"example": false
				},
				"jobAorIDs": {
					"description": "A List of AOR IDs which are on the job that is associated to this crew assignment. This determines which users have jurisdiction over this crew assignment. These are set by the system and therefore are uneditable from the API",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"destination": {
					"description": "Destination for the crew assignment",
					"type": "string",
					"example": "123 Jones Ave"
				},
				"requestedCrewType": {
					"format": "int32",
					"description": "The integer identifier of the crew type requested for the assignment",
					"type": "integer"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"crew": {
					"$ref": "#/definitions/Crew"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"jobID": {
					"description": "Internal ID of the job this crew assignment is associated with",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"eta": {
					"format": "date-time",
					"description": "Estimated time of arrival of the crew to the location",
					"type": "string"
				},
				"crewID": {
					"description": "Internal ID of the crew assigned to this crew assignment",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"displayID": {
					"$ref": "#/definitions/DisplayID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"assignedUserID": {
					"description": "Internal ID of the user assigned to the crew assignment",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"resolved": {
					"description": "Crew assignment resolved flag",
					"type": "boolean",
					"example": false
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"activeColorationRules": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ColorationRule"
					}
				},
				"lastChangeReason": {
					"$ref": "#/definitions/LastChangeReason"
				},
				"jobDisplayID": {
					"description": "Display ID of the job",
					"type": "string",
					"example": "J.E.12345"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"jobAorID": {
					"description": "(DEPRECATED - Use jobAorIDs instead) The internal ID of the associated job's aor.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"jobLeadCrewAssignment": {
					"description": "If this crew assignment is the lead.",
					"type": "boolean"
				},
				"assignedUserName": {
					"description": "User name of the user assigned to the crew assignment",
					"type": "string",
					"example": "sample assignedUserName"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"activeRowColorationRule": {
					"$ref": "#/definitions/ColorationRule"
				},
				"jobTypeID": {
					"description": "Job type of the job",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"breadcrumbs": {
					"description": "A list of breadcrumb objects indicating where the crew assignment has moved over time. The max allotted amount is 500, at which point every subsequent breadcrumb replaces the oldest.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Breadcrumb"
					}
				},
				"status": {
					"$ref": "#/definitions/Status"
				}
			}
		},
		"JobHazardCloseReturnData": {
			"properties": {
				"closedHazards": {
					"description": "List of all the hazards that were successfully closed.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Hazard"
					}
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"possibleHazardCount": {
					"format": "int32",
					"description": "Total count of possible hazards that could be closed.",
					"type": "integer",
					"example": 45
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				}
			}
		},
		"Service": {
			"description": "A premise service resource.",
			"properties": {
				"premiseID": {
					"description": "The internal ID of the premise the customer is assigned to. Uses mongo's ObjectId format, which is a 24 character hexadecimal value",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"deprecated": {
					"$ref": "#/definitions/Deprecated"
				},
				"serviceTypeID": {
					"description": "The internal ID of the Service Type of the premise the customer is associated with. Uses mongo's ObjectId format, which is a 24 character hexadecimal value.",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"priority": {
					"format": "int32",
					"description": "Priority identifier for the service. Reference the priorityTypes from the premise service configuration.",
					"type": "integer",
					"example": "1"
				},
				"retailerID": {
					"description": "The internal ID of the Retailer servicing the customer. Uses mongo's ObjectId format, which is a 24 character hexadecimal value.",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				}
			}
		},
		"PremiseServiceTypeDelete": {
			"description": "A premise service to delete",
			"properties": {
				"premiseID": {
					"description": "Internal ID of the premise to create the service for. One of premiseID and externalID are required.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"externalID": {
					"description": "External ID of the premise. Only used if premiseID is not specified. One of externalID and premiseID are required",
					"type": "string",
					"example": "DistTransformer,12345"
				},
				"serviceTypeID": {
					"description": "The internal ID of the associated service type. This or serviceTypeIdentifier are required",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"serviceTypeIdentifier": {
					"description": "The service type identifier for the service. This or serviceTypeID are required",
					"type": "string",
					"example": "Electric"
				}
			}
		},
		"Breadcrumb": {
			"description": "A breadcrumb resource representing another resource's location at a specific moment.",
			"properties": {
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"id": {
					"$ref": "#/definitions/ID"
				}
			}
		},
		"OMSFileMetadata": {
			"description": "File metadata.",
			"properties": {
				"jobID": {
					"description": "The internal ID of the job the file is attached to",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"uploadDate": {
					"format": "date-time",
					"description": "The time the file was uploaded.",
					"type": "string"
				},
				"uploadedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"contentType": {
					"description": "The mime type of the file",
					"type": "string"
				},
				"uploadedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				}
			}
		},
		"CustomFieldValuesUpdate": {
			"properties": {
				"dateTime": {
					"format": "date-time",
					"description": "Sample date-time custom field. The key for this can be either the custom field internal id or external label, instead of dateTime",
					"type": "string",
					"example": "2018-01-13T10:00:00Z"
				},
				"flag": {
					"description": "Sample flag custom field. The key for this can be either the custom field internal id or external label, instead of flag",
					"type": "boolean"
				},
				"dropDownList": {
					"format": "int32",
					"description": "Sample drop down list custom field update with the custom field value integer identifier specified. The key for this can be either the custom field internal id or external label, instead of dropDownList",
					"type": "integer"
				},
				"multiSelectText": {
					"description": "Sample multi-select field with custom field values specified by their labels. The key for this can be either the custom field internal id or external label, instead of multiSelect",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"numeric": {
					"format": "int32",
					"description": "Sample numeric field. The key for this can be either the custom field internal id or external label, instead of numeric",
					"type": "integer"
				},
				"location": {
					"$ref": "#/definitions/CustomFieldLocation"
				},
				"decimal": {
					"format": "double",
					"description": "Sample decimal field. The key for this will be either the custom field internal id or external label, instead of decimal",
					"type": "number"
				},
				"dropDownListText": {
					"description": "Sample drop down list custom field update with the custom field value label specified. The key for this can be either the custom field internal id or external label, instead of dropDownList",
					"type": "string"
				},
				"email": {
					"format": "email",
					"description": "Sample email custom field. The key for this can be either the custom field internal id or external label, instead of email",
					"type": "string",
					"example": "a@b.c"
				},
				"maskedText": {
					"description": "Sample masked text field. The key for this can be either the custom field internal id or external label, instead of maskedText",
					"type": "string"
				},
				"multiSelect": {
					"description": "Sample multi-select field with custom field values specified by their integer identifiers. The key for this can be either the custom field internal id or external label, instead of multiSelect",
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					}
				},
				"textArea": {
					"description": "Sample text area field. The key for this can be either the custom field internal id or external label, instead of numeric",
					"type": "string",
					"example": "text\narea"
				}
			}
		},
		"CustomTableValues": {
			"properties": {
				"customTable": {
					"description": "Sample custom table. The key for this will the custom field internal id of the custom table instead of customTable",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomFieldValues"
					}
				}
			}
		},
		"DeviceInfoV2": {
			"description": "Device Information",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"premiseServiceTypePriority": {
					"description": "The highest Premise Service Type Priority Type connected to the device",
					"type": "int",
					"example": 1
				},
				"externalID": {
					"description": "The external ID of the device.  This will typically be the ID that came from the GIS.",
					"type": "string",
					"example": "570_31182856_0_11021755"
				},
				"nominalStationID": {
					"description": "Internal ID of the nominal station associated with the device.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"type": {
					"description": "The type of device. Use deviceInfoType instead",
					"type": "string",
					"enum": [
						"Area",
						"Breaker",
						"Circuit",
						"Feeder",
						"Fuse",
						"Generator",
						"Line",
						"Load",
						"NetworkProtector",
						"Recloser",
						"Region",
						"Source",
						"Sectionalizer",
						"Substation",
						"Switch",
						"Transformer"
					],
					"example": "Load"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"nominalRegionID": {
					"description": "Internal ID of the nominal region associated with the device.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"inOVGeoDisplay": {
					"description": "Whether the device is included in the OpenView geographic one-line display",
					"type:": "boolean",
					"example": true
				},
				"substationName": {
					"description": "The name of the device's nominal substation",
					"type": "string",
					"example": "Berklee Sub"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"deviceInfoType": {
					"description": "The type of device the job is associated with",
					"type": "string",
					"enum": [
						"AREA",
						"BREAKER",
						"CIRCUIT",
						"FEEDER",
						"FUSE",
						"GENERATOR",
						"LINE",
						"LOAD",
						"NETWORK_PROTECTOR",
						"RECLOSER",
						"REGION",
						"REGULATOR",
						"SECTIONALIZER",
						"SOURCE",
						"SUBSTATION",
						"SWITCH",
						"TRANSFORMER"
					]
				},
				"group": {
					"description": "The group that the device was imported as part of.  This comes from the device extra data import.",
					"type": "string",
					"example": "Group A"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"nominalFeederID": {
					"description": "Internal ID of the nominal feeder associated with the device.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"nominalStationName": {
					"description": "The name of the device's nominal station",
					"type": "string",
					"example": "Berklee Sub"
				},
				"address": {
					"description": "The address of the device.",
					"type": "string",
					"example": "987 2nd Street"
				},
				"aorIDs": {
					"description": "List of AOR IDs for the device",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"nominalFeederName": {
					"description": "The name of the device's nominal feeder",
					"type": "string",
					"example": "FDR123"
				},
				"nominalAreaID": {
					"description": "Internal ID of the nominal area associated with the device.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"nominalAreaName": {
					"description": "The name of the device's nominal area",
					"type": "string",
					"example": "AREA_123"
				},
				"substationID": {
					"description": "Internal ID of the substation associated with the device.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"feederID": {
					"description": "Internal ID of the feeder associated with the device.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"internalID": {
					"$ref": "#/definitions/NetworkModelID"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"name": {
					"description": "The name of the device",
					"type": "string",
					"example": "Load_123"
				},
				"nominalRegionName": {
					"description": "The name of the device's nominal region",
					"type": "string",
					"example": "REGION_123"
				},
				"location": {
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"feederName": {
					"description": "The name of the device's nominal feeder",
					"type": "string",
					"example": "FDR123"
				}
			}
		},
		"ModelValidationFailureReasons": {
			"description": "Device Information to create",
			"properties": {
				"hazards": {
					"description": "List of hazards violated",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"perm": {
					"description": "Permission that is not met",
					"type": "string"
				},
				"customFields": {
					"description": "List of custom fields violated",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"childLinks": {
					"description": "List of child links violated",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"crews": {
					"description": "List of crews violated",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"fields": {
					"description": "List of system fields violated",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"failureObject": {
					"description": "Other fields for error handling"
				}
			}
		},
		"Callback": {
			"description": "A callback resource.",
			"properties": {
				"callID": {
					"description": "Internal ID of the call",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"premiseRestorationTime": {
					"format": "date-time",
					"description": "The time the associated premise was restored.",
					"type": "string"
				},
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"jobAorIDs": {
					"description": "A List of AOR IDs which are on the job that is associated to this callback. These in conjunction with the other AORs fields determine which users have jurisdiction over this callback. These are set by the system and therefore are uneditable from the API",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"outagePlanID": {
					"description": "The internal ID of the corresponding outage plan",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"jobID": {
					"description": "The internal ID of the corresponding job",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"aorID": {
					"description": "(DEPRECATED - Use aorIDs instead) The AOR ID for the callback. When querying, this will be the first (priority) AOR ID from the callback's AOR IDs. When posting, this field will be ignored if AOR IDs are specified.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"displayID": {
					"$ref": "#/definitions/DisplayID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"customerAddress": {
					"description": "Address associated with the customer",
					"type": "string",
					"example": "123 Carendon Rd."
				},
				"activeColorationRules": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ColorationRule"
					}
				},
				"lastChangeReason": {
					"$ref": "#/definitions/LastChangeReason"
				},
				"outagePlanDisplayID": {
					"description": "The display ID of the corresponding outage plan",
					"type": "string",
					"example": "OP.E.12345"
				},
				"jobDisplayID": {
					"description": "The display ID of the corresponding job",
					"type": "string",
					"example": "J.E.12345"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"customerName": {
					"description": "Customer Name",
					"type": "string",
					"example": "John Doe"
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"field": {
					"description": "A generic field depending on type of callback.",
					"type": "string",
					"example": "resolvedAt"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"customerID": {
					"description": "Internal ID of the customer",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"callDisplayID": {
					"description": "Display ID of the call",
					"type": "string",
					"example": "C.E.00001"
				},
				"activeRowColorationRule": {
					"$ref": "#/definitions/ColorationRule"
				},
				"jobTypeID": {
					"description": "The internal ID of the job type",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"callbackType": {
					"description": "Callback type",
					"type": "string",
					"enum": [
						"RESOLVED"
					]
				},
				"status": {
					"description": "The current status of the callback",
					"type": "string",
					"enum": [
						"PENDING",
						"FULFILLED",
						"CANCELLED"
					]
				},
				"callbackContactMethod": {
					"format": "int32",
					"description": "Default callback contact method for the caller. Reference callback contact method in the service type configuration",
					"type": "integer"
				},
				"callbackPhoneLocalNumber": {
					"description": "Local number for callback phone contact. Typically provided by an IVR system. Copied from associated call on creation.",
					"type": "string",
					"example": "111-1111"
				},
				"fieldValue": {
					"description": "The generic value corresponding to the value for the field property"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"callbackContactInfo": {
					"$ref": "#/definitions/CallbackContactInfo"
				},
				"callbackPhoneCountryCode": {
					"description": "Country code for callback phone contact. Typically provided by an IVR system. Copied from associated call on creation.",
					"type": "string",
					"example": "1"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"callCodeID": {
					"description": "Internal ID of the call code for this callback",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"assignedUserID": {
					"description": "Internal ID of the user assigned to the callback",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"externalCustomerID": {
					"$ref": "#/definitions/ExternalCustomerID"
				},
				"aorIDs": {
					"description": "A List of AOR IDs for this callback. The first AOR in this list is considered the 'Priority AOR'. These in conjunction with the other AORs fields determine which users have jurisdiction over this callback.",
					"type": "array",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"premiseID": {
					"$ref": "#/definitions/PremiseID"
				},
				"callbackPhoneCityCode": {
					"description": "City code for callback phone contact. Typically provided by an IVR system. Copied from associated call on creation.",
					"type": "string",
					"example": "111"
				},
				"jobAorID": {
					"description": "(DEPRECATED - Use jobAorIDs instead) The internal ID of the associated job's aor.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"callbackPhoneExtension": {
					"description": "Extension for callback phone contact. Typically provided by an IVR system. Copied from associated call on creation.",
					"type": "string",
					"example": "1111"
				},
				"customerRetailerID": {
					"description": "Internal Retailer ID for the customer",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"callbackPhoneAreaCode": {
					"description": "Area code for callback phone contact. Typically provided by an IVR system. Copied from associated call on creation.",
					"type": "string",
					"example": "111"
				},
				"assignedUserName": {
					"description": "User name of the user assigned to the callback",
					"type": "string",
					"example": "John Doe"
				},
				"externalPremiseID": {
					"$ref": "#/definitions/ExternalPremiseID"
				}
			}
		},
		"CustomerPremiseService": {
			"description": "A customer premise service resource.",
			"properties": {
				"callbackContactMethod": {
					"format": "int32",
					"description": "",
					"type": "integer",
					"example": "1"
				},
				"customerOverriddenValues": {
					"description": "Overridden values for the customer",
					"$ref": "#/definitions/OverriddenValues"
				},
				"amiSystemID": {
					"description": "The AMI System ID",
					"$ref": "#/definitions/ObjectId"
				},
				"deprecated": {
					"description": "Whether the premise service is deprecated",
					"type": "boolean",
					"example": false
				},
				"retailerID": {
					"description": "The customer's retailer",
					"$ref": "#/definitions/ObjectId"
				},
				"deviceName": {
					"description": "The name of the device that the premise service is connected to in the network model",
					"type": "string",
					"example": "Xfrmr_ABC"
				},
				"callbackContactInfo": {
					"$ref": "#/definitions/CallbackContactInfo"
				},
				"meterID": {
					"description": "The meter ID of the premise service",
					"type": "string",
					"example": "M-000001"
				},
				"customerDeprecated": {
					"description": "Whether the customer is deprecated",
					"type": "boolean",
					"example": false
				},
				"callbackTypes": {
					"description": "",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CallbackType"
					}
				},
				"id": {
					"description": "The premise service's internal ID",
					"$ref": "#/definitions/ObjectId"
				},
				"phases": {
					"description": "The phases of the premise service (only applicable to Electric)",
					"type": "string",
					"example": "123"
				},
				"externalCustomerID": {
					"description": "The external ID of the customer",
					"type": "string",
					"example": "C-000001"
				},
				"address": {
					"description": "The customer's address",
					"type": "string",
					"example": "123 Main Street"
				},
				"networkModelID": {
					"description": "The internal ID of the device that the premise service is connected to in the network model",
					"$ref": "#/definitions/ObjectId"
				},
				"premiseID": {
					"$ref": "#/definitions/ObjectId"
				},
				"workAreaID": {
					"$ref": "#/definitions/ObjectId"
				},
				"priority": {
					"format": "int32",
					"description": "The priority of the premise service",
					"type": "integer",
					"example": "1"
				},
				"deviceID": {
					"description": "The external ID of the device that the premise service is connected to in the network model",
					"type": "string",
					"example": "1_2_3_4"
				},
				"deviceInfo": {
					"$ref": "#/definitions/DeviceInfo"
				},
				"connected": {
					"description": "Whether the premise service type is connected",
					"type": "boolean",
					"example": false
				},
				"phoneNumber": {
					"description": "The customer's phone number",
					"type": "string",
					"example": "(555) 555-5555"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"premiseOverriddenValues": {
					"description": "Overridden values for the premise",
					"$ref": "#/definitions/OverriddenValues"
				},
				"premiseDeprecated": {
					"description": "Whether the premise is deprecated",
					"type": "boolean",
					"example": false
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"activeOutage": {
					"description": "Whether the premise service is currently considered out",
					"type": "boolean",
					"example": false
				},
				"customerID": {
					"description": "The customer's internal ID",
					"$ref": "#/definitions/ObjectId"
				},
				"name": {
					"description": "The customer's name",
					"type": "string",
					"example": "Bill Smith"
				},
				"serviceTypeID": {
					"$ref": "#/definitions/ObjectId"
				},
				"location": {
					"description": "The geospatial location of the premise",
					"$ref": "#/definitions/GeoJSONPoint"
				},
				"recentAMINotifications": {
					"$ref": "#/definitions/RecentAMINotifications"
				},
				"externalPremiseID": {
					"description": "The external ID of the premise",
					"type": "string",
					"example": "P-000001"
				}
			}
		},
		"CustomerPremiseJobStatusRequestCustomer": {
			"description": "A Customer-Premise-Service representation for requests",
			"properties": {
				"meterID": {
					"description": "The meter ID",
					"type": "string",
					"example": "M-0001"
				},
				"customerExternalID": {
					"description": "The external ID of the customer",
					"type": "string",
					"example": "C-0001"
				},
				"premiseExternalID": {
					"description": "The external ID of the premise",
					"type": "string",
					"example": "P-0001"
				}
			}
		},
		"ServiceCreate": {
			"description": "A Customer-Premise Service association to create",
			"properties": {
				"priorityLabel": {
					"description": "Priority label for the service. Reference the priorityTypes from the premise service configuration. Only used if priority is not specified.",
					"type": "string"
				},
				"premiseID": {
					"description": "The internal ID of the premise the customer is assigned to. Uses mongo's ObjectId format, which is a 24 character hexadecimal value. This or externalPremiseID are required",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"serviceTypeID": {
					"description": "The internal ID of the Service Type of the premise the customer is associated with. Uses mongo's ObjectId format, which is a 24 character hexadecimal value. This or serviceTypeIdentifier are required",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"externalRetailerID": {
					"description": "The external ID of the retailer servicing the customer for this service type and premise. If this or retailerID are not specified, The default retailer ID for the service type is used",
					"type": "string",
					"example": "yourEnergyRetailer"
				},
				"priority": {
					"format": "int32",
					"description": "Priority identifier for the service. Reference the priorityTypes from the premise service configuration.",
					"type": "integer",
					"example": "1"
				},
				"retailerID": {
					"description": "The internal ID of the Retailer servicing the customer. Uses mongo's ObjectId format, which is a 24 character hexadecimal value. If this or externalRetailerID are not specified, the default retailer for the service type is used",
					"type": "string",
					"example": "59a1b4b4f304f0ef8232c768"
				},
				"serviceTypeIdentifier": {
					"description": "The service type identifier for the service. This or serviceTypeID are required.",
					"type": "string",
					"example": "Electric"
				},
				"externalPremiseID": {
					"description": "The external ID of the premise the customer is assigned to. This or premiseID are required",
					"type": "string",
					"example": "P-0001"
				}
			}
		},
		"PriorityCreate": {
			"description": "A job priority override.",
			"properties": {
				"overridden": {
					"description": "Whether a user manually overrode the calculation.",
					"type": "boolean",
					"example": false
				},
				"value": {
					"format": "int32",
					"description": "The current priority value.",
					"type": "integer",
					"example": 1
				}
			}
		},
		"JobComment": {
			"allOf": [
				{
					"$ref": "#/definitions/Comment"
				},
				{
					"properties": {
						"modelID": {
							"description": "The internal ID of the job associated with the comment",
							"type": "string",
							"example": "59a1bd89f304f0ef8232c76a"
						}
					}
				}
			],
			"description": "A job comment resource."
		},
		"OperationEvent": {
			"description": "An operation event resource.",
			"properties": {
				"createdByUserID": {
					"$ref": "#/definitions/CreatedByUserID"
				},
				"hierarchyComponentIDs": {
					"description": "The list of internal IDs of associated network system hierarchy components.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ObjectId"
					}
				},
				"workAreaIDs": {
					"description": "The list of internal IDs of associated work area hierarchy components.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ObjectId"
					}
				},
				"hierarchyLevel": {
					"description": "The hierarchy level at which the event is associated.",
					"type": "string",
					"enum": [
						"FEEDER",
						"STATION",
						"AREA",
						"REGION",
						"SYSTEMLEVEL"
					]
				},
				"description": {
					"description": "Description of the operation event",
					"type": "string",
					"example": "sample description"
				},
				"serviceTypeIdentifier": {
					"$ref": "#/definitions/ServiceTypeIdentifier"
				},
				"archived": {
					"_comment": "When i tried having this defined in oms_external_api.json, it wasn't showing up right, the exact same thing works for deprecated",
					"description": "Whether the resource is archived.",
					"type:": "boolean",
					"example": false
				},
				"createdAt": {
					"$ref": "#/definitions/CreatedAt"
				},
				"customTableValues": {
					"$ref": "#/definitions/CustomTableValues"
				},
				"fileIds": {
					"type": "array",
					"descriptions": "The internal ids of the files that are attached to the operation event",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"end": {
					"format": "date-time",
					"description": "The time at which the event ended.",
					"type": "string"
				},
				"links": {
					"description": "A list of associated job links",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Link"
					}
				},
				"id": {
					"$ref": "#/definitions/ID"
				},
				"deletedFileIDs": {
					"type": "array",
					"descriptions": "The internal ids of the files that have been deleted from the operation event",
					"items": {
						"type": "string",
						"example": "59a1bd89f304f0ef8232c76a"
					}
				},
				"displayID": {
					"$ref": "#/definitions/DisplayID"
				},
				"customTableValuesExt": {
					"$ref": "#/definitions/CustomTableValuesExt"
				},
				"updatedAt": {
					"$ref": "#/definitions/UpdatedAt"
				},
				"activeColorationRules": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ColorationRule"
					}
				},
				"hierarchyComponentList": {
					"description": "The list of associated network system hierarchy components. This list is only provided for Operation Event APIs.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/HierarchyComponent"
					}
				},
				"start": {
					"format": "date",
					"description": "The time the event began.",
					"type": "string"
				},
				"label": {
					"description": "Operation event label",
					"type": "string",
					"example": "sample label"
				},
				"updatedByUserID": {
					"$ref": "#/definitions/UpdatedByUserID"
				},
				"operationEventType": {
					"description": "The hiearchy model type that this operation event tracks (network system hierarchy or work area)",
					"type": "string",
					"enum": [
						"SYSTEM_HIERARCHY",
						"WORK_AREA"
					]
				},
				"createdByUserName": {
					"$ref": "#/definitions/CreatedByUserName"
				},
				"updatedByUserName": {
					"$ref": "#/definitions/UpdatedByUserName"
				},
				"customFieldValues": {
					"$ref": "#/definitions/CustomFieldValues"
				},
				"customFieldValuesExt": {
					"$ref": "#/definitions/CustomFieldValuesExt"
				},
				"attachmentCount": {
					"format": "int32",
					"description": "The number of attachments on the operation event",
					"type": "integer"
				},
				"workAreaLevelID": {
					"description": "An ID reference to the work area hierarchy level at which the event is associated.",
					"type": "string",
					"example": "59a1bd89f304f0ef8232c76a"
				},
				"activeRowColorationRule": {
					"$ref": "#/definitions/ColorationRule"
				},
				"status": {
					"$ref": "#/definitions/OpEventStatus"
				}
			}
		},
		"PremiseCustomerJobs": {
			"description": "CustomerPremise Information, with Jobs.",
			"properties": {
				"externalCustomerID": {
					"descrption": "External ID of the associated customer.",
					"type": "string",
					"example": "C-123456"
				},
				"address": {
					"description": "Premise address.",
					"type": "string",
					"example": "sample address"
				},
				"phone": {
					"description": "Customer Phone Number.",
					"type": "string",
					"example": "(555) 555-5555"
				},
				"name": {
					"description": "Customer name.",
					"type": "string",
					"example": "John Doe"
				},
				"items": {
					"description": "A list of jobs.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Job"
					}
				},
				"externalPremiseID": {
					"description": "External ID of the associated premise.",
					"type": "string",
					"example": "P-123"
				}
			}
		},
		"CrewAssignmentData": {
			"description": "A joined list of calls and their associated jobs.",
			"properties": {
				"lastUpdated": {
					"format": "int64",
					"description": "Time in milliseconds since epoch of last updated value in the list of Crew assignments.",
					"type": "integer",
					"example": 1503941374348
				},
				"total": {
					"format": "int64",
					"description": "The total number of crew assignments returned",
					"type": "integer"
				},
				"data": {
					"description": "List of Crew Assignments",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CrewAssignment"
					}
				}
			}
		},
		"JobBulkChangeReturnStatus": {
			"description": "Job bulk change return status.",
			"properties": {
				"model": {
					"$ref": "#/definitions/Job"
				},
				"status": {
					"$ref": "#/definitions/ReturnStatus"
				}
			}
		}
	},
	"info": {
		"contact": {},
		"description": "OSI's Electra OMS External API Definition",
		"title": "OMS",
		"version": "3.4.40.0"
	},
	"tags": [
		{
			"name": "AMI Notification"
		},
		{
			"name": "Area"
		},
		{
			"name": "Asset"
		},
		{
			"name": "Call"
		},
		{
			"name": "Callback"
		},
		{
			"name": "Crew"
		},
		{
			"name": "Crew Assignment"
		},
		{
			"name": "Customer"
		},
		{
			"name": "Damage Record"
		},
		{
			"name": "Device"
		},
		{
			"name": "Feeder"
		},
		{
			"name": "Hazard"
		},
		{
			"name": "Job"
		},
		{
			"name": "Meter"
		},
		{
			"name": "Operation Event"
		},
		{
			"name": "Premise"
		},
		{
			"name": "Region"
		},
		{
			"name": "Retailer"
		},
		{
			"name": "Settings"
		},
		{
			"name": "Station"
		},
		{
			"name": "System"
		},
		{
			"name": "System Level"
		},
		{
			"name": "Work Request Template"
		}
	]
}